// Generated by the protocol buffer compiler.  DO NOT EDIT!

#import "MessagesProtoOrig.pb.h"
// @@protoc_insertion_point(imports)

@implementation AVIMMessagesProtoOrigRoot
static PBExtensionRegistry* extensionRegistry = nil;
+ (PBExtensionRegistry*) extensionRegistry {
  return extensionRegistry;
}

+ (void) initialize {
  if (self == [AVIMMessagesProtoOrigRoot class]) {
    PBMutableExtensionRegistry* registry = [PBMutableExtensionRegistry registry];
    [self registerAllExtensions:registry];
    [ObjectivecDescriptorRoot registerAllExtensions:registry];
    extensionRegistry = registry;
  }
}
+ (void) registerAllExtensions:(PBMutableExtensionRegistry*) registry {
}
@end

BOOL AVIMCommandTypeIsValidValue(AVIMCommandType value) {
  switch (value) {
    case AVIMCommandTypeSession:
    case AVIMCommandTypeConv:
    case AVIMCommandTypeDirect:
    case AVIMCommandTypeAck:
    case AVIMCommandTypeRcp:
    case AVIMCommandTypeUnread:
    case AVIMCommandTypeLogs:
    case AVIMCommandTypeError:
    case AVIMCommandTypeLogin:
    case AVIMCommandTypeData:
    case AVIMCommandTypeRoom:
    case AVIMCommandTypeRead:
    case AVIMCommandTypePresence:
    case AVIMCommandTypeReport:
    case AVIMCommandTypeEcho:
    case AVIMCommandTypeLoggedin:
    case AVIMCommandTypeLogout:
    case AVIMCommandTypeLoggedout:
    case AVIMCommandTypePatch:
      return YES;
    default:
      return NO;
  }
}
NSString *NSStringFromAVIMCommandType(AVIMCommandType value) {
  switch (value) {
    case AVIMCommandTypeSession:
      return @"AVIMCommandTypeSession";
    case AVIMCommandTypeConv:
      return @"AVIMCommandTypeConv";
    case AVIMCommandTypeDirect:
      return @"AVIMCommandTypeDirect";
    case AVIMCommandTypeAck:
      return @"AVIMCommandTypeAck";
    case AVIMCommandTypeRcp:
      return @"AVIMCommandTypeRcp";
    case AVIMCommandTypeUnread:
      return @"AVIMCommandTypeUnread";
    case AVIMCommandTypeLogs:
      return @"AVIMCommandTypeLogs";
    case AVIMCommandTypeError:
      return @"AVIMCommandTypeError";
    case AVIMCommandTypeLogin:
      return @"AVIMCommandTypeLogin";
    case AVIMCommandTypeData:
      return @"AVIMCommandTypeData";
    case AVIMCommandTypeRoom:
      return @"AVIMCommandTypeRoom";
    case AVIMCommandTypeRead:
      return @"AVIMCommandTypeRead";
    case AVIMCommandTypePresence:
      return @"AVIMCommandTypePresence";
    case AVIMCommandTypeReport:
      return @"AVIMCommandTypeReport";
    case AVIMCommandTypeEcho:
      return @"AVIMCommandTypeEcho";
    case AVIMCommandTypeLoggedin:
      return @"AVIMCommandTypeLoggedin";
    case AVIMCommandTypeLogout:
      return @"AVIMCommandTypeLogout";
    case AVIMCommandTypeLoggedout:
      return @"AVIMCommandTypeLoggedout";
    case AVIMCommandTypePatch:
      return @"AVIMCommandTypePatch";
    default:
      return nil;
  }
}

BOOL AVIMOpTypeIsValidValue(AVIMOpType value) {
  switch (value) {
    case AVIMOpTypeOpen:
    case AVIMOpTypeAdd:
    case AVIMOpTypeRemove:
    case AVIMOpTypeClose:
    case AVIMOpTypeOpened:
    case AVIMOpTypeClosed:
    case AVIMOpTypeQuery:
    case AVIMOpTypeQueryResult:
    case AVIMOpTypeConflict:
    case AVIMOpTypeAdded:
    case AVIMOpTypeRemoved:
    case AVIMOpTypeStart:
    case AVIMOpTypeStarted:
    case AVIMOpTypeJoined:
    case AVIMOpTypeMembersJoined:
    case AVIMOpTypeLeft:
    case AVIMOpTypeMembersLeft:
    case AVIMOpTypeResults:
    case AVIMOpTypeCount:
    case AVIMOpTypeResult:
    case AVIMOpTypeUpdate:
    case AVIMOpTypeUpdated:
    case AVIMOpTypeMute:
    case AVIMOpTypeUnmute:
    case AVIMOpTypeStatus:
    case AVIMOpTypeMembers:
    case AVIMOpTypeMaxRead:
    case AVIMOpTypeIsMember:
    case AVIMOpTypeJoin:
    case AVIMOpTypeInvite:
    case AVIMOpTypeLeave:
    case AVIMOpTypeKick:
    case AVIMOpTypeReject:
    case AVIMOpTypeInvited:
    case AVIMOpTypeKicked:
    case AVIMOpTypeUpload:
    case AVIMOpTypeUploaded:
    case AVIMOpTypeModify:
    case AVIMOpTypeModified:
      return YES;
    default:
      return NO;
  }
}
NSString *NSStringFromAVIMOpType(AVIMOpType value) {
  switch (value) {
    case AVIMOpTypeOpen:
      return @"AVIMOpTypeOpen";
    case AVIMOpTypeAdd:
      return @"AVIMOpTypeAdd";
    case AVIMOpTypeRemove:
      return @"AVIMOpTypeRemove";
    case AVIMOpTypeClose:
      return @"AVIMOpTypeClose";
    case AVIMOpTypeOpened:
      return @"AVIMOpTypeOpened";
    case AVIMOpTypeClosed:
      return @"AVIMOpTypeClosed";
    case AVIMOpTypeQuery:
      return @"AVIMOpTypeQuery";
    case AVIMOpTypeQueryResult:
      return @"AVIMOpTypeQueryResult";
    case AVIMOpTypeConflict:
      return @"AVIMOpTypeConflict";
    case AVIMOpTypeAdded:
      return @"AVIMOpTypeAdded";
    case AVIMOpTypeRemoved:
      return @"AVIMOpTypeRemoved";
    case AVIMOpTypeStart:
      return @"AVIMOpTypeStart";
    case AVIMOpTypeStarted:
      return @"AVIMOpTypeStarted";
    case AVIMOpTypeJoined:
      return @"AVIMOpTypeJoined";
    case AVIMOpTypeMembersJoined:
      return @"AVIMOpTypeMembersJoined";
    case AVIMOpTypeLeft:
      return @"AVIMOpTypeLeft";
    case AVIMOpTypeMembersLeft:
      return @"AVIMOpTypeMembersLeft";
    case AVIMOpTypeResults:
      return @"AVIMOpTypeResults";
    case AVIMOpTypeCount:
      return @"AVIMOpTypeCount";
    case AVIMOpTypeResult:
      return @"AVIMOpTypeResult";
    case AVIMOpTypeUpdate:
      return @"AVIMOpTypeUpdate";
    case AVIMOpTypeUpdated:
      return @"AVIMOpTypeUpdated";
    case AVIMOpTypeMute:
      return @"AVIMOpTypeMute";
    case AVIMOpTypeUnmute:
      return @"AVIMOpTypeUnmute";
    case AVIMOpTypeStatus:
      return @"AVIMOpTypeStatus";
    case AVIMOpTypeMembers:
      return @"AVIMOpTypeMembers";
    case AVIMOpTypeMaxRead:
      return @"AVIMOpTypeMaxRead";
    case AVIMOpTypeIsMember:
      return @"AVIMOpTypeIsMember";
    case AVIMOpTypeJoin:
      return @"AVIMOpTypeJoin";
    case AVIMOpTypeInvite:
      return @"AVIMOpTypeInvite";
    case AVIMOpTypeLeave:
      return @"AVIMOpTypeLeave";
    case AVIMOpTypeKick:
      return @"AVIMOpTypeKick";
    case AVIMOpTypeReject:
      return @"AVIMOpTypeReject";
    case AVIMOpTypeInvited:
      return @"AVIMOpTypeInvited";
    case AVIMOpTypeKicked:
      return @"AVIMOpTypeKicked";
    case AVIMOpTypeUpload:
      return @"AVIMOpTypeUpload";
    case AVIMOpTypeUploaded:
      return @"AVIMOpTypeUploaded";
    case AVIMOpTypeModify:
      return @"AVIMOpTypeModify";
    case AVIMOpTypeModified:
      return @"AVIMOpTypeModified";
    default:
      return nil;
  }
}

BOOL AVIMStatusTypeIsValidValue(AVIMStatusType value) {
  switch (value) {
    case AVIMStatusTypeOn:
    case AVIMStatusTypeOff:
      return YES;
    default:
      return NO;
  }
}
NSString *NSStringFromAVIMStatusType(AVIMStatusType value) {
  switch (value) {
    case AVIMStatusTypeOn:
      return @"AVIMStatusTypeOn";
    case AVIMStatusTypeOff:
      return @"AVIMStatusTypeOff";
    default:
      return nil;
  }
}

BOOL AVIMLogsCommand_QueryDirectionIsValidValue(AVIMLogsCommand_QueryDirection value) {
  switch (value) {
    case AVIMLogsCommand_QueryDirectionOld:
    case AVIMLogsCommand_QueryDirectionNew:
      return YES;
    default:
      return NO;
  }
}
NSString *NSStringFromAVIMLogsCommand_QueryDirection(AVIMLogsCommand_QueryDirection value) {
  switch (value) {
    case AVIMLogsCommand_QueryDirectionOld:
      return @"AVIMLogsCommand_QueryDirectionOld";
    case AVIMLogsCommand_QueryDirectionNew:
      return @"AVIMLogsCommand_QueryDirectionNew";
    default:
      return nil;
  }
}

@interface AVIMJsonObjectMessage ()
@property (strong) NSString* data;
@end

@implementation AVIMJsonObjectMessage

- (BOOL) hasData {
  return !!hasData_;
}
- (void) setHasData:(BOOL) _value_ {
  hasData_ = !!_value_;
}
@synthesize data;
- (instancetype) init {
  if ((self = [super init])) {
    self.data = @"";
  }
  return self;
}
static AVIMJsonObjectMessage* defaultAVIMJsonObjectMessageInstance = nil;
+ (void) initialize {
  if (self == [AVIMJsonObjectMessage class]) {
    defaultAVIMJsonObjectMessageInstance = [[AVIMJsonObjectMessage alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultAVIMJsonObjectMessageInstance;
}
- (instancetype) defaultInstance {
  return defaultAVIMJsonObjectMessageInstance;
}
- (BOOL) isInitialized {
  if (!self.hasData) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasData) {
    [output writeString:1 value:self.data];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasData) {
    size_ += computeStringSize(1, self.data);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (AVIMJsonObjectMessage*) parseFromData:(NSData*) data {
  return (AVIMJsonObjectMessage*)[[[AVIMJsonObjectMessage builder] mergeFromData:data] build];
}
+ (AVIMJsonObjectMessage*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (AVIMJsonObjectMessage*)[[[AVIMJsonObjectMessage builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (AVIMJsonObjectMessage*) parseFromInputStream:(NSInputStream*) input {
  return (AVIMJsonObjectMessage*)[[[AVIMJsonObjectMessage builder] mergeFromInputStream:input] build];
}
+ (AVIMJsonObjectMessage*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (AVIMJsonObjectMessage*)[[[AVIMJsonObjectMessage builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (AVIMJsonObjectMessage*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (AVIMJsonObjectMessage*)[[[AVIMJsonObjectMessage builder] mergeFromCodedInputStream:input] build];
}
+ (AVIMJsonObjectMessage*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (AVIMJsonObjectMessage*)[[[AVIMJsonObjectMessage builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (AVIMJsonObjectMessageBuilder*) builder {
  return [[AVIMJsonObjectMessageBuilder alloc] init];
}
+ (AVIMJsonObjectMessageBuilder*) builderWithPrototype:(AVIMJsonObjectMessage*) prototype {
  return [[AVIMJsonObjectMessage builder] mergeFrom:prototype];
}
- (AVIMJsonObjectMessageBuilder*) builder {
  return [AVIMJsonObjectMessage builder];
}
- (AVIMJsonObjectMessageBuilder*) toBuilder {
  return [AVIMJsonObjectMessage builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasData) {
    [output appendFormat:@"%@%@: %@\n", indent, @"data", self.data];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasData) {
    [dictionary setObject: self.data forKey: @"data"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[AVIMJsonObjectMessage class]]) {
    return NO;
  }
  AVIMJsonObjectMessage *otherMessage = other;
  return
      self.hasData == otherMessage.hasData &&
      (!self.hasData || [self.data isEqual:otherMessage.data]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasData) {
    hashCode = hashCode * 31 + [self.data hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface AVIMJsonObjectMessageBuilder()
@property (strong) AVIMJsonObjectMessage* resultJsonObjectMessage;
@end

@implementation AVIMJsonObjectMessageBuilder
@synthesize resultJsonObjectMessage;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultJsonObjectMessage = [[AVIMJsonObjectMessage alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultJsonObjectMessage;
}
- (AVIMJsonObjectMessageBuilder*) clear {
  self.resultJsonObjectMessage = [[AVIMJsonObjectMessage alloc] init];
  return self;
}
- (AVIMJsonObjectMessageBuilder*) clone {
  return [AVIMJsonObjectMessage builderWithPrototype:resultJsonObjectMessage];
}
- (AVIMJsonObjectMessage*) defaultInstance {
  return [AVIMJsonObjectMessage defaultInstance];
}
- (AVIMJsonObjectMessage*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (AVIMJsonObjectMessage*) buildPartial {
  AVIMJsonObjectMessage* returnMe = resultJsonObjectMessage;
  self.resultJsonObjectMessage = nil;
  return returnMe;
}
- (AVIMJsonObjectMessageBuilder*) mergeFrom:(AVIMJsonObjectMessage*) other {
  if (other == [AVIMJsonObjectMessage defaultInstance]) {
    return self;
  }
  if (other.hasData) {
    [self setData:other.data];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (AVIMJsonObjectMessageBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (AVIMJsonObjectMessageBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setData:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasData {
  return resultJsonObjectMessage.hasData;
}
- (NSString*) data {
  return resultJsonObjectMessage.data;
}
- (AVIMJsonObjectMessageBuilder*) setData:(NSString*) value {
  resultJsonObjectMessage.hasData = YES;
  resultJsonObjectMessage.data = value;
  return self;
}
- (AVIMJsonObjectMessageBuilder*) clearData {
  resultJsonObjectMessage.hasData = NO;
  resultJsonObjectMessage.data = @"";
  return self;
}
@end

@interface AVIMUnreadTuple ()
@property (strong) NSString* cid;
@property SInt32 unread;
@property (strong) NSString* mid;
@property SInt64 timestamp;
@property (strong) NSString* pb_from;
@property (strong) NSString* data;
@property SInt64 patchTimestamp;
@end

@implementation AVIMUnreadTuple

- (BOOL) hasCid {
  return !!hasCid_;
}
- (void) setHasCid:(BOOL) _value_ {
  hasCid_ = !!_value_;
}
@synthesize cid;
- (BOOL) hasUnread {
  return !!hasUnread_;
}
- (void) setHasUnread:(BOOL) _value_ {
  hasUnread_ = !!_value_;
}
@synthesize unread;
- (BOOL) hasMid {
  return !!hasMid_;
}
- (void) setHasMid:(BOOL) _value_ {
  hasMid_ = !!_value_;
}
@synthesize mid;
- (BOOL) hasTimestamp {
  return !!hasTimestamp_;
}
- (void) setHasTimestamp:(BOOL) _value_ {
  hasTimestamp_ = !!_value_;
}
@synthesize timestamp;
- (BOOL) hasFrom {
  return !!hasFrom_;
}
- (void) setHasFrom:(BOOL) _value_ {
  hasFrom_ = !!_value_;
}
@synthesize pb_from;
- (BOOL) hasData {
  return !!hasData_;
}
- (void) setHasData:(BOOL) _value_ {
  hasData_ = !!_value_;
}
@synthesize data;
- (BOOL) hasPatchTimestamp {
  return !!hasPatchTimestamp_;
}
- (void) setHasPatchTimestamp:(BOOL) _value_ {
  hasPatchTimestamp_ = !!_value_;
}
@synthesize patchTimestamp;
- (instancetype) init {
  if ((self = [super init])) {
    self.cid = @"";
    self.unread = 0;
    self.mid = @"";
    self.timestamp = 0L;
    self.pb_from = @"";
    self.data = @"";
    self.patchTimestamp = 0L;
  }
  return self;
}
static AVIMUnreadTuple* defaultAVIMUnreadTupleInstance = nil;
+ (void) initialize {
  if (self == [AVIMUnreadTuple class]) {
    defaultAVIMUnreadTupleInstance = [[AVIMUnreadTuple alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultAVIMUnreadTupleInstance;
}
- (instancetype) defaultInstance {
  return defaultAVIMUnreadTupleInstance;
}
- (BOOL) isInitialized {
  if (!self.hasCid) {
    return NO;
  }
  if (!self.hasUnread) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasCid) {
    [output writeString:1 value:self.cid];
  }
  if (self.hasUnread) {
    [output writeInt32:2 value:self.unread];
  }
  if (self.hasMid) {
    [output writeString:3 value:self.mid];
  }
  if (self.hasTimestamp) {
    [output writeInt64:4 value:self.timestamp];
  }
  if (self.hasFrom) {
    [output writeString:5 value:self.pb_from];
  }
  if (self.hasData) {
    [output writeString:6 value:self.data];
  }
  if (self.hasPatchTimestamp) {
    [output writeInt64:7 value:self.patchTimestamp];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasCid) {
    size_ += computeStringSize(1, self.cid);
  }
  if (self.hasUnread) {
    size_ += computeInt32Size(2, self.unread);
  }
  if (self.hasMid) {
    size_ += computeStringSize(3, self.mid);
  }
  if (self.hasTimestamp) {
    size_ += computeInt64Size(4, self.timestamp);
  }
  if (self.hasFrom) {
    size_ += computeStringSize(5, self.pb_from);
  }
  if (self.hasData) {
    size_ += computeStringSize(6, self.data);
  }
  if (self.hasPatchTimestamp) {
    size_ += computeInt64Size(7, self.patchTimestamp);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (AVIMUnreadTuple*) parseFromData:(NSData*) data {
  return (AVIMUnreadTuple*)[[[AVIMUnreadTuple builder] mergeFromData:data] build];
}
+ (AVIMUnreadTuple*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (AVIMUnreadTuple*)[[[AVIMUnreadTuple builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (AVIMUnreadTuple*) parseFromInputStream:(NSInputStream*) input {
  return (AVIMUnreadTuple*)[[[AVIMUnreadTuple builder] mergeFromInputStream:input] build];
}
+ (AVIMUnreadTuple*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (AVIMUnreadTuple*)[[[AVIMUnreadTuple builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (AVIMUnreadTuple*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (AVIMUnreadTuple*)[[[AVIMUnreadTuple builder] mergeFromCodedInputStream:input] build];
}
+ (AVIMUnreadTuple*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (AVIMUnreadTuple*)[[[AVIMUnreadTuple builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (AVIMUnreadTupleBuilder*) builder {
  return [[AVIMUnreadTupleBuilder alloc] init];
}
+ (AVIMUnreadTupleBuilder*) builderWithPrototype:(AVIMUnreadTuple*) prototype {
  return [[AVIMUnreadTuple builder] mergeFrom:prototype];
}
- (AVIMUnreadTupleBuilder*) builder {
  return [AVIMUnreadTuple builder];
}
- (AVIMUnreadTupleBuilder*) toBuilder {
  return [AVIMUnreadTuple builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasCid) {
    [output appendFormat:@"%@%@: %@\n", indent, @"cid", self.cid];
  }
  if (self.hasUnread) {
    [output appendFormat:@"%@%@: %@\n", indent, @"unread", [NSNumber numberWithInteger:self.unread]];
  }
  if (self.hasMid) {
    [output appendFormat:@"%@%@: %@\n", indent, @"mid", self.mid];
  }
  if (self.hasTimestamp) {
    [output appendFormat:@"%@%@: %@\n", indent, @"timestamp", [NSNumber numberWithLongLong:self.timestamp]];
  }
  if (self.hasFrom) {
    [output appendFormat:@"%@%@: %@\n", indent, @"pb_from", self.pb_from];
  }
  if (self.hasData) {
    [output appendFormat:@"%@%@: %@\n", indent, @"data", self.data];
  }
  if (self.hasPatchTimestamp) {
    [output appendFormat:@"%@%@: %@\n", indent, @"patchTimestamp", [NSNumber numberWithLongLong:self.patchTimestamp]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasCid) {
    [dictionary setObject: self.cid forKey: @"cid"];
  }
  if (self.hasUnread) {
    [dictionary setObject: [NSNumber numberWithInteger:self.unread] forKey: @"unread"];
  }
  if (self.hasMid) {
    [dictionary setObject: self.mid forKey: @"mid"];
  }
  if (self.hasTimestamp) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.timestamp] forKey: @"timestamp"];
  }
  if (self.hasFrom) {
    [dictionary setObject: self.pb_from forKey: @"pb_from"];
  }
  if (self.hasData) {
    [dictionary setObject: self.data forKey: @"data"];
  }
  if (self.hasPatchTimestamp) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.patchTimestamp] forKey: @"patchTimestamp"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[AVIMUnreadTuple class]]) {
    return NO;
  }
  AVIMUnreadTuple *otherMessage = other;
  return
      self.hasCid == otherMessage.hasCid &&
      (!self.hasCid || [self.cid isEqual:otherMessage.cid]) &&
      self.hasUnread == otherMessage.hasUnread &&
      (!self.hasUnread || self.unread == otherMessage.unread) &&
      self.hasMid == otherMessage.hasMid &&
      (!self.hasMid || [self.mid isEqual:otherMessage.mid]) &&
      self.hasTimestamp == otherMessage.hasTimestamp &&
      (!self.hasTimestamp || self.timestamp == otherMessage.timestamp) &&
      self.hasFrom == otherMessage.hasFrom &&
      (!self.hasFrom || [self.pb_from isEqual:otherMessage.pb_from]) &&
      self.hasData == otherMessage.hasData &&
      (!self.hasData || [self.data isEqual:otherMessage.data]) &&
      self.hasPatchTimestamp == otherMessage.hasPatchTimestamp &&
      (!self.hasPatchTimestamp || self.patchTimestamp == otherMessage.patchTimestamp) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasCid) {
    hashCode = hashCode * 31 + [self.cid hash];
  }
  if (self.hasUnread) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.unread] hash];
  }
  if (self.hasMid) {
    hashCode = hashCode * 31 + [self.mid hash];
  }
  if (self.hasTimestamp) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.timestamp] hash];
  }
  if (self.hasFrom) {
    hashCode = hashCode * 31 + [self.pb_from hash];
  }
  if (self.hasData) {
    hashCode = hashCode * 31 + [self.data hash];
  }
  if (self.hasPatchTimestamp) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.patchTimestamp] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface AVIMUnreadTupleBuilder()
@property (strong) AVIMUnreadTuple* resultUnreadTuple;
@end

@implementation AVIMUnreadTupleBuilder
@synthesize resultUnreadTuple;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultUnreadTuple = [[AVIMUnreadTuple alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultUnreadTuple;
}
- (AVIMUnreadTupleBuilder*) clear {
  self.resultUnreadTuple = [[AVIMUnreadTuple alloc] init];
  return self;
}
- (AVIMUnreadTupleBuilder*) clone {
  return [AVIMUnreadTuple builderWithPrototype:resultUnreadTuple];
}
- (AVIMUnreadTuple*) defaultInstance {
  return [AVIMUnreadTuple defaultInstance];
}
- (AVIMUnreadTuple*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (AVIMUnreadTuple*) buildPartial {
  AVIMUnreadTuple* returnMe = resultUnreadTuple;
  self.resultUnreadTuple = nil;
  return returnMe;
}
- (AVIMUnreadTupleBuilder*) mergeFrom:(AVIMUnreadTuple*) other {
  if (other == [AVIMUnreadTuple defaultInstance]) {
    return self;
  }
  if (other.hasCid) {
    [self setCid:other.cid];
  }
  if (other.hasUnread) {
    [self setUnread:other.unread];
  }
  if (other.hasMid) {
    [self setMid:other.mid];
  }
  if (other.hasTimestamp) {
    [self setTimestamp:other.timestamp];
  }
  if (other.hasFrom) {
    [self setFrom:other.pb_from];
  }
  if (other.hasData) {
    [self setData:other.data];
  }
  if (other.hasPatchTimestamp) {
    [self setPatchTimestamp:other.patchTimestamp];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (AVIMUnreadTupleBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (AVIMUnreadTupleBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setCid:[input readString]];
        break;
      }
      case 16: {
        [self setUnread:[input readInt32]];
        break;
      }
      case 26: {
        [self setMid:[input readString]];
        break;
      }
      case 32: {
        [self setTimestamp:[input readInt64]];
        break;
      }
      case 42: {
        [self setFrom:[input readString]];
        break;
      }
      case 50: {
        [self setData:[input readString]];
        break;
      }
      case 56: {
        [self setPatchTimestamp:[input readInt64]];
        break;
      }
    }
  }
}
- (BOOL) hasCid {
  return resultUnreadTuple.hasCid;
}
- (NSString*) cid {
  return resultUnreadTuple.cid;
}
- (AVIMUnreadTupleBuilder*) setCid:(NSString*) value {
  resultUnreadTuple.hasCid = YES;
  resultUnreadTuple.cid = value;
  return self;
}
- (AVIMUnreadTupleBuilder*) clearCid {
  resultUnreadTuple.hasCid = NO;
  resultUnreadTuple.cid = @"";
  return self;
}
- (BOOL) hasUnread {
  return resultUnreadTuple.hasUnread;
}
- (SInt32) unread {
  return resultUnreadTuple.unread;
}
- (AVIMUnreadTupleBuilder*) setUnread:(SInt32) value {
  resultUnreadTuple.hasUnread = YES;
  resultUnreadTuple.unread = value;
  return self;
}
- (AVIMUnreadTupleBuilder*) clearUnread {
  resultUnreadTuple.hasUnread = NO;
  resultUnreadTuple.unread = 0;
  return self;
}
- (BOOL) hasMid {
  return resultUnreadTuple.hasMid;
}
- (NSString*) mid {
  return resultUnreadTuple.mid;
}
- (AVIMUnreadTupleBuilder*) setMid:(NSString*) value {
  resultUnreadTuple.hasMid = YES;
  resultUnreadTuple.mid = value;
  return self;
}
- (AVIMUnreadTupleBuilder*) clearMid {
  resultUnreadTuple.hasMid = NO;
  resultUnreadTuple.mid = @"";
  return self;
}
- (BOOL) hasTimestamp {
  return resultUnreadTuple.hasTimestamp;
}
- (SInt64) timestamp {
  return resultUnreadTuple.timestamp;
}
- (AVIMUnreadTupleBuilder*) setTimestamp:(SInt64) value {
  resultUnreadTuple.hasTimestamp = YES;
  resultUnreadTuple.timestamp = value;
  return self;
}
- (AVIMUnreadTupleBuilder*) clearTimestamp {
  resultUnreadTuple.hasTimestamp = NO;
  resultUnreadTuple.timestamp = 0L;
  return self;
}
- (BOOL) hasFrom {
  return resultUnreadTuple.hasFrom;
}
- (NSString*) pb_from {
  return resultUnreadTuple.pb_from;
}
- (AVIMUnreadTupleBuilder*) setFrom:(NSString*) value {
  resultUnreadTuple.hasFrom = YES;
  resultUnreadTuple.pb_from = value;
  return self;
}
- (AVIMUnreadTupleBuilder*) clearFrom {
  resultUnreadTuple.hasFrom = NO;
  resultUnreadTuple.pb_from = @"";
  return self;
}
- (BOOL) hasData {
  return resultUnreadTuple.hasData;
}
- (NSString*) data {
  return resultUnreadTuple.data;
}
- (AVIMUnreadTupleBuilder*) setData:(NSString*) value {
  resultUnreadTuple.hasData = YES;
  resultUnreadTuple.data = value;
  return self;
}
- (AVIMUnreadTupleBuilder*) clearData {
  resultUnreadTuple.hasData = NO;
  resultUnreadTuple.data = @"";
  return self;
}
- (BOOL) hasPatchTimestamp {
  return resultUnreadTuple.hasPatchTimestamp;
}
- (SInt64) patchTimestamp {
  return resultUnreadTuple.patchTimestamp;
}
- (AVIMUnreadTupleBuilder*) setPatchTimestamp:(SInt64) value {
  resultUnreadTuple.hasPatchTimestamp = YES;
  resultUnreadTuple.patchTimestamp = value;
  return self;
}
- (AVIMUnreadTupleBuilder*) clearPatchTimestamp {
  resultUnreadTuple.hasPatchTimestamp = NO;
  resultUnreadTuple.patchTimestamp = 0L;
  return self;
}
@end

@interface AVIMLogItem ()
@property (strong) NSString* pb_from;
@property (strong) NSString* data;
@property SInt64 timestamp;
@property (strong) NSString* msgId;
@property SInt64 ackAt;
@property SInt64 readAt;
@property SInt64 patchTimestamp;
@end

@implementation AVIMLogItem

- (BOOL) hasFrom {
  return !!hasFrom_;
}
- (void) setHasFrom:(BOOL) _value_ {
  hasFrom_ = !!_value_;
}
@synthesize pb_from;
- (BOOL) hasData {
  return !!hasData_;
}
- (void) setHasData:(BOOL) _value_ {
  hasData_ = !!_value_;
}
@synthesize data;
- (BOOL) hasTimestamp {
  return !!hasTimestamp_;
}
- (void) setHasTimestamp:(BOOL) _value_ {
  hasTimestamp_ = !!_value_;
}
@synthesize timestamp;
- (BOOL) hasMsgId {
  return !!hasMsgId_;
}
- (void) setHasMsgId:(BOOL) _value_ {
  hasMsgId_ = !!_value_;
}
@synthesize msgId;
- (BOOL) hasAckAt {
  return !!hasAckAt_;
}
- (void) setHasAckAt:(BOOL) _value_ {
  hasAckAt_ = !!_value_;
}
@synthesize ackAt;
- (BOOL) hasReadAt {
  return !!hasReadAt_;
}
- (void) setHasReadAt:(BOOL) _value_ {
  hasReadAt_ = !!_value_;
}
@synthesize readAt;
- (BOOL) hasPatchTimestamp {
  return !!hasPatchTimestamp_;
}
- (void) setHasPatchTimestamp:(BOOL) _value_ {
  hasPatchTimestamp_ = !!_value_;
}
@synthesize patchTimestamp;
- (instancetype) init {
  if ((self = [super init])) {
    self.pb_from = @"";
    self.data = @"";
    self.timestamp = 0L;
    self.msgId = @"";
    self.ackAt = 0L;
    self.readAt = 0L;
    self.patchTimestamp = 0L;
  }
  return self;
}
static AVIMLogItem* defaultAVIMLogItemInstance = nil;
+ (void) initialize {
  if (self == [AVIMLogItem class]) {
    defaultAVIMLogItemInstance = [[AVIMLogItem alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultAVIMLogItemInstance;
}
- (instancetype) defaultInstance {
  return defaultAVIMLogItemInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasFrom) {
    [output writeString:1 value:self.pb_from];
  }
  if (self.hasData) {
    [output writeString:2 value:self.data];
  }
  if (self.hasTimestamp) {
    [output writeInt64:3 value:self.timestamp];
  }
  if (self.hasMsgId) {
    [output writeString:4 value:self.msgId];
  }
  if (self.hasAckAt) {
    [output writeInt64:5 value:self.ackAt];
  }
  if (self.hasReadAt) {
    [output writeInt64:6 value:self.readAt];
  }
  if (self.hasPatchTimestamp) {
    [output writeInt64:7 value:self.patchTimestamp];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasFrom) {
    size_ += computeStringSize(1, self.pb_from);
  }
  if (self.hasData) {
    size_ += computeStringSize(2, self.data);
  }
  if (self.hasTimestamp) {
    size_ += computeInt64Size(3, self.timestamp);
  }
  if (self.hasMsgId) {
    size_ += computeStringSize(4, self.msgId);
  }
  if (self.hasAckAt) {
    size_ += computeInt64Size(5, self.ackAt);
  }
  if (self.hasReadAt) {
    size_ += computeInt64Size(6, self.readAt);
  }
  if (self.hasPatchTimestamp) {
    size_ += computeInt64Size(7, self.patchTimestamp);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (AVIMLogItem*) parseFromData:(NSData*) data {
  return (AVIMLogItem*)[[[AVIMLogItem builder] mergeFromData:data] build];
}
+ (AVIMLogItem*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (AVIMLogItem*)[[[AVIMLogItem builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (AVIMLogItem*) parseFromInputStream:(NSInputStream*) input {
  return (AVIMLogItem*)[[[AVIMLogItem builder] mergeFromInputStream:input] build];
}
+ (AVIMLogItem*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (AVIMLogItem*)[[[AVIMLogItem builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (AVIMLogItem*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (AVIMLogItem*)[[[AVIMLogItem builder] mergeFromCodedInputStream:input] build];
}
+ (AVIMLogItem*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (AVIMLogItem*)[[[AVIMLogItem builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (AVIMLogItemBuilder*) builder {
  return [[AVIMLogItemBuilder alloc] init];
}
+ (AVIMLogItemBuilder*) builderWithPrototype:(AVIMLogItem*) prototype {
  return [[AVIMLogItem builder] mergeFrom:prototype];
}
- (AVIMLogItemBuilder*) builder {
  return [AVIMLogItem builder];
}
- (AVIMLogItemBuilder*) toBuilder {
  return [AVIMLogItem builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasFrom) {
    [output appendFormat:@"%@%@: %@\n", indent, @"pb_from", self.pb_from];
  }
  if (self.hasData) {
    [output appendFormat:@"%@%@: %@\n", indent, @"data", self.data];
  }
  if (self.hasTimestamp) {
    [output appendFormat:@"%@%@: %@\n", indent, @"timestamp", [NSNumber numberWithLongLong:self.timestamp]];
  }
  if (self.hasMsgId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"msgId", self.msgId];
  }
  if (self.hasAckAt) {
    [output appendFormat:@"%@%@: %@\n", indent, @"ackAt", [NSNumber numberWithLongLong:self.ackAt]];
  }
  if (self.hasReadAt) {
    [output appendFormat:@"%@%@: %@\n", indent, @"readAt", [NSNumber numberWithLongLong:self.readAt]];
  }
  if (self.hasPatchTimestamp) {
    [output appendFormat:@"%@%@: %@\n", indent, @"patchTimestamp", [NSNumber numberWithLongLong:self.patchTimestamp]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasFrom) {
    [dictionary setObject: self.pb_from forKey: @"pb_from"];
  }
  if (self.hasData) {
    [dictionary setObject: self.data forKey: @"data"];
  }
  if (self.hasTimestamp) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.timestamp] forKey: @"timestamp"];
  }
  if (self.hasMsgId) {
    [dictionary setObject: self.msgId forKey: @"msgId"];
  }
  if (self.hasAckAt) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.ackAt] forKey: @"ackAt"];
  }
  if (self.hasReadAt) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.readAt] forKey: @"readAt"];
  }
  if (self.hasPatchTimestamp) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.patchTimestamp] forKey: @"patchTimestamp"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[AVIMLogItem class]]) {
    return NO;
  }
  AVIMLogItem *otherMessage = other;
  return
      self.hasFrom == otherMessage.hasFrom &&
      (!self.hasFrom || [self.pb_from isEqual:otherMessage.pb_from]) &&
      self.hasData == otherMessage.hasData &&
      (!self.hasData || [self.data isEqual:otherMessage.data]) &&
      self.hasTimestamp == otherMessage.hasTimestamp &&
      (!self.hasTimestamp || self.timestamp == otherMessage.timestamp) &&
      self.hasMsgId == otherMessage.hasMsgId &&
      (!self.hasMsgId || [self.msgId isEqual:otherMessage.msgId]) &&
      self.hasAckAt == otherMessage.hasAckAt &&
      (!self.hasAckAt || self.ackAt == otherMessage.ackAt) &&
      self.hasReadAt == otherMessage.hasReadAt &&
      (!self.hasReadAt || self.readAt == otherMessage.readAt) &&
      self.hasPatchTimestamp == otherMessage.hasPatchTimestamp &&
      (!self.hasPatchTimestamp || self.patchTimestamp == otherMessage.patchTimestamp) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasFrom) {
    hashCode = hashCode * 31 + [self.pb_from hash];
  }
  if (self.hasData) {
    hashCode = hashCode * 31 + [self.data hash];
  }
  if (self.hasTimestamp) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.timestamp] hash];
  }
  if (self.hasMsgId) {
    hashCode = hashCode * 31 + [self.msgId hash];
  }
  if (self.hasAckAt) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.ackAt] hash];
  }
  if (self.hasReadAt) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.readAt] hash];
  }
  if (self.hasPatchTimestamp) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.patchTimestamp] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface AVIMLogItemBuilder()
@property (strong) AVIMLogItem* resultLogItem;
@end

@implementation AVIMLogItemBuilder
@synthesize resultLogItem;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultLogItem = [[AVIMLogItem alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultLogItem;
}
- (AVIMLogItemBuilder*) clear {
  self.resultLogItem = [[AVIMLogItem alloc] init];
  return self;
}
- (AVIMLogItemBuilder*) clone {
  return [AVIMLogItem builderWithPrototype:resultLogItem];
}
- (AVIMLogItem*) defaultInstance {
  return [AVIMLogItem defaultInstance];
}
- (AVIMLogItem*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (AVIMLogItem*) buildPartial {
  AVIMLogItem* returnMe = resultLogItem;
  self.resultLogItem = nil;
  return returnMe;
}
- (AVIMLogItemBuilder*) mergeFrom:(AVIMLogItem*) other {
  if (other == [AVIMLogItem defaultInstance]) {
    return self;
  }
  if (other.hasFrom) {
    [self setFrom:other.pb_from];
  }
  if (other.hasData) {
    [self setData:other.data];
  }
  if (other.hasTimestamp) {
    [self setTimestamp:other.timestamp];
  }
  if (other.hasMsgId) {
    [self setMsgId:other.msgId];
  }
  if (other.hasAckAt) {
    [self setAckAt:other.ackAt];
  }
  if (other.hasReadAt) {
    [self setReadAt:other.readAt];
  }
  if (other.hasPatchTimestamp) {
    [self setPatchTimestamp:other.patchTimestamp];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (AVIMLogItemBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (AVIMLogItemBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setFrom:[input readString]];
        break;
      }
      case 18: {
        [self setData:[input readString]];
        break;
      }
      case 24: {
        [self setTimestamp:[input readInt64]];
        break;
      }
      case 34: {
        [self setMsgId:[input readString]];
        break;
      }
      case 40: {
        [self setAckAt:[input readInt64]];
        break;
      }
      case 48: {
        [self setReadAt:[input readInt64]];
        break;
      }
      case 56: {
        [self setPatchTimestamp:[input readInt64]];
        break;
      }
    }
  }
}
- (BOOL) hasFrom {
  return resultLogItem.hasFrom;
}
- (NSString*) pb_from {
  return resultLogItem.pb_from;
}
- (AVIMLogItemBuilder*) setFrom:(NSString*) value {
  resultLogItem.hasFrom = YES;
  resultLogItem.pb_from = value;
  return self;
}
- (AVIMLogItemBuilder*) clearFrom {
  resultLogItem.hasFrom = NO;
  resultLogItem.pb_from = @"";
  return self;
}
- (BOOL) hasData {
  return resultLogItem.hasData;
}
- (NSString*) data {
  return resultLogItem.data;
}
- (AVIMLogItemBuilder*) setData:(NSString*) value {
  resultLogItem.hasData = YES;
  resultLogItem.data = value;
  return self;
}
- (AVIMLogItemBuilder*) clearData {
  resultLogItem.hasData = NO;
  resultLogItem.data = @"";
  return self;
}
- (BOOL) hasTimestamp {
  return resultLogItem.hasTimestamp;
}
- (SInt64) timestamp {
  return resultLogItem.timestamp;
}
- (AVIMLogItemBuilder*) setTimestamp:(SInt64) value {
  resultLogItem.hasTimestamp = YES;
  resultLogItem.timestamp = value;
  return self;
}
- (AVIMLogItemBuilder*) clearTimestamp {
  resultLogItem.hasTimestamp = NO;
  resultLogItem.timestamp = 0L;
  return self;
}
- (BOOL) hasMsgId {
  return resultLogItem.hasMsgId;
}
- (NSString*) msgId {
  return resultLogItem.msgId;
}
- (AVIMLogItemBuilder*) setMsgId:(NSString*) value {
  resultLogItem.hasMsgId = YES;
  resultLogItem.msgId = value;
  return self;
}
- (AVIMLogItemBuilder*) clearMsgId {
  resultLogItem.hasMsgId = NO;
  resultLogItem.msgId = @"";
  return self;
}
- (BOOL) hasAckAt {
  return resultLogItem.hasAckAt;
}
- (SInt64) ackAt {
  return resultLogItem.ackAt;
}
- (AVIMLogItemBuilder*) setAckAt:(SInt64) value {
  resultLogItem.hasAckAt = YES;
  resultLogItem.ackAt = value;
  return self;
}
- (AVIMLogItemBuilder*) clearAckAt {
  resultLogItem.hasAckAt = NO;
  resultLogItem.ackAt = 0L;
  return self;
}
- (BOOL) hasReadAt {
  return resultLogItem.hasReadAt;
}
- (SInt64) readAt {
  return resultLogItem.readAt;
}
- (AVIMLogItemBuilder*) setReadAt:(SInt64) value {
  resultLogItem.hasReadAt = YES;
  resultLogItem.readAt = value;
  return self;
}
- (AVIMLogItemBuilder*) clearReadAt {
  resultLogItem.hasReadAt = NO;
  resultLogItem.readAt = 0L;
  return self;
}
- (BOOL) hasPatchTimestamp {
  return resultLogItem.hasPatchTimestamp;
}
- (SInt64) patchTimestamp {
  return resultLogItem.patchTimestamp;
}
- (AVIMLogItemBuilder*) setPatchTimestamp:(SInt64) value {
  resultLogItem.hasPatchTimestamp = YES;
  resultLogItem.patchTimestamp = value;
  return self;
}
- (AVIMLogItemBuilder*) clearPatchTimestamp {
  resultLogItem.hasPatchTimestamp = NO;
  resultLogItem.patchTimestamp = 0L;
  return self;
}
@end

@interface AVIMDataCommand ()
@property (strong) NSMutableArray * idsArray;
@property (strong) NSMutableArray * msgArray;
@property BOOL offline;
@end

@implementation AVIMDataCommand

@synthesize idsArray;
@dynamic ids;
@synthesize msgArray;
@dynamic msg;
- (BOOL) hasOffline {
  return !!hasOffline_;
}
- (void) setHasOffline:(BOOL) _value_ {
  hasOffline_ = !!_value_;
}
- (BOOL) offline {
  return !!offline_;
}
- (void) setOffline:(BOOL) _value_ {
  offline_ = !!_value_;
}
- (instancetype) init {
  if ((self = [super init])) {
    self.offline = NO;
  }
  return self;
}
static AVIMDataCommand* defaultAVIMDataCommandInstance = nil;
+ (void) initialize {
  if (self == [AVIMDataCommand class]) {
    defaultAVIMDataCommandInstance = [[AVIMDataCommand alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultAVIMDataCommandInstance;
}
- (instancetype) defaultInstance {
  return defaultAVIMDataCommandInstance;
}
- (NSArray *)ids {
  return idsArray;
}
- (NSString*)idsAtIndex:(NSUInteger)index {
  return [idsArray objectAtIndex:index];
}
- (NSArray *)msg {
  return msgArray;
}
- (AVIMJsonObjectMessage*)msgAtIndex:(NSUInteger)index {
  return [msgArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  __block BOOL isInitmsg = YES;
   [self.msg enumerateObjectsUsingBlock:^(AVIMJsonObjectMessage *element, NSUInteger idx, BOOL *stop) {
    if (!element.isInitialized) {
      isInitmsg = NO;
      *stop = YES;
    }
  }];
  if (!isInitmsg) return isInitmsg;
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  [self.idsArray enumerateObjectsUsingBlock:^(NSString *element, NSUInteger idx, BOOL *stop) {
    [output writeString:1 value:element];
  }];
  [self.msgArray enumerateObjectsUsingBlock:^(AVIMJsonObjectMessage *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:2 value:element];
  }];
  if (self.hasOffline) {
    [output writeBool:3 value:self.offline];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  {
    __block SInt32 dataSize = 0;
    const NSUInteger count = self.idsArray.count;
    [self.idsArray enumerateObjectsUsingBlock:^(NSString *element, NSUInteger idx, BOOL *stop) {
      dataSize += computeStringSizeNoTag(element);
    }];
    size_ += dataSize;
    size_ += (SInt32)(1 * count);
  }
  [self.msgArray enumerateObjectsUsingBlock:^(AVIMJsonObjectMessage *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(2, element);
  }];
  if (self.hasOffline) {
    size_ += computeBoolSize(3, self.offline);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (AVIMDataCommand*) parseFromData:(NSData*) data {
  return (AVIMDataCommand*)[[[AVIMDataCommand builder] mergeFromData:data] build];
}
+ (AVIMDataCommand*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (AVIMDataCommand*)[[[AVIMDataCommand builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (AVIMDataCommand*) parseFromInputStream:(NSInputStream*) input {
  return (AVIMDataCommand*)[[[AVIMDataCommand builder] mergeFromInputStream:input] build];
}
+ (AVIMDataCommand*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (AVIMDataCommand*)[[[AVIMDataCommand builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (AVIMDataCommand*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (AVIMDataCommand*)[[[AVIMDataCommand builder] mergeFromCodedInputStream:input] build];
}
+ (AVIMDataCommand*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (AVIMDataCommand*)[[[AVIMDataCommand builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (AVIMDataCommandBuilder*) builder {
  return [[AVIMDataCommandBuilder alloc] init];
}
+ (AVIMDataCommandBuilder*) builderWithPrototype:(AVIMDataCommand*) prototype {
  return [[AVIMDataCommand builder] mergeFrom:prototype];
}
- (AVIMDataCommandBuilder*) builder {
  return [AVIMDataCommand builder];
}
- (AVIMDataCommandBuilder*) toBuilder {
  return [AVIMDataCommand builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  [self.idsArray enumerateObjectsUsingBlock:^(id obj, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@: %@\n", indent, @"ids", obj];
  }];
  [self.msgArray enumerateObjectsUsingBlock:^(AVIMJsonObjectMessage *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"msg"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  if (self.hasOffline) {
    [output appendFormat:@"%@%@: %@\n", indent, @"offline", [NSNumber numberWithBool:self.offline]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  [dictionary setObject:self.ids forKey: @"ids"];
  for (AVIMJsonObjectMessage* element in self.msgArray) {
    NSMutableDictionary *elementDictionary = [NSMutableDictionary dictionary];
    [element storeInDictionary:elementDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:elementDictionary] forKey:@"msg"];
  }
  if (self.hasOffline) {
    [dictionary setObject: [NSNumber numberWithBool:self.offline] forKey: @"offline"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[AVIMDataCommand class]]) {
    return NO;
  }
  AVIMDataCommand *otherMessage = other;
  return
      [self.idsArray isEqualToArray:otherMessage.idsArray] &&
      [self.msgArray isEqualToArray:otherMessage.msgArray] &&
      self.hasOffline == otherMessage.hasOffline &&
      (!self.hasOffline || self.offline == otherMessage.offline) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  [self.idsArray enumerateObjectsUsingBlock:^(NSString *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  [self.msgArray enumerateObjectsUsingBlock:^(AVIMJsonObjectMessage *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  if (self.hasOffline) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.offline] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface AVIMDataCommandBuilder()
@property (strong) AVIMDataCommand* resultDataCommand;
@end

@implementation AVIMDataCommandBuilder
@synthesize resultDataCommand;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultDataCommand = [[AVIMDataCommand alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultDataCommand;
}
- (AVIMDataCommandBuilder*) clear {
  self.resultDataCommand = [[AVIMDataCommand alloc] init];
  return self;
}
- (AVIMDataCommandBuilder*) clone {
  return [AVIMDataCommand builderWithPrototype:resultDataCommand];
}
- (AVIMDataCommand*) defaultInstance {
  return [AVIMDataCommand defaultInstance];
}
- (AVIMDataCommand*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (AVIMDataCommand*) buildPartial {
  AVIMDataCommand* returnMe = resultDataCommand;
  self.resultDataCommand = nil;
  return returnMe;
}
- (AVIMDataCommandBuilder*) mergeFrom:(AVIMDataCommand*) other {
  if (other == [AVIMDataCommand defaultInstance]) {
    return self;
  }
  if (other.idsArray.count > 0) {
    if (resultDataCommand.idsArray == nil) {
      resultDataCommand.idsArray = [[NSMutableArray alloc] initWithArray:other.idsArray];
    } else {
      [resultDataCommand.idsArray addObjectsFromArray:other.idsArray];
    }
  }
  if (other.msgArray.count > 0) {
    if (resultDataCommand.msgArray == nil) {
      resultDataCommand.msgArray = [[NSMutableArray alloc] initWithArray:other.msgArray];
    } else {
      [resultDataCommand.msgArray addObjectsFromArray:other.msgArray];
    }
  }
  if (other.hasOffline) {
    [self setOffline:other.offline];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (AVIMDataCommandBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (AVIMDataCommandBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self addIds:[input readString]];
        break;
      }
      case 18: {
        AVIMJsonObjectMessageBuilder* subBuilder = [AVIMJsonObjectMessage builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addMsg:[subBuilder buildPartial]];
        break;
      }
      case 24: {
        [self setOffline:[input readBool]];
        break;
      }
    }
  }
}
- (NSMutableArray *)ids {
  return resultDataCommand.idsArray;
}
- (NSString*)idsAtIndex:(NSUInteger)index {
  return [resultDataCommand idsAtIndex:index];
}
- (AVIMDataCommandBuilder *)addIds:(NSString*)value {
  if (resultDataCommand.idsArray == nil) {
    resultDataCommand.idsArray = [[NSMutableArray alloc]init];
  }
  [resultDataCommand.idsArray addObject:value];
  return self;
}
- (AVIMDataCommandBuilder *)setIdsArray:(NSArray *)array {
  resultDataCommand.idsArray = [[NSMutableArray alloc] initWithArray:array];
  return self;
}
- (AVIMDataCommandBuilder *)clearIds {
  resultDataCommand.idsArray = nil;
  return self;
}
- (NSMutableArray *)msg {
  return resultDataCommand.msgArray;
}
- (AVIMJsonObjectMessage*)msgAtIndex:(NSUInteger)index {
  return [resultDataCommand msgAtIndex:index];
}
- (AVIMDataCommandBuilder *)addMsg:(AVIMJsonObjectMessage*)value {
  if (resultDataCommand.msgArray == nil) {
    resultDataCommand.msgArray = [[NSMutableArray alloc]init];
  }
  [resultDataCommand.msgArray addObject:value];
  return self;
}
- (AVIMDataCommandBuilder *)setMsgArray:(NSArray *)array {
  resultDataCommand.msgArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (AVIMDataCommandBuilder *)clearMsg {
  resultDataCommand.msgArray = nil;
  return self;
}
- (BOOL) hasOffline {
  return resultDataCommand.hasOffline;
}
- (BOOL) offline {
  return resultDataCommand.offline;
}
- (AVIMDataCommandBuilder*) setOffline:(BOOL) value {
  resultDataCommand.hasOffline = YES;
  resultDataCommand.offline = value;
  return self;
}
- (AVIMDataCommandBuilder*) clearOffline {
  resultDataCommand.hasOffline = NO;
  resultDataCommand.offline = NO;
  return self;
}
@end

@interface AVIMSessionCommand ()
@property SInt64 t;
@property (strong) NSString* n;
@property (strong) NSString* s;
@property (strong) NSString* ua;
@property BOOL r;
@property (strong) NSString* tag;
@property (strong) NSString* deviceId;
@property (strong) NSMutableArray * sessionPeerIdsArray;
@property (strong) NSMutableArray * onlineSessionPeerIdsArray;
@property (strong) NSString* st;
@property SInt32 stTtl;
@property SInt32 code;
@property (strong) NSString* reason;
@property (strong) NSString* deviceToken;
@property BOOL sp;
@property BOOL detail;
@property SInt64 lastUnreadNotifTime;
@property SInt64 lastPatchTime;
@property SInt64 configBitmap;
@end

@implementation AVIMSessionCommand

- (BOOL) hasT {
  return !!hasT_;
}
- (void) setHasT:(BOOL) _value_ {
  hasT_ = !!_value_;
}
@synthesize t;
- (BOOL) hasN {
  return !!hasN_;
}
- (void) setHasN:(BOOL) _value_ {
  hasN_ = !!_value_;
}
@synthesize n;
- (BOOL) hasS {
  return !!hasS_;
}
- (void) setHasS:(BOOL) _value_ {
  hasS_ = !!_value_;
}
@synthesize s;
- (BOOL) hasUa {
  return !!hasUa_;
}
- (void) setHasUa:(BOOL) _value_ {
  hasUa_ = !!_value_;
}
@synthesize ua;
- (BOOL) hasR {
  return !!hasR_;
}
- (void) setHasR:(BOOL) _value_ {
  hasR_ = !!_value_;
}
- (BOOL) r {
  return !!r_;
}
- (void) setR:(BOOL) _value_ {
  r_ = !!_value_;
}
- (BOOL) hasTag {
  return !!hasTag_;
}
- (void) setHasTag:(BOOL) _value_ {
  hasTag_ = !!_value_;
}
@synthesize tag;
- (BOOL) hasDeviceId {
  return !!hasDeviceId_;
}
- (void) setHasDeviceId:(BOOL) _value_ {
  hasDeviceId_ = !!_value_;
}
@synthesize deviceId;
@synthesize sessionPeerIdsArray;
@dynamic sessionPeerIds;
@synthesize onlineSessionPeerIdsArray;
@dynamic onlineSessionPeerIds;
- (BOOL) hasSt {
  return !!hasSt_;
}
- (void) setHasSt:(BOOL) _value_ {
  hasSt_ = !!_value_;
}
@synthesize st;
- (BOOL) hasStTtl {
  return !!hasStTtl_;
}
- (void) setHasStTtl:(BOOL) _value_ {
  hasStTtl_ = !!_value_;
}
@synthesize stTtl;
- (BOOL) hasCode {
  return !!hasCode_;
}
- (void) setHasCode:(BOOL) _value_ {
  hasCode_ = !!_value_;
}
@synthesize code;
- (BOOL) hasReason {
  return !!hasReason_;
}
- (void) setHasReason:(BOOL) _value_ {
  hasReason_ = !!_value_;
}
@synthesize reason;
- (BOOL) hasDeviceToken {
  return !!hasDeviceToken_;
}
- (void) setHasDeviceToken:(BOOL) _value_ {
  hasDeviceToken_ = !!_value_;
}
@synthesize deviceToken;
- (BOOL) hasSp {
  return !!hasSp_;
}
- (void) setHasSp:(BOOL) _value_ {
  hasSp_ = !!_value_;
}
- (BOOL) sp {
  return !!sp_;
}
- (void) setSp:(BOOL) _value_ {
  sp_ = !!_value_;
}
- (BOOL) hasDetail {
  return !!hasDetail_;
}
- (void) setHasDetail:(BOOL) _value_ {
  hasDetail_ = !!_value_;
}
- (BOOL) detail {
  return !!detail_;
}
- (void) setDetail:(BOOL) _value_ {
  detail_ = !!_value_;
}
- (BOOL) hasLastUnreadNotifTime {
  return !!hasLastUnreadNotifTime_;
}
- (void) setHasLastUnreadNotifTime:(BOOL) _value_ {
  hasLastUnreadNotifTime_ = !!_value_;
}
@synthesize lastUnreadNotifTime;
- (BOOL) hasLastPatchTime {
  return !!hasLastPatchTime_;
}
- (void) setHasLastPatchTime:(BOOL) _value_ {
  hasLastPatchTime_ = !!_value_;
}
@synthesize lastPatchTime;
- (BOOL) hasConfigBitmap {
  return !!hasConfigBitmap_;
}
- (void) setHasConfigBitmap:(BOOL) _value_ {
  hasConfigBitmap_ = !!_value_;
}
@synthesize configBitmap;
- (instancetype) init {
  if ((self = [super init])) {
    self.t = 0L;
    self.n = @"";
    self.s = @"";
    self.ua = @"";
    self.r = NO;
    self.tag = @"";
    self.deviceId = @"";
    self.st = @"";
    self.stTtl = 0;
    self.code = 0;
    self.reason = @"";
    self.deviceToken = @"";
    self.sp = NO;
    self.detail = NO;
    self.lastUnreadNotifTime = 0L;
    self.lastPatchTime = 0L;
    self.configBitmap = 0L;
  }
  return self;
}
static AVIMSessionCommand* defaultAVIMSessionCommandInstance = nil;
+ (void) initialize {
  if (self == [AVIMSessionCommand class]) {
    defaultAVIMSessionCommandInstance = [[AVIMSessionCommand alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultAVIMSessionCommandInstance;
}
- (instancetype) defaultInstance {
  return defaultAVIMSessionCommandInstance;
}
- (NSArray *)sessionPeerIds {
  return sessionPeerIdsArray;
}
- (NSString*)sessionPeerIdsAtIndex:(NSUInteger)index {
  return [sessionPeerIdsArray objectAtIndex:index];
}
- (NSArray *)onlineSessionPeerIds {
  return onlineSessionPeerIdsArray;
}
- (NSString*)onlineSessionPeerIdsAtIndex:(NSUInteger)index {
  return [onlineSessionPeerIdsArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasT) {
    [output writeInt64:1 value:self.t];
  }
  if (self.hasN) {
    [output writeString:2 value:self.n];
  }
  if (self.hasS) {
    [output writeString:3 value:self.s];
  }
  if (self.hasUa) {
    [output writeString:4 value:self.ua];
  }
  if (self.hasR) {
    [output writeBool:5 value:self.r];
  }
  if (self.hasTag) {
    [output writeString:6 value:self.tag];
  }
  if (self.hasDeviceId) {
    [output writeString:7 value:self.deviceId];
  }
  [self.sessionPeerIdsArray enumerateObjectsUsingBlock:^(NSString *element, NSUInteger idx, BOOL *stop) {
    [output writeString:8 value:element];
  }];
  [self.onlineSessionPeerIdsArray enumerateObjectsUsingBlock:^(NSString *element, NSUInteger idx, BOOL *stop) {
    [output writeString:9 value:element];
  }];
  if (self.hasSt) {
    [output writeString:10 value:self.st];
  }
  if (self.hasStTtl) {
    [output writeInt32:11 value:self.stTtl];
  }
  if (self.hasCode) {
    [output writeInt32:12 value:self.code];
  }
  if (self.hasReason) {
    [output writeString:13 value:self.reason];
  }
  if (self.hasDeviceToken) {
    [output writeString:14 value:self.deviceToken];
  }
  if (self.hasSp) {
    [output writeBool:15 value:self.sp];
  }
  if (self.hasDetail) {
    [output writeBool:16 value:self.detail];
  }
  if (self.hasLastUnreadNotifTime) {
    [output writeInt64:17 value:self.lastUnreadNotifTime];
  }
  if (self.hasLastPatchTime) {
    [output writeInt64:18 value:self.lastPatchTime];
  }
  if (self.hasConfigBitmap) {
    [output writeInt64:19 value:self.configBitmap];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasT) {
    size_ += computeInt64Size(1, self.t);
  }
  if (self.hasN) {
    size_ += computeStringSize(2, self.n);
  }
  if (self.hasS) {
    size_ += computeStringSize(3, self.s);
  }
  if (self.hasUa) {
    size_ += computeStringSize(4, self.ua);
  }
  if (self.hasR) {
    size_ += computeBoolSize(5, self.r);
  }
  if (self.hasTag) {
    size_ += computeStringSize(6, self.tag);
  }
  if (self.hasDeviceId) {
    size_ += computeStringSize(7, self.deviceId);
  }
  {
    __block SInt32 dataSize = 0;
    const NSUInteger count = self.sessionPeerIdsArray.count;
    [self.sessionPeerIdsArray enumerateObjectsUsingBlock:^(NSString *element, NSUInteger idx, BOOL *stop) {
      dataSize += computeStringSizeNoTag(element);
    }];
    size_ += dataSize;
    size_ += (SInt32)(1 * count);
  }
  {
    __block SInt32 dataSize = 0;
    const NSUInteger count = self.onlineSessionPeerIdsArray.count;
    [self.onlineSessionPeerIdsArray enumerateObjectsUsingBlock:^(NSString *element, NSUInteger idx, BOOL *stop) {
      dataSize += computeStringSizeNoTag(element);
    }];
    size_ += dataSize;
    size_ += (SInt32)(1 * count);
  }
  if (self.hasSt) {
    size_ += computeStringSize(10, self.st);
  }
  if (self.hasStTtl) {
    size_ += computeInt32Size(11, self.stTtl);
  }
  if (self.hasCode) {
    size_ += computeInt32Size(12, self.code);
  }
  if (self.hasReason) {
    size_ += computeStringSize(13, self.reason);
  }
  if (self.hasDeviceToken) {
    size_ += computeStringSize(14, self.deviceToken);
  }
  if (self.hasSp) {
    size_ += computeBoolSize(15, self.sp);
  }
  if (self.hasDetail) {
    size_ += computeBoolSize(16, self.detail);
  }
  if (self.hasLastUnreadNotifTime) {
    size_ += computeInt64Size(17, self.lastUnreadNotifTime);
  }
  if (self.hasLastPatchTime) {
    size_ += computeInt64Size(18, self.lastPatchTime);
  }
  if (self.hasConfigBitmap) {
    size_ += computeInt64Size(19, self.configBitmap);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (AVIMSessionCommand*) parseFromData:(NSData*) data {
  return (AVIMSessionCommand*)[[[AVIMSessionCommand builder] mergeFromData:data] build];
}
+ (AVIMSessionCommand*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (AVIMSessionCommand*)[[[AVIMSessionCommand builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (AVIMSessionCommand*) parseFromInputStream:(NSInputStream*) input {
  return (AVIMSessionCommand*)[[[AVIMSessionCommand builder] mergeFromInputStream:input] build];
}
+ (AVIMSessionCommand*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (AVIMSessionCommand*)[[[AVIMSessionCommand builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (AVIMSessionCommand*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (AVIMSessionCommand*)[[[AVIMSessionCommand builder] mergeFromCodedInputStream:input] build];
}
+ (AVIMSessionCommand*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (AVIMSessionCommand*)[[[AVIMSessionCommand builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (AVIMSessionCommandBuilder*) builder {
  return [[AVIMSessionCommandBuilder alloc] init];
}
+ (AVIMSessionCommandBuilder*) builderWithPrototype:(AVIMSessionCommand*) prototype {
  return [[AVIMSessionCommand builder] mergeFrom:prototype];
}
- (AVIMSessionCommandBuilder*) builder {
  return [AVIMSessionCommand builder];
}
- (AVIMSessionCommandBuilder*) toBuilder {
  return [AVIMSessionCommand builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasT) {
    [output appendFormat:@"%@%@: %@\n", indent, @"t", [NSNumber numberWithLongLong:self.t]];
  }
  if (self.hasN) {
    [output appendFormat:@"%@%@: %@\n", indent, @"n", self.n];
  }
  if (self.hasS) {
    [output appendFormat:@"%@%@: %@\n", indent, @"s", self.s];
  }
  if (self.hasUa) {
    [output appendFormat:@"%@%@: %@\n", indent, @"ua", self.ua];
  }
  if (self.hasR) {
    [output appendFormat:@"%@%@: %@\n", indent, @"r", [NSNumber numberWithBool:self.r]];
  }
  if (self.hasTag) {
    [output appendFormat:@"%@%@: %@\n", indent, @"tag", self.tag];
  }
  if (self.hasDeviceId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"deviceId", self.deviceId];
  }
  [self.sessionPeerIdsArray enumerateObjectsUsingBlock:^(id obj, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@: %@\n", indent, @"sessionPeerIds", obj];
  }];
  [self.onlineSessionPeerIdsArray enumerateObjectsUsingBlock:^(id obj, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@: %@\n", indent, @"onlineSessionPeerIds", obj];
  }];
  if (self.hasSt) {
    [output appendFormat:@"%@%@: %@\n", indent, @"st", self.st];
  }
  if (self.hasStTtl) {
    [output appendFormat:@"%@%@: %@\n", indent, @"stTtl", [NSNumber numberWithInteger:self.stTtl]];
  }
  if (self.hasCode) {
    [output appendFormat:@"%@%@: %@\n", indent, @"code", [NSNumber numberWithInteger:self.code]];
  }
  if (self.hasReason) {
    [output appendFormat:@"%@%@: %@\n", indent, @"reason", self.reason];
  }
  if (self.hasDeviceToken) {
    [output appendFormat:@"%@%@: %@\n", indent, @"deviceToken", self.deviceToken];
  }
  if (self.hasSp) {
    [output appendFormat:@"%@%@: %@\n", indent, @"sp", [NSNumber numberWithBool:self.sp]];
  }
  if (self.hasDetail) {
    [output appendFormat:@"%@%@: %@\n", indent, @"detail", [NSNumber numberWithBool:self.detail]];
  }
  if (self.hasLastUnreadNotifTime) {
    [output appendFormat:@"%@%@: %@\n", indent, @"lastUnreadNotifTime", [NSNumber numberWithLongLong:self.lastUnreadNotifTime]];
  }
  if (self.hasLastPatchTime) {
    [output appendFormat:@"%@%@: %@\n", indent, @"lastPatchTime", [NSNumber numberWithLongLong:self.lastPatchTime]];
  }
  if (self.hasConfigBitmap) {
    [output appendFormat:@"%@%@: %@\n", indent, @"configBitmap", [NSNumber numberWithLongLong:self.configBitmap]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasT) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.t] forKey: @"t"];
  }
  if (self.hasN) {
    [dictionary setObject: self.n forKey: @"n"];
  }
  if (self.hasS) {
    [dictionary setObject: self.s forKey: @"s"];
  }
  if (self.hasUa) {
    [dictionary setObject: self.ua forKey: @"ua"];
  }
  if (self.hasR) {
    [dictionary setObject: [NSNumber numberWithBool:self.r] forKey: @"r"];
  }
  if (self.hasTag) {
    [dictionary setObject: self.tag forKey: @"tag"];
  }
  if (self.hasDeviceId) {
    [dictionary setObject: self.deviceId forKey: @"deviceId"];
  }
  [dictionary setObject:self.sessionPeerIds forKey: @"sessionPeerIds"];
  [dictionary setObject:self.onlineSessionPeerIds forKey: @"onlineSessionPeerIds"];
  if (self.hasSt) {
    [dictionary setObject: self.st forKey: @"st"];
  }
  if (self.hasStTtl) {
    [dictionary setObject: [NSNumber numberWithInteger:self.stTtl] forKey: @"stTtl"];
  }
  if (self.hasCode) {
    [dictionary setObject: [NSNumber numberWithInteger:self.code] forKey: @"code"];
  }
  if (self.hasReason) {
    [dictionary setObject: self.reason forKey: @"reason"];
  }
  if (self.hasDeviceToken) {
    [dictionary setObject: self.deviceToken forKey: @"deviceToken"];
  }
  if (self.hasSp) {
    [dictionary setObject: [NSNumber numberWithBool:self.sp] forKey: @"sp"];
  }
  if (self.hasDetail) {
    [dictionary setObject: [NSNumber numberWithBool:self.detail] forKey: @"detail"];
  }
  if (self.hasLastUnreadNotifTime) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.lastUnreadNotifTime] forKey: @"lastUnreadNotifTime"];
  }
  if (self.hasLastPatchTime) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.lastPatchTime] forKey: @"lastPatchTime"];
  }
  if (self.hasConfigBitmap) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.configBitmap] forKey: @"configBitmap"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[AVIMSessionCommand class]]) {
    return NO;
  }
  AVIMSessionCommand *otherMessage = other;
  return
      self.hasT == otherMessage.hasT &&
      (!self.hasT || self.t == otherMessage.t) &&
      self.hasN == otherMessage.hasN &&
      (!self.hasN || [self.n isEqual:otherMessage.n]) &&
      self.hasS == otherMessage.hasS &&
      (!self.hasS || [self.s isEqual:otherMessage.s]) &&
      self.hasUa == otherMessage.hasUa &&
      (!self.hasUa || [self.ua isEqual:otherMessage.ua]) &&
      self.hasR == otherMessage.hasR &&
      (!self.hasR || self.r == otherMessage.r) &&
      self.hasTag == otherMessage.hasTag &&
      (!self.hasTag || [self.tag isEqual:otherMessage.tag]) &&
      self.hasDeviceId == otherMessage.hasDeviceId &&
      (!self.hasDeviceId || [self.deviceId isEqual:otherMessage.deviceId]) &&
      [self.sessionPeerIdsArray isEqualToArray:otherMessage.sessionPeerIdsArray] &&
      [self.onlineSessionPeerIdsArray isEqualToArray:otherMessage.onlineSessionPeerIdsArray] &&
      self.hasSt == otherMessage.hasSt &&
      (!self.hasSt || [self.st isEqual:otherMessage.st]) &&
      self.hasStTtl == otherMessage.hasStTtl &&
      (!self.hasStTtl || self.stTtl == otherMessage.stTtl) &&
      self.hasCode == otherMessage.hasCode &&
      (!self.hasCode || self.code == otherMessage.code) &&
      self.hasReason == otherMessage.hasReason &&
      (!self.hasReason || [self.reason isEqual:otherMessage.reason]) &&
      self.hasDeviceToken == otherMessage.hasDeviceToken &&
      (!self.hasDeviceToken || [self.deviceToken isEqual:otherMessage.deviceToken]) &&
      self.hasSp == otherMessage.hasSp &&
      (!self.hasSp || self.sp == otherMessage.sp) &&
      self.hasDetail == otherMessage.hasDetail &&
      (!self.hasDetail || self.detail == otherMessage.detail) &&
      self.hasLastUnreadNotifTime == otherMessage.hasLastUnreadNotifTime &&
      (!self.hasLastUnreadNotifTime || self.lastUnreadNotifTime == otherMessage.lastUnreadNotifTime) &&
      self.hasLastPatchTime == otherMessage.hasLastPatchTime &&
      (!self.hasLastPatchTime || self.lastPatchTime == otherMessage.lastPatchTime) &&
      self.hasConfigBitmap == otherMessage.hasConfigBitmap &&
      (!self.hasConfigBitmap || self.configBitmap == otherMessage.configBitmap) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasT) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.t] hash];
  }
  if (self.hasN) {
    hashCode = hashCode * 31 + [self.n hash];
  }
  if (self.hasS) {
    hashCode = hashCode * 31 + [self.s hash];
  }
  if (self.hasUa) {
    hashCode = hashCode * 31 + [self.ua hash];
  }
  if (self.hasR) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.r] hash];
  }
  if (self.hasTag) {
    hashCode = hashCode * 31 + [self.tag hash];
  }
  if (self.hasDeviceId) {
    hashCode = hashCode * 31 + [self.deviceId hash];
  }
  [self.sessionPeerIdsArray enumerateObjectsUsingBlock:^(NSString *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  [self.onlineSessionPeerIdsArray enumerateObjectsUsingBlock:^(NSString *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  if (self.hasSt) {
    hashCode = hashCode * 31 + [self.st hash];
  }
  if (self.hasStTtl) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.stTtl] hash];
  }
  if (self.hasCode) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.code] hash];
  }
  if (self.hasReason) {
    hashCode = hashCode * 31 + [self.reason hash];
  }
  if (self.hasDeviceToken) {
    hashCode = hashCode * 31 + [self.deviceToken hash];
  }
  if (self.hasSp) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.sp] hash];
  }
  if (self.hasDetail) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.detail] hash];
  }
  if (self.hasLastUnreadNotifTime) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.lastUnreadNotifTime] hash];
  }
  if (self.hasLastPatchTime) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.lastPatchTime] hash];
  }
  if (self.hasConfigBitmap) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.configBitmap] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface AVIMSessionCommandBuilder()
@property (strong) AVIMSessionCommand* resultSessionCommand;
@end

@implementation AVIMSessionCommandBuilder
@synthesize resultSessionCommand;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultSessionCommand = [[AVIMSessionCommand alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultSessionCommand;
}
- (AVIMSessionCommandBuilder*) clear {
  self.resultSessionCommand = [[AVIMSessionCommand alloc] init];
  return self;
}
- (AVIMSessionCommandBuilder*) clone {
  return [AVIMSessionCommand builderWithPrototype:resultSessionCommand];
}
- (AVIMSessionCommand*) defaultInstance {
  return [AVIMSessionCommand defaultInstance];
}
- (AVIMSessionCommand*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (AVIMSessionCommand*) buildPartial {
  AVIMSessionCommand* returnMe = resultSessionCommand;
  self.resultSessionCommand = nil;
  return returnMe;
}
- (AVIMSessionCommandBuilder*) mergeFrom:(AVIMSessionCommand*) other {
  if (other == [AVIMSessionCommand defaultInstance]) {
    return self;
  }
  if (other.hasT) {
    [self setT:other.t];
  }
  if (other.hasN) {
    [self setN:other.n];
  }
  if (other.hasS) {
    [self setS:other.s];
  }
  if (other.hasUa) {
    [self setUa:other.ua];
  }
  if (other.hasR) {
    [self setR:other.r];
  }
  if (other.hasTag) {
    [self setTag:other.tag];
  }
  if (other.hasDeviceId) {
    [self setDeviceId:other.deviceId];
  }
  if (other.sessionPeerIdsArray.count > 0) {
    if (resultSessionCommand.sessionPeerIdsArray == nil) {
      resultSessionCommand.sessionPeerIdsArray = [[NSMutableArray alloc] initWithArray:other.sessionPeerIdsArray];
    } else {
      [resultSessionCommand.sessionPeerIdsArray addObjectsFromArray:other.sessionPeerIdsArray];
    }
  }
  if (other.onlineSessionPeerIdsArray.count > 0) {
    if (resultSessionCommand.onlineSessionPeerIdsArray == nil) {
      resultSessionCommand.onlineSessionPeerIdsArray = [[NSMutableArray alloc] initWithArray:other.onlineSessionPeerIdsArray];
    } else {
      [resultSessionCommand.onlineSessionPeerIdsArray addObjectsFromArray:other.onlineSessionPeerIdsArray];
    }
  }
  if (other.hasSt) {
    [self setSt:other.st];
  }
  if (other.hasStTtl) {
    [self setStTtl:other.stTtl];
  }
  if (other.hasCode) {
    [self setCode:other.code];
  }
  if (other.hasReason) {
    [self setReason:other.reason];
  }
  if (other.hasDeviceToken) {
    [self setDeviceToken:other.deviceToken];
  }
  if (other.hasSp) {
    [self setSp:other.sp];
  }
  if (other.hasDetail) {
    [self setDetail:other.detail];
  }
  if (other.hasLastUnreadNotifTime) {
    [self setLastUnreadNotifTime:other.lastUnreadNotifTime];
  }
  if (other.hasLastPatchTime) {
    [self setLastPatchTime:other.lastPatchTime];
  }
  if (other.hasConfigBitmap) {
    [self setConfigBitmap:other.configBitmap];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (AVIMSessionCommandBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (AVIMSessionCommandBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setT:[input readInt64]];
        break;
      }
      case 18: {
        [self setN:[input readString]];
        break;
      }
      case 26: {
        [self setS:[input readString]];
        break;
      }
      case 34: {
        [self setUa:[input readString]];
        break;
      }
      case 40: {
        [self setR:[input readBool]];
        break;
      }
      case 50: {
        [self setTag:[input readString]];
        break;
      }
      case 58: {
        [self setDeviceId:[input readString]];
        break;
      }
      case 66: {
        [self addSessionPeerIds:[input readString]];
        break;
      }
      case 74: {
        [self addOnlineSessionPeerIds:[input readString]];
        break;
      }
      case 82: {
        [self setSt:[input readString]];
        break;
      }
      case 88: {
        [self setStTtl:[input readInt32]];
        break;
      }
      case 96: {
        [self setCode:[input readInt32]];
        break;
      }
      case 106: {
        [self setReason:[input readString]];
        break;
      }
      case 114: {
        [self setDeviceToken:[input readString]];
        break;
      }
      case 120: {
        [self setSp:[input readBool]];
        break;
      }
      case 128: {
        [self setDetail:[input readBool]];
        break;
      }
      case 136: {
        [self setLastUnreadNotifTime:[input readInt64]];
        break;
      }
      case 144: {
        [self setLastPatchTime:[input readInt64]];
        break;
      }
      case 152: {
        [self setConfigBitmap:[input readInt64]];
        break;
      }
    }
  }
}
- (BOOL) hasT {
  return resultSessionCommand.hasT;
}
- (SInt64) t {
  return resultSessionCommand.t;
}
- (AVIMSessionCommandBuilder*) setT:(SInt64) value {
  resultSessionCommand.hasT = YES;
  resultSessionCommand.t = value;
  return self;
}
- (AVIMSessionCommandBuilder*) clearT {
  resultSessionCommand.hasT = NO;
  resultSessionCommand.t = 0L;
  return self;
}
- (BOOL) hasN {
  return resultSessionCommand.hasN;
}
- (NSString*) n {
  return resultSessionCommand.n;
}
- (AVIMSessionCommandBuilder*) setN:(NSString*) value {
  resultSessionCommand.hasN = YES;
  resultSessionCommand.n = value;
  return self;
}
- (AVIMSessionCommandBuilder*) clearN {
  resultSessionCommand.hasN = NO;
  resultSessionCommand.n = @"";
  return self;
}
- (BOOL) hasS {
  return resultSessionCommand.hasS;
}
- (NSString*) s {
  return resultSessionCommand.s;
}
- (AVIMSessionCommandBuilder*) setS:(NSString*) value {
  resultSessionCommand.hasS = YES;
  resultSessionCommand.s = value;
  return self;
}
- (AVIMSessionCommandBuilder*) clearS {
  resultSessionCommand.hasS = NO;
  resultSessionCommand.s = @"";
  return self;
}
- (BOOL) hasUa {
  return resultSessionCommand.hasUa;
}
- (NSString*) ua {
  return resultSessionCommand.ua;
}
- (AVIMSessionCommandBuilder*) setUa:(NSString*) value {
  resultSessionCommand.hasUa = YES;
  resultSessionCommand.ua = value;
  return self;
}
- (AVIMSessionCommandBuilder*) clearUa {
  resultSessionCommand.hasUa = NO;
  resultSessionCommand.ua = @"";
  return self;
}
- (BOOL) hasR {
  return resultSessionCommand.hasR;
}
- (BOOL) r {
  return resultSessionCommand.r;
}
- (AVIMSessionCommandBuilder*) setR:(BOOL) value {
  resultSessionCommand.hasR = YES;
  resultSessionCommand.r = value;
  return self;
}
- (AVIMSessionCommandBuilder*) clearR {
  resultSessionCommand.hasR = NO;
  resultSessionCommand.r = NO;
  return self;
}
- (BOOL) hasTag {
  return resultSessionCommand.hasTag;
}
- (NSString*) tag {
  return resultSessionCommand.tag;
}
- (AVIMSessionCommandBuilder*) setTag:(NSString*) value {
  resultSessionCommand.hasTag = YES;
  resultSessionCommand.tag = value;
  return self;
}
- (AVIMSessionCommandBuilder*) clearTag {
  resultSessionCommand.hasTag = NO;
  resultSessionCommand.tag = @"";
  return self;
}
- (BOOL) hasDeviceId {
  return resultSessionCommand.hasDeviceId;
}
- (NSString*) deviceId {
  return resultSessionCommand.deviceId;
}
- (AVIMSessionCommandBuilder*) setDeviceId:(NSString*) value {
  resultSessionCommand.hasDeviceId = YES;
  resultSessionCommand.deviceId = value;
  return self;
}
- (AVIMSessionCommandBuilder*) clearDeviceId {
  resultSessionCommand.hasDeviceId = NO;
  resultSessionCommand.deviceId = @"";
  return self;
}
- (NSMutableArray *)sessionPeerIds {
  return resultSessionCommand.sessionPeerIdsArray;
}
- (NSString*)sessionPeerIdsAtIndex:(NSUInteger)index {
  return [resultSessionCommand sessionPeerIdsAtIndex:index];
}
- (AVIMSessionCommandBuilder *)addSessionPeerIds:(NSString*)value {
  if (resultSessionCommand.sessionPeerIdsArray == nil) {
    resultSessionCommand.sessionPeerIdsArray = [[NSMutableArray alloc]init];
  }
  [resultSessionCommand.sessionPeerIdsArray addObject:value];
  return self;
}
- (AVIMSessionCommandBuilder *)setSessionPeerIdsArray:(NSArray *)array {
  resultSessionCommand.sessionPeerIdsArray = [[NSMutableArray alloc] initWithArray:array];
  return self;
}
- (AVIMSessionCommandBuilder *)clearSessionPeerIds {
  resultSessionCommand.sessionPeerIdsArray = nil;
  return self;
}
- (NSMutableArray *)onlineSessionPeerIds {
  return resultSessionCommand.onlineSessionPeerIdsArray;
}
- (NSString*)onlineSessionPeerIdsAtIndex:(NSUInteger)index {
  return [resultSessionCommand onlineSessionPeerIdsAtIndex:index];
}
- (AVIMSessionCommandBuilder *)addOnlineSessionPeerIds:(NSString*)value {
  if (resultSessionCommand.onlineSessionPeerIdsArray == nil) {
    resultSessionCommand.onlineSessionPeerIdsArray = [[NSMutableArray alloc]init];
  }
  [resultSessionCommand.onlineSessionPeerIdsArray addObject:value];
  return self;
}
- (AVIMSessionCommandBuilder *)setOnlineSessionPeerIdsArray:(NSArray *)array {
  resultSessionCommand.onlineSessionPeerIdsArray = [[NSMutableArray alloc] initWithArray:array];
  return self;
}
- (AVIMSessionCommandBuilder *)clearOnlineSessionPeerIds {
  resultSessionCommand.onlineSessionPeerIdsArray = nil;
  return self;
}
- (BOOL) hasSt {
  return resultSessionCommand.hasSt;
}
- (NSString*) st {
  return resultSessionCommand.st;
}
- (AVIMSessionCommandBuilder*) setSt:(NSString*) value {
  resultSessionCommand.hasSt = YES;
  resultSessionCommand.st = value;
  return self;
}
- (AVIMSessionCommandBuilder*) clearSt {
  resultSessionCommand.hasSt = NO;
  resultSessionCommand.st = @"";
  return self;
}
- (BOOL) hasStTtl {
  return resultSessionCommand.hasStTtl;
}
- (SInt32) stTtl {
  return resultSessionCommand.stTtl;
}
- (AVIMSessionCommandBuilder*) setStTtl:(SInt32) value {
  resultSessionCommand.hasStTtl = YES;
  resultSessionCommand.stTtl = value;
  return self;
}
- (AVIMSessionCommandBuilder*) clearStTtl {
  resultSessionCommand.hasStTtl = NO;
  resultSessionCommand.stTtl = 0;
  return self;
}
- (BOOL) hasCode {
  return resultSessionCommand.hasCode;
}
- (SInt32) code {
  return resultSessionCommand.code;
}
- (AVIMSessionCommandBuilder*) setCode:(SInt32) value {
  resultSessionCommand.hasCode = YES;
  resultSessionCommand.code = value;
  return self;
}
- (AVIMSessionCommandBuilder*) clearCode {
  resultSessionCommand.hasCode = NO;
  resultSessionCommand.code = 0;
  return self;
}
- (BOOL) hasReason {
  return resultSessionCommand.hasReason;
}
- (NSString*) reason {
  return resultSessionCommand.reason;
}
- (AVIMSessionCommandBuilder*) setReason:(NSString*) value {
  resultSessionCommand.hasReason = YES;
  resultSessionCommand.reason = value;
  return self;
}
- (AVIMSessionCommandBuilder*) clearReason {
  resultSessionCommand.hasReason = NO;
  resultSessionCommand.reason = @"";
  return self;
}
- (BOOL) hasDeviceToken {
  return resultSessionCommand.hasDeviceToken;
}
- (NSString*) deviceToken {
  return resultSessionCommand.deviceToken;
}
- (AVIMSessionCommandBuilder*) setDeviceToken:(NSString*) value {
  resultSessionCommand.hasDeviceToken = YES;
  resultSessionCommand.deviceToken = value;
  return self;
}
- (AVIMSessionCommandBuilder*) clearDeviceToken {
  resultSessionCommand.hasDeviceToken = NO;
  resultSessionCommand.deviceToken = @"";
  return self;
}
- (BOOL) hasSp {
  return resultSessionCommand.hasSp;
}
- (BOOL) sp {
  return resultSessionCommand.sp;
}
- (AVIMSessionCommandBuilder*) setSp:(BOOL) value {
  resultSessionCommand.hasSp = YES;
  resultSessionCommand.sp = value;
  return self;
}
- (AVIMSessionCommandBuilder*) clearSp {
  resultSessionCommand.hasSp = NO;
  resultSessionCommand.sp = NO;
  return self;
}
- (BOOL) hasDetail {
  return resultSessionCommand.hasDetail;
}
- (BOOL) detail {
  return resultSessionCommand.detail;
}
- (AVIMSessionCommandBuilder*) setDetail:(BOOL) value {
  resultSessionCommand.hasDetail = YES;
  resultSessionCommand.detail = value;
  return self;
}
- (AVIMSessionCommandBuilder*) clearDetail {
  resultSessionCommand.hasDetail = NO;
  resultSessionCommand.detail = NO;
  return self;
}
- (BOOL) hasLastUnreadNotifTime {
  return resultSessionCommand.hasLastUnreadNotifTime;
}
- (SInt64) lastUnreadNotifTime {
  return resultSessionCommand.lastUnreadNotifTime;
}
- (AVIMSessionCommandBuilder*) setLastUnreadNotifTime:(SInt64) value {
  resultSessionCommand.hasLastUnreadNotifTime = YES;
  resultSessionCommand.lastUnreadNotifTime = value;
  return self;
}
- (AVIMSessionCommandBuilder*) clearLastUnreadNotifTime {
  resultSessionCommand.hasLastUnreadNotifTime = NO;
  resultSessionCommand.lastUnreadNotifTime = 0L;
  return self;
}
- (BOOL) hasLastPatchTime {
  return resultSessionCommand.hasLastPatchTime;
}
- (SInt64) lastPatchTime {
  return resultSessionCommand.lastPatchTime;
}
- (AVIMSessionCommandBuilder*) setLastPatchTime:(SInt64) value {
  resultSessionCommand.hasLastPatchTime = YES;
  resultSessionCommand.lastPatchTime = value;
  return self;
}
- (AVIMSessionCommandBuilder*) clearLastPatchTime {
  resultSessionCommand.hasLastPatchTime = NO;
  resultSessionCommand.lastPatchTime = 0L;
  return self;
}
- (BOOL) hasConfigBitmap {
  return resultSessionCommand.hasConfigBitmap;
}
- (SInt64) configBitmap {
  return resultSessionCommand.configBitmap;
}
- (AVIMSessionCommandBuilder*) setConfigBitmap:(SInt64) value {
  resultSessionCommand.hasConfigBitmap = YES;
  resultSessionCommand.configBitmap = value;
  return self;
}
- (AVIMSessionCommandBuilder*) clearConfigBitmap {
  resultSessionCommand.hasConfigBitmap = NO;
  resultSessionCommand.configBitmap = 0L;
  return self;
}
@end

@interface AVIMErrorCommand ()
@property SInt32 code;
@property (strong) NSString* reason;
@property SInt32 appCode;
@property (strong) NSString* detail;
@end

@implementation AVIMErrorCommand

- (BOOL) hasCode {
  return !!hasCode_;
}
- (void) setHasCode:(BOOL) _value_ {
  hasCode_ = !!_value_;
}
@synthesize code;
- (BOOL) hasReason {
  return !!hasReason_;
}
- (void) setHasReason:(BOOL) _value_ {
  hasReason_ = !!_value_;
}
@synthesize reason;
- (BOOL) hasAppCode {
  return !!hasAppCode_;
}
- (void) setHasAppCode:(BOOL) _value_ {
  hasAppCode_ = !!_value_;
}
@synthesize appCode;
- (BOOL) hasDetail {
  return !!hasDetail_;
}
- (void) setHasDetail:(BOOL) _value_ {
  hasDetail_ = !!_value_;
}
@synthesize detail;
- (instancetype) init {
  if ((self = [super init])) {
    self.code = 0;
    self.reason = @"";
    self.appCode = 0;
    self.detail = @"";
  }
  return self;
}
static AVIMErrorCommand* defaultAVIMErrorCommandInstance = nil;
+ (void) initialize {
  if (self == [AVIMErrorCommand class]) {
    defaultAVIMErrorCommandInstance = [[AVIMErrorCommand alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultAVIMErrorCommandInstance;
}
- (instancetype) defaultInstance {
  return defaultAVIMErrorCommandInstance;
}
- (BOOL) isInitialized {
  if (!self.hasCode) {
    return NO;
  }
  if (!self.hasReason) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasCode) {
    [output writeInt32:1 value:self.code];
  }
  if (self.hasReason) {
    [output writeString:2 value:self.reason];
  }
  if (self.hasAppCode) {
    [output writeInt32:3 value:self.appCode];
  }
  if (self.hasDetail) {
    [output writeString:4 value:self.detail];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasCode) {
    size_ += computeInt32Size(1, self.code);
  }
  if (self.hasReason) {
    size_ += computeStringSize(2, self.reason);
  }
  if (self.hasAppCode) {
    size_ += computeInt32Size(3, self.appCode);
  }
  if (self.hasDetail) {
    size_ += computeStringSize(4, self.detail);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (AVIMErrorCommand*) parseFromData:(NSData*) data {
  return (AVIMErrorCommand*)[[[AVIMErrorCommand builder] mergeFromData:data] build];
}
+ (AVIMErrorCommand*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (AVIMErrorCommand*)[[[AVIMErrorCommand builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (AVIMErrorCommand*) parseFromInputStream:(NSInputStream*) input {
  return (AVIMErrorCommand*)[[[AVIMErrorCommand builder] mergeFromInputStream:input] build];
}
+ (AVIMErrorCommand*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (AVIMErrorCommand*)[[[AVIMErrorCommand builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (AVIMErrorCommand*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (AVIMErrorCommand*)[[[AVIMErrorCommand builder] mergeFromCodedInputStream:input] build];
}
+ (AVIMErrorCommand*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (AVIMErrorCommand*)[[[AVIMErrorCommand builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (AVIMErrorCommandBuilder*) builder {
  return [[AVIMErrorCommandBuilder alloc] init];
}
+ (AVIMErrorCommandBuilder*) builderWithPrototype:(AVIMErrorCommand*) prototype {
  return [[AVIMErrorCommand builder] mergeFrom:prototype];
}
- (AVIMErrorCommandBuilder*) builder {
  return [AVIMErrorCommand builder];
}
- (AVIMErrorCommandBuilder*) toBuilder {
  return [AVIMErrorCommand builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasCode) {
    [output appendFormat:@"%@%@: %@\n", indent, @"code", [NSNumber numberWithInteger:self.code]];
  }
  if (self.hasReason) {
    [output appendFormat:@"%@%@: %@\n", indent, @"reason", self.reason];
  }
  if (self.hasAppCode) {
    [output appendFormat:@"%@%@: %@\n", indent, @"appCode", [NSNumber numberWithInteger:self.appCode]];
  }
  if (self.hasDetail) {
    [output appendFormat:@"%@%@: %@\n", indent, @"detail", self.detail];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasCode) {
    [dictionary setObject: [NSNumber numberWithInteger:self.code] forKey: @"code"];
  }
  if (self.hasReason) {
    [dictionary setObject: self.reason forKey: @"reason"];
  }
  if (self.hasAppCode) {
    [dictionary setObject: [NSNumber numberWithInteger:self.appCode] forKey: @"appCode"];
  }
  if (self.hasDetail) {
    [dictionary setObject: self.detail forKey: @"detail"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[AVIMErrorCommand class]]) {
    return NO;
  }
  AVIMErrorCommand *otherMessage = other;
  return
      self.hasCode == otherMessage.hasCode &&
      (!self.hasCode || self.code == otherMessage.code) &&
      self.hasReason == otherMessage.hasReason &&
      (!self.hasReason || [self.reason isEqual:otherMessage.reason]) &&
      self.hasAppCode == otherMessage.hasAppCode &&
      (!self.hasAppCode || self.appCode == otherMessage.appCode) &&
      self.hasDetail == otherMessage.hasDetail &&
      (!self.hasDetail || [self.detail isEqual:otherMessage.detail]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasCode) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.code] hash];
  }
  if (self.hasReason) {
    hashCode = hashCode * 31 + [self.reason hash];
  }
  if (self.hasAppCode) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.appCode] hash];
  }
  if (self.hasDetail) {
    hashCode = hashCode * 31 + [self.detail hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface AVIMErrorCommandBuilder()
@property (strong) AVIMErrorCommand* resultErrorCommand;
@end

@implementation AVIMErrorCommandBuilder
@synthesize resultErrorCommand;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultErrorCommand = [[AVIMErrorCommand alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultErrorCommand;
}
- (AVIMErrorCommandBuilder*) clear {
  self.resultErrorCommand = [[AVIMErrorCommand alloc] init];
  return self;
}
- (AVIMErrorCommandBuilder*) clone {
  return [AVIMErrorCommand builderWithPrototype:resultErrorCommand];
}
- (AVIMErrorCommand*) defaultInstance {
  return [AVIMErrorCommand defaultInstance];
}
- (AVIMErrorCommand*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (AVIMErrorCommand*) buildPartial {
  AVIMErrorCommand* returnMe = resultErrorCommand;
  self.resultErrorCommand = nil;
  return returnMe;
}
- (AVIMErrorCommandBuilder*) mergeFrom:(AVIMErrorCommand*) other {
  if (other == [AVIMErrorCommand defaultInstance]) {
    return self;
  }
  if (other.hasCode) {
    [self setCode:other.code];
  }
  if (other.hasReason) {
    [self setReason:other.reason];
  }
  if (other.hasAppCode) {
    [self setAppCode:other.appCode];
  }
  if (other.hasDetail) {
    [self setDetail:other.detail];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (AVIMErrorCommandBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (AVIMErrorCommandBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setCode:[input readInt32]];
        break;
      }
      case 18: {
        [self setReason:[input readString]];
        break;
      }
      case 24: {
        [self setAppCode:[input readInt32]];
        break;
      }
      case 34: {
        [self setDetail:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasCode {
  return resultErrorCommand.hasCode;
}
- (SInt32) code {
  return resultErrorCommand.code;
}
- (AVIMErrorCommandBuilder*) setCode:(SInt32) value {
  resultErrorCommand.hasCode = YES;
  resultErrorCommand.code = value;
  return self;
}
- (AVIMErrorCommandBuilder*) clearCode {
  resultErrorCommand.hasCode = NO;
  resultErrorCommand.code = 0;
  return self;
}
- (BOOL) hasReason {
  return resultErrorCommand.hasReason;
}
- (NSString*) reason {
  return resultErrorCommand.reason;
}
- (AVIMErrorCommandBuilder*) setReason:(NSString*) value {
  resultErrorCommand.hasReason = YES;
  resultErrorCommand.reason = value;
  return self;
}
- (AVIMErrorCommandBuilder*) clearReason {
  resultErrorCommand.hasReason = NO;
  resultErrorCommand.reason = @"";
  return self;
}
- (BOOL) hasAppCode {
  return resultErrorCommand.hasAppCode;
}
- (SInt32) appCode {
  return resultErrorCommand.appCode;
}
- (AVIMErrorCommandBuilder*) setAppCode:(SInt32) value {
  resultErrorCommand.hasAppCode = YES;
  resultErrorCommand.appCode = value;
  return self;
}
- (AVIMErrorCommandBuilder*) clearAppCode {
  resultErrorCommand.hasAppCode = NO;
  resultErrorCommand.appCode = 0;
  return self;
}
- (BOOL) hasDetail {
  return resultErrorCommand.hasDetail;
}
- (NSString*) detail {
  return resultErrorCommand.detail;
}
- (AVIMErrorCommandBuilder*) setDetail:(NSString*) value {
  resultErrorCommand.hasDetail = YES;
  resultErrorCommand.detail = value;
  return self;
}
- (AVIMErrorCommandBuilder*) clearDetail {
  resultErrorCommand.hasDetail = NO;
  resultErrorCommand.detail = @"";
  return self;
}
@end

@interface AVIMDirectCommand ()
@property (strong) NSString* msg;
@property (strong) NSString* uid;
@property (strong) NSString* fromPeerId;
@property SInt64 timestamp;
@property BOOL offline;
@property BOOL hasMore;
@property (strong) NSMutableArray * toPeerIdsArray;
@property BOOL r;
@property (strong) NSString* cid;
@property (strong) NSString* id;
@property BOOL transient;
@property (strong) NSString* dt;
@property (strong) NSString* roomId;
@property (strong) NSString* pushData;
@property BOOL will;
@property SInt64 patchTimestamp;
@property (strong) NSData* binaryMsg;
@end

@implementation AVIMDirectCommand

- (BOOL) hasMsg {
  return !!hasMsg_;
}
- (void) setHasMsg:(BOOL) _value_ {
  hasMsg_ = !!_value_;
}
@synthesize msg;
- (BOOL) hasUid {
  return !!hasUid_;
}
- (void) setHasUid:(BOOL) _value_ {
  hasUid_ = !!_value_;
}
@synthesize uid;
- (BOOL) hasFromPeerId {
  return !!hasFromPeerId_;
}
- (void) setHasFromPeerId:(BOOL) _value_ {
  hasFromPeerId_ = !!_value_;
}
@synthesize fromPeerId;
- (BOOL) hasTimestamp {
  return !!hasTimestamp_;
}
- (void) setHasTimestamp:(BOOL) _value_ {
  hasTimestamp_ = !!_value_;
}
@synthesize timestamp;
- (BOOL) hasOffline {
  return !!hasOffline_;
}
- (void) setHasOffline:(BOOL) _value_ {
  hasOffline_ = !!_value_;
}
- (BOOL) offline {
  return !!offline_;
}
- (void) setOffline:(BOOL) _value_ {
  offline_ = !!_value_;
}
- (BOOL) hasHasMore {
  return !!hasHasMore_;
}
- (void) setHasHasMore:(BOOL) _value_ {
  hasHasMore_ = !!_value_;
}
- (BOOL) hasMore {
  return !!hasMore_;
}
- (void) setHasMore:(BOOL) _value_ {
  hasMore_ = !!_value_;
}
@synthesize toPeerIdsArray;
@dynamic toPeerIds;
- (BOOL) hasR {
  return !!hasR_;
}
- (void) setHasR:(BOOL) _value_ {
  hasR_ = !!_value_;
}
- (BOOL) r {
  return !!r_;
}
- (void) setR:(BOOL) _value_ {
  r_ = !!_value_;
}
- (BOOL) hasCid {
  return !!hasCid_;
}
- (void) setHasCid:(BOOL) _value_ {
  hasCid_ = !!_value_;
}
@synthesize cid;
- (BOOL) hasId {
  return !!hasId_;
}
- (void) setHasId:(BOOL) _value_ {
  hasId_ = !!_value_;
}
@synthesize id;
- (BOOL) hasTransient {
  return !!hasTransient_;
}
- (void) setHasTransient:(BOOL) _value_ {
  hasTransient_ = !!_value_;
}
- (BOOL) transient {
  return !!transient_;
}
- (void) setTransient:(BOOL) _value_ {
  transient_ = !!_value_;
}
- (BOOL) hasDt {
  return !!hasDt_;
}
- (void) setHasDt:(BOOL) _value_ {
  hasDt_ = !!_value_;
}
@synthesize dt;
- (BOOL) hasRoomId {
  return !!hasRoomId_;
}
- (void) setHasRoomId:(BOOL) _value_ {
  hasRoomId_ = !!_value_;
}
@synthesize roomId;
- (BOOL) hasPushData {
  return !!hasPushData_;
}
- (void) setHasPushData:(BOOL) _value_ {
  hasPushData_ = !!_value_;
}
@synthesize pushData;
- (BOOL) hasWill {
  return !!hasWill_;
}
- (void) setHasWill:(BOOL) _value_ {
  hasWill_ = !!_value_;
}
- (BOOL) will {
  return !!will_;
}
- (void) setWill:(BOOL) _value_ {
  will_ = !!_value_;
}
- (BOOL) hasPatchTimestamp {
  return !!hasPatchTimestamp_;
}
- (void) setHasPatchTimestamp:(BOOL) _value_ {
  hasPatchTimestamp_ = !!_value_;
}
@synthesize patchTimestamp;
- (BOOL) hasBinaryMsg {
  return !!hasBinaryMsg_;
}
- (void) setHasBinaryMsg:(BOOL) _value_ {
  hasBinaryMsg_ = !!_value_;
}
@synthesize binaryMsg;
- (instancetype) init {
  if ((self = [super init])) {
    self.msg = @"";
    self.uid = @"";
    self.fromPeerId = @"";
    self.timestamp = 0L;
    self.offline = NO;
    self.hasMore = NO;
    self.r = NO;
    self.cid = @"";
    self.id = @"";
    self.transient = NO;
    self.dt = @"";
    self.roomId = @"";
    self.pushData = @"";
    self.will = NO;
    self.patchTimestamp = 0L;
    self.binaryMsg = [NSData data];
  }
  return self;
}
static AVIMDirectCommand* defaultAVIMDirectCommandInstance = nil;
+ (void) initialize {
  if (self == [AVIMDirectCommand class]) {
    defaultAVIMDirectCommandInstance = [[AVIMDirectCommand alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultAVIMDirectCommandInstance;
}
- (instancetype) defaultInstance {
  return defaultAVIMDirectCommandInstance;
}
- (NSArray *)toPeerIds {
  return toPeerIdsArray;
}
- (NSString*)toPeerIdsAtIndex:(NSUInteger)index {
  return [toPeerIdsArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasMsg) {
    [output writeString:1 value:self.msg];
  }
  if (self.hasUid) {
    [output writeString:2 value:self.uid];
  }
  if (self.hasFromPeerId) {
    [output writeString:3 value:self.fromPeerId];
  }
  if (self.hasTimestamp) {
    [output writeInt64:4 value:self.timestamp];
  }
  if (self.hasOffline) {
    [output writeBool:5 value:self.offline];
  }
  if (self.hasHasMore) {
    [output writeBool:6 value:self.hasMore];
  }
  [self.toPeerIdsArray enumerateObjectsUsingBlock:^(NSString *element, NSUInteger idx, BOOL *stop) {
    [output writeString:7 value:element];
  }];
  if (self.hasR) {
    [output writeBool:10 value:self.r];
  }
  if (self.hasCid) {
    [output writeString:11 value:self.cid];
  }
  if (self.hasId) {
    [output writeString:12 value:self.id];
  }
  if (self.hasTransient) {
    [output writeBool:13 value:self.transient];
  }
  if (self.hasDt) {
    [output writeString:14 value:self.dt];
  }
  if (self.hasRoomId) {
    [output writeString:15 value:self.roomId];
  }
  if (self.hasPushData) {
    [output writeString:16 value:self.pushData];
  }
  if (self.hasWill) {
    [output writeBool:17 value:self.will];
  }
  if (self.hasPatchTimestamp) {
    [output writeInt64:18 value:self.patchTimestamp];
  }
  if (self.hasBinaryMsg) {
    [output writeData:19 value:self.binaryMsg];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasMsg) {
    size_ += computeStringSize(1, self.msg);
  }
  if (self.hasUid) {
    size_ += computeStringSize(2, self.uid);
  }
  if (self.hasFromPeerId) {
    size_ += computeStringSize(3, self.fromPeerId);
  }
  if (self.hasTimestamp) {
    size_ += computeInt64Size(4, self.timestamp);
  }
  if (self.hasOffline) {
    size_ += computeBoolSize(5, self.offline);
  }
  if (self.hasHasMore) {
    size_ += computeBoolSize(6, self.hasMore);
  }
  {
    __block SInt32 dataSize = 0;
    const NSUInteger count = self.toPeerIdsArray.count;
    [self.toPeerIdsArray enumerateObjectsUsingBlock:^(NSString *element, NSUInteger idx, BOOL *stop) {
      dataSize += computeStringSizeNoTag(element);
    }];
    size_ += dataSize;
    size_ += (SInt32)(1 * count);
  }
  if (self.hasR) {
    size_ += computeBoolSize(10, self.r);
  }
  if (self.hasCid) {
    size_ += computeStringSize(11, self.cid);
  }
  if (self.hasId) {
    size_ += computeStringSize(12, self.id);
  }
  if (self.hasTransient) {
    size_ += computeBoolSize(13, self.transient);
  }
  if (self.hasDt) {
    size_ += computeStringSize(14, self.dt);
  }
  if (self.hasRoomId) {
    size_ += computeStringSize(15, self.roomId);
  }
  if (self.hasPushData) {
    size_ += computeStringSize(16, self.pushData);
  }
  if (self.hasWill) {
    size_ += computeBoolSize(17, self.will);
  }
  if (self.hasPatchTimestamp) {
    size_ += computeInt64Size(18, self.patchTimestamp);
  }
  if (self.hasBinaryMsg) {
    size_ += computeDataSize(19, self.binaryMsg);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (AVIMDirectCommand*) parseFromData:(NSData*) data {
  return (AVIMDirectCommand*)[[[AVIMDirectCommand builder] mergeFromData:data] build];
}
+ (AVIMDirectCommand*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (AVIMDirectCommand*)[[[AVIMDirectCommand builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (AVIMDirectCommand*) parseFromInputStream:(NSInputStream*) input {
  return (AVIMDirectCommand*)[[[AVIMDirectCommand builder] mergeFromInputStream:input] build];
}
+ (AVIMDirectCommand*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (AVIMDirectCommand*)[[[AVIMDirectCommand builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (AVIMDirectCommand*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (AVIMDirectCommand*)[[[AVIMDirectCommand builder] mergeFromCodedInputStream:input] build];
}
+ (AVIMDirectCommand*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (AVIMDirectCommand*)[[[AVIMDirectCommand builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (AVIMDirectCommandBuilder*) builder {
  return [[AVIMDirectCommandBuilder alloc] init];
}
+ (AVIMDirectCommandBuilder*) builderWithPrototype:(AVIMDirectCommand*) prototype {
  return [[AVIMDirectCommand builder] mergeFrom:prototype];
}
- (AVIMDirectCommandBuilder*) builder {
  return [AVIMDirectCommand builder];
}
- (AVIMDirectCommandBuilder*) toBuilder {
  return [AVIMDirectCommand builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasMsg) {
    [output appendFormat:@"%@%@: %@\n", indent, @"msg", self.msg];
  }
  if (self.hasUid) {
    [output appendFormat:@"%@%@: %@\n", indent, @"uid", self.uid];
  }
  if (self.hasFromPeerId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"fromPeerId", self.fromPeerId];
  }
  if (self.hasTimestamp) {
    [output appendFormat:@"%@%@: %@\n", indent, @"timestamp", [NSNumber numberWithLongLong:self.timestamp]];
  }
  if (self.hasOffline) {
    [output appendFormat:@"%@%@: %@\n", indent, @"offline", [NSNumber numberWithBool:self.offline]];
  }
  if (self.hasHasMore) {
    [output appendFormat:@"%@%@: %@\n", indent, @"hasMore", [NSNumber numberWithBool:self.hasMore]];
  }
  [self.toPeerIdsArray enumerateObjectsUsingBlock:^(id obj, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@: %@\n", indent, @"toPeerIds", obj];
  }];
  if (self.hasR) {
    [output appendFormat:@"%@%@: %@\n", indent, @"r", [NSNumber numberWithBool:self.r]];
  }
  if (self.hasCid) {
    [output appendFormat:@"%@%@: %@\n", indent, @"cid", self.cid];
  }
  if (self.hasId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"id", self.id];
  }
  if (self.hasTransient) {
    [output appendFormat:@"%@%@: %@\n", indent, @"transient", [NSNumber numberWithBool:self.transient]];
  }
  if (self.hasDt) {
    [output appendFormat:@"%@%@: %@\n", indent, @"dt", self.dt];
  }
  if (self.hasRoomId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"roomId", self.roomId];
  }
  if (self.hasPushData) {
    [output appendFormat:@"%@%@: %@\n", indent, @"pushData", self.pushData];
  }
  if (self.hasWill) {
    [output appendFormat:@"%@%@: %@\n", indent, @"will", [NSNumber numberWithBool:self.will]];
  }
  if (self.hasPatchTimestamp) {
    [output appendFormat:@"%@%@: %@\n", indent, @"patchTimestamp", [NSNumber numberWithLongLong:self.patchTimestamp]];
  }
  if (self.hasBinaryMsg) {
    [output appendFormat:@"%@%@: %@\n", indent, @"binaryMsg", self.binaryMsg];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasMsg) {
    [dictionary setObject: self.msg forKey: @"msg"];
  }
  if (self.hasUid) {
    [dictionary setObject: self.uid forKey: @"uid"];
  }
  if (self.hasFromPeerId) {
    [dictionary setObject: self.fromPeerId forKey: @"fromPeerId"];
  }
  if (self.hasTimestamp) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.timestamp] forKey: @"timestamp"];
  }
  if (self.hasOffline) {
    [dictionary setObject: [NSNumber numberWithBool:self.offline] forKey: @"offline"];
  }
  if (self.hasHasMore) {
    [dictionary setObject: [NSNumber numberWithBool:self.hasMore] forKey: @"hasMore"];
  }
  [dictionary setObject:self.toPeerIds forKey: @"toPeerIds"];
  if (self.hasR) {
    [dictionary setObject: [NSNumber numberWithBool:self.r] forKey: @"r"];
  }
  if (self.hasCid) {
    [dictionary setObject: self.cid forKey: @"cid"];
  }
  if (self.hasId) {
    [dictionary setObject: self.id forKey: @"id"];
  }
  if (self.hasTransient) {
    [dictionary setObject: [NSNumber numberWithBool:self.transient] forKey: @"transient"];
  }
  if (self.hasDt) {
    [dictionary setObject: self.dt forKey: @"dt"];
  }
  if (self.hasRoomId) {
    [dictionary setObject: self.roomId forKey: @"roomId"];
  }
  if (self.hasPushData) {
    [dictionary setObject: self.pushData forKey: @"pushData"];
  }
  if (self.hasWill) {
    [dictionary setObject: [NSNumber numberWithBool:self.will] forKey: @"will"];
  }
  if (self.hasPatchTimestamp) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.patchTimestamp] forKey: @"patchTimestamp"];
  }
  if (self.hasBinaryMsg) {
    [dictionary setObject: self.binaryMsg forKey: @"binaryMsg"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[AVIMDirectCommand class]]) {
    return NO;
  }
  AVIMDirectCommand *otherMessage = other;
  return
      self.hasMsg == otherMessage.hasMsg &&
      (!self.hasMsg || [self.msg isEqual:otherMessage.msg]) &&
      self.hasUid == otherMessage.hasUid &&
      (!self.hasUid || [self.uid isEqual:otherMessage.uid]) &&
      self.hasFromPeerId == otherMessage.hasFromPeerId &&
      (!self.hasFromPeerId || [self.fromPeerId isEqual:otherMessage.fromPeerId]) &&
      self.hasTimestamp == otherMessage.hasTimestamp &&
      (!self.hasTimestamp || self.timestamp == otherMessage.timestamp) &&
      self.hasOffline == otherMessage.hasOffline &&
      (!self.hasOffline || self.offline == otherMessage.offline) &&
      self.hasHasMore == otherMessage.hasHasMore &&
      (!self.hasHasMore || self.hasMore == otherMessage.hasMore) &&
      [self.toPeerIdsArray isEqualToArray:otherMessage.toPeerIdsArray] &&
      self.hasR == otherMessage.hasR &&
      (!self.hasR || self.r == otherMessage.r) &&
      self.hasCid == otherMessage.hasCid &&
      (!self.hasCid || [self.cid isEqual:otherMessage.cid]) &&
      self.hasId == otherMessage.hasId &&
      (!self.hasId || [self.id isEqual:otherMessage.id]) &&
      self.hasTransient == otherMessage.hasTransient &&
      (!self.hasTransient || self.transient == otherMessage.transient) &&
      self.hasDt == otherMessage.hasDt &&
      (!self.hasDt || [self.dt isEqual:otherMessage.dt]) &&
      self.hasRoomId == otherMessage.hasRoomId &&
      (!self.hasRoomId || [self.roomId isEqual:otherMessage.roomId]) &&
      self.hasPushData == otherMessage.hasPushData &&
      (!self.hasPushData || [self.pushData isEqual:otherMessage.pushData]) &&
      self.hasWill == otherMessage.hasWill &&
      (!self.hasWill || self.will == otherMessage.will) &&
      self.hasPatchTimestamp == otherMessage.hasPatchTimestamp &&
      (!self.hasPatchTimestamp || self.patchTimestamp == otherMessage.patchTimestamp) &&
      self.hasBinaryMsg == otherMessage.hasBinaryMsg &&
      (!self.hasBinaryMsg || [self.binaryMsg isEqual:otherMessage.binaryMsg]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasMsg) {
    hashCode = hashCode * 31 + [self.msg hash];
  }
  if (self.hasUid) {
    hashCode = hashCode * 31 + [self.uid hash];
  }
  if (self.hasFromPeerId) {
    hashCode = hashCode * 31 + [self.fromPeerId hash];
  }
  if (self.hasTimestamp) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.timestamp] hash];
  }
  if (self.hasOffline) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.offline] hash];
  }
  if (self.hasHasMore) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.hasMore] hash];
  }
  [self.toPeerIdsArray enumerateObjectsUsingBlock:^(NSString *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  if (self.hasR) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.r] hash];
  }
  if (self.hasCid) {
    hashCode = hashCode * 31 + [self.cid hash];
  }
  if (self.hasId) {
    hashCode = hashCode * 31 + [self.id hash];
  }
  if (self.hasTransient) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.transient] hash];
  }
  if (self.hasDt) {
    hashCode = hashCode * 31 + [self.dt hash];
  }
  if (self.hasRoomId) {
    hashCode = hashCode * 31 + [self.roomId hash];
  }
  if (self.hasPushData) {
    hashCode = hashCode * 31 + [self.pushData hash];
  }
  if (self.hasWill) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.will] hash];
  }
  if (self.hasPatchTimestamp) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.patchTimestamp] hash];
  }
  if (self.hasBinaryMsg) {
    hashCode = hashCode * 31 + [self.binaryMsg hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface AVIMDirectCommandBuilder()
@property (strong) AVIMDirectCommand* resultDirectCommand;
@end

@implementation AVIMDirectCommandBuilder
@synthesize resultDirectCommand;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultDirectCommand = [[AVIMDirectCommand alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultDirectCommand;
}
- (AVIMDirectCommandBuilder*) clear {
  self.resultDirectCommand = [[AVIMDirectCommand alloc] init];
  return self;
}
- (AVIMDirectCommandBuilder*) clone {
  return [AVIMDirectCommand builderWithPrototype:resultDirectCommand];
}
- (AVIMDirectCommand*) defaultInstance {
  return [AVIMDirectCommand defaultInstance];
}
- (AVIMDirectCommand*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (AVIMDirectCommand*) buildPartial {
  AVIMDirectCommand* returnMe = resultDirectCommand;
  self.resultDirectCommand = nil;
  return returnMe;
}
- (AVIMDirectCommandBuilder*) mergeFrom:(AVIMDirectCommand*) other {
  if (other == [AVIMDirectCommand defaultInstance]) {
    return self;
  }
  if (other.hasMsg) {
    [self setMsg:other.msg];
  }
  if (other.hasUid) {
    [self setUid:other.uid];
  }
  if (other.hasFromPeerId) {
    [self setFromPeerId:other.fromPeerId];
  }
  if (other.hasTimestamp) {
    [self setTimestamp:other.timestamp];
  }
  if (other.hasOffline) {
    [self setOffline:other.offline];
  }
  if (other.hasHasMore) {
    [self setHasMore:other.hasMore];
  }
  if (other.toPeerIdsArray.count > 0) {
    if (resultDirectCommand.toPeerIdsArray == nil) {
      resultDirectCommand.toPeerIdsArray = [[NSMutableArray alloc] initWithArray:other.toPeerIdsArray];
    } else {
      [resultDirectCommand.toPeerIdsArray addObjectsFromArray:other.toPeerIdsArray];
    }
  }
  if (other.hasR) {
    [self setR:other.r];
  }
  if (other.hasCid) {
    [self setCid:other.cid];
  }
  if (other.hasId) {
    [self setId:other.id];
  }
  if (other.hasTransient) {
    [self setTransient:other.transient];
  }
  if (other.hasDt) {
    [self setDt:other.dt];
  }
  if (other.hasRoomId) {
    [self setRoomId:other.roomId];
  }
  if (other.hasPushData) {
    [self setPushData:other.pushData];
  }
  if (other.hasWill) {
    [self setWill:other.will];
  }
  if (other.hasPatchTimestamp) {
    [self setPatchTimestamp:other.patchTimestamp];
  }
  if (other.hasBinaryMsg) {
    [self setBinaryMsg:other.binaryMsg];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (AVIMDirectCommandBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (AVIMDirectCommandBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setMsg:[input readString]];
        break;
      }
      case 18: {
        [self setUid:[input readString]];
        break;
      }
      case 26: {
        [self setFromPeerId:[input readString]];
        break;
      }
      case 32: {
        [self setTimestamp:[input readInt64]];
        break;
      }
      case 40: {
        [self setOffline:[input readBool]];
        break;
      }
      case 48: {
        [self setHasMore:[input readBool]];
        break;
      }
      case 58: {
        [self addToPeerIds:[input readString]];
        break;
      }
      case 80: {
        [self setR:[input readBool]];
        break;
      }
      case 90: {
        [self setCid:[input readString]];
        break;
      }
      case 98: {
        [self setId:[input readString]];
        break;
      }
      case 104: {
        [self setTransient:[input readBool]];
        break;
      }
      case 114: {
        [self setDt:[input readString]];
        break;
      }
      case 122: {
        [self setRoomId:[input readString]];
        break;
      }
      case 130: {
        [self setPushData:[input readString]];
        break;
      }
      case 136: {
        [self setWill:[input readBool]];
        break;
      }
      case 144: {
        [self setPatchTimestamp:[input readInt64]];
        break;
      }
      case 154: {
        [self setBinaryMsg:[input readData]];
        break;
      }
    }
  }
}
- (BOOL) hasMsg {
  return resultDirectCommand.hasMsg;
}
- (NSString*) msg {
  return resultDirectCommand.msg;
}
- (AVIMDirectCommandBuilder*) setMsg:(NSString*) value {
  resultDirectCommand.hasMsg = YES;
  resultDirectCommand.msg = value;
  return self;
}
- (AVIMDirectCommandBuilder*) clearMsg {
  resultDirectCommand.hasMsg = NO;
  resultDirectCommand.msg = @"";
  return self;
}
- (BOOL) hasUid {
  return resultDirectCommand.hasUid;
}
- (NSString*) uid {
  return resultDirectCommand.uid;
}
- (AVIMDirectCommandBuilder*) setUid:(NSString*) value {
  resultDirectCommand.hasUid = YES;
  resultDirectCommand.uid = value;
  return self;
}
- (AVIMDirectCommandBuilder*) clearUid {
  resultDirectCommand.hasUid = NO;
  resultDirectCommand.uid = @"";
  return self;
}
- (BOOL) hasFromPeerId {
  return resultDirectCommand.hasFromPeerId;
}
- (NSString*) fromPeerId {
  return resultDirectCommand.fromPeerId;
}
- (AVIMDirectCommandBuilder*) setFromPeerId:(NSString*) value {
  resultDirectCommand.hasFromPeerId = YES;
  resultDirectCommand.fromPeerId = value;
  return self;
}
- (AVIMDirectCommandBuilder*) clearFromPeerId {
  resultDirectCommand.hasFromPeerId = NO;
  resultDirectCommand.fromPeerId = @"";
  return self;
}
- (BOOL) hasTimestamp {
  return resultDirectCommand.hasTimestamp;
}
- (SInt64) timestamp {
  return resultDirectCommand.timestamp;
}
- (AVIMDirectCommandBuilder*) setTimestamp:(SInt64) value {
  resultDirectCommand.hasTimestamp = YES;
  resultDirectCommand.timestamp = value;
  return self;
}
- (AVIMDirectCommandBuilder*) clearTimestamp {
  resultDirectCommand.hasTimestamp = NO;
  resultDirectCommand.timestamp = 0L;
  return self;
}
- (BOOL) hasOffline {
  return resultDirectCommand.hasOffline;
}
- (BOOL) offline {
  return resultDirectCommand.offline;
}
- (AVIMDirectCommandBuilder*) setOffline:(BOOL) value {
  resultDirectCommand.hasOffline = YES;
  resultDirectCommand.offline = value;
  return self;
}
- (AVIMDirectCommandBuilder*) clearOffline {
  resultDirectCommand.hasOffline = NO;
  resultDirectCommand.offline = NO;
  return self;
}
- (BOOL) hasHasMore {
  return resultDirectCommand.hasHasMore;
}
- (BOOL) hasMore {
  return resultDirectCommand.hasMore;
}
- (AVIMDirectCommandBuilder*) setHasMore:(BOOL) value {
  resultDirectCommand.hasHasMore = YES;
  resultDirectCommand.hasMore = value;
  return self;
}
- (AVIMDirectCommandBuilder*) clearHasMore {
  resultDirectCommand.hasHasMore = NO;
  resultDirectCommand.hasMore = NO;
  return self;
}
- (NSMutableArray *)toPeerIds {
  return resultDirectCommand.toPeerIdsArray;
}
- (NSString*)toPeerIdsAtIndex:(NSUInteger)index {
  return [resultDirectCommand toPeerIdsAtIndex:index];
}
- (AVIMDirectCommandBuilder *)addToPeerIds:(NSString*)value {
  if (resultDirectCommand.toPeerIdsArray == nil) {
    resultDirectCommand.toPeerIdsArray = [[NSMutableArray alloc]init];
  }
  [resultDirectCommand.toPeerIdsArray addObject:value];
  return self;
}
- (AVIMDirectCommandBuilder *)setToPeerIdsArray:(NSArray *)array {
  resultDirectCommand.toPeerIdsArray = [[NSMutableArray alloc] initWithArray:array];
  return self;
}
- (AVIMDirectCommandBuilder *)clearToPeerIds {
  resultDirectCommand.toPeerIdsArray = nil;
  return self;
}
- (BOOL) hasR {
  return resultDirectCommand.hasR;
}
- (BOOL) r {
  return resultDirectCommand.r;
}
- (AVIMDirectCommandBuilder*) setR:(BOOL) value {
  resultDirectCommand.hasR = YES;
  resultDirectCommand.r = value;
  return self;
}
- (AVIMDirectCommandBuilder*) clearR {
  resultDirectCommand.hasR = NO;
  resultDirectCommand.r = NO;
  return self;
}
- (BOOL) hasCid {
  return resultDirectCommand.hasCid;
}
- (NSString*) cid {
  return resultDirectCommand.cid;
}
- (AVIMDirectCommandBuilder*) setCid:(NSString*) value {
  resultDirectCommand.hasCid = YES;
  resultDirectCommand.cid = value;
  return self;
}
- (AVIMDirectCommandBuilder*) clearCid {
  resultDirectCommand.hasCid = NO;
  resultDirectCommand.cid = @"";
  return self;
}
- (BOOL) hasId {
  return resultDirectCommand.hasId;
}
- (NSString*) id {
  return resultDirectCommand.id;
}
- (AVIMDirectCommandBuilder*) setId:(NSString*) value {
  resultDirectCommand.hasId = YES;
  resultDirectCommand.id = value;
  return self;
}
- (AVIMDirectCommandBuilder*) clearId {
  resultDirectCommand.hasId = NO;
  resultDirectCommand.id = @"";
  return self;
}
- (BOOL) hasTransient {
  return resultDirectCommand.hasTransient;
}
- (BOOL) transient {
  return resultDirectCommand.transient;
}
- (AVIMDirectCommandBuilder*) setTransient:(BOOL) value {
  resultDirectCommand.hasTransient = YES;
  resultDirectCommand.transient = value;
  return self;
}
- (AVIMDirectCommandBuilder*) clearTransient {
  resultDirectCommand.hasTransient = NO;
  resultDirectCommand.transient = NO;
  return self;
}
- (BOOL) hasDt {
  return resultDirectCommand.hasDt;
}
- (NSString*) dt {
  return resultDirectCommand.dt;
}
- (AVIMDirectCommandBuilder*) setDt:(NSString*) value {
  resultDirectCommand.hasDt = YES;
  resultDirectCommand.dt = value;
  return self;
}
- (AVIMDirectCommandBuilder*) clearDt {
  resultDirectCommand.hasDt = NO;
  resultDirectCommand.dt = @"";
  return self;
}
- (BOOL) hasRoomId {
  return resultDirectCommand.hasRoomId;
}
- (NSString*) roomId {
  return resultDirectCommand.roomId;
}
- (AVIMDirectCommandBuilder*) setRoomId:(NSString*) value {
  resultDirectCommand.hasRoomId = YES;
  resultDirectCommand.roomId = value;
  return self;
}
- (AVIMDirectCommandBuilder*) clearRoomId {
  resultDirectCommand.hasRoomId = NO;
  resultDirectCommand.roomId = @"";
  return self;
}
- (BOOL) hasPushData {
  return resultDirectCommand.hasPushData;
}
- (NSString*) pushData {
  return resultDirectCommand.pushData;
}
- (AVIMDirectCommandBuilder*) setPushData:(NSString*) value {
  resultDirectCommand.hasPushData = YES;
  resultDirectCommand.pushData = value;
  return self;
}
- (AVIMDirectCommandBuilder*) clearPushData {
  resultDirectCommand.hasPushData = NO;
  resultDirectCommand.pushData = @"";
  return self;
}
- (BOOL) hasWill {
  return resultDirectCommand.hasWill;
}
- (BOOL) will {
  return resultDirectCommand.will;
}
- (AVIMDirectCommandBuilder*) setWill:(BOOL) value {
  resultDirectCommand.hasWill = YES;
  resultDirectCommand.will = value;
  return self;
}
- (AVIMDirectCommandBuilder*) clearWill {
  resultDirectCommand.hasWill = NO;
  resultDirectCommand.will = NO;
  return self;
}
- (BOOL) hasPatchTimestamp {
  return resultDirectCommand.hasPatchTimestamp;
}
- (SInt64) patchTimestamp {
  return resultDirectCommand.patchTimestamp;
}
- (AVIMDirectCommandBuilder*) setPatchTimestamp:(SInt64) value {
  resultDirectCommand.hasPatchTimestamp = YES;
  resultDirectCommand.patchTimestamp = value;
  return self;
}
- (AVIMDirectCommandBuilder*) clearPatchTimestamp {
  resultDirectCommand.hasPatchTimestamp = NO;
  resultDirectCommand.patchTimestamp = 0L;
  return self;
}
- (BOOL) hasBinaryMsg {
  return resultDirectCommand.hasBinaryMsg;
}
- (NSData*) binaryMsg {
  return resultDirectCommand.binaryMsg;
}
- (AVIMDirectCommandBuilder*) setBinaryMsg:(NSData*) value {
  resultDirectCommand.hasBinaryMsg = YES;
  resultDirectCommand.binaryMsg = value;
  return self;
}
- (AVIMDirectCommandBuilder*) clearBinaryMsg {
  resultDirectCommand.hasBinaryMsg = NO;
  resultDirectCommand.binaryMsg = [NSData data];
  return self;
}
@end

@interface AVIMAckCommand ()
@property SInt32 code;
@property (strong) NSString* reason;
@property (strong) NSString* mid;
@property (strong) NSString* cid;
@property SInt64 t;
@property (strong) NSString* uid;
@property SInt64 fromts;
@property SInt64 tots;
@property (strong) NSString* type;
@property (strong) NSMutableArray * idsArray;
@property SInt32 appCode;
@end

@implementation AVIMAckCommand

- (BOOL) hasCode {
  return !!hasCode_;
}
- (void) setHasCode:(BOOL) _value_ {
  hasCode_ = !!_value_;
}
@synthesize code;
- (BOOL) hasReason {
  return !!hasReason_;
}
- (void) setHasReason:(BOOL) _value_ {
  hasReason_ = !!_value_;
}
@synthesize reason;
- (BOOL) hasMid {
  return !!hasMid_;
}
- (void) setHasMid:(BOOL) _value_ {
  hasMid_ = !!_value_;
}
@synthesize mid;
- (BOOL) hasCid {
  return !!hasCid_;
}
- (void) setHasCid:(BOOL) _value_ {
  hasCid_ = !!_value_;
}
@synthesize cid;
- (BOOL) hasT {
  return !!hasT_;
}
- (void) setHasT:(BOOL) _value_ {
  hasT_ = !!_value_;
}
@synthesize t;
- (BOOL) hasUid {
  return !!hasUid_;
}
- (void) setHasUid:(BOOL) _value_ {
  hasUid_ = !!_value_;
}
@synthesize uid;
- (BOOL) hasFromts {
  return !!hasFromts_;
}
- (void) setHasFromts:(BOOL) _value_ {
  hasFromts_ = !!_value_;
}
@synthesize fromts;
- (BOOL) hasTots {
  return !!hasTots_;
}
- (void) setHasTots:(BOOL) _value_ {
  hasTots_ = !!_value_;
}
@synthesize tots;
- (BOOL) hasType {
  return !!hasType_;
}
- (void) setHasType:(BOOL) _value_ {
  hasType_ = !!_value_;
}
@synthesize type;
@synthesize idsArray;
@dynamic ids;
- (BOOL) hasAppCode {
  return !!hasAppCode_;
}
- (void) setHasAppCode:(BOOL) _value_ {
  hasAppCode_ = !!_value_;
}
@synthesize appCode;
- (instancetype) init {
  if ((self = [super init])) {
    self.code = 0;
    self.reason = @"";
    self.mid = @"";
    self.cid = @"";
    self.t = 0L;
    self.uid = @"";
    self.fromts = 0L;
    self.tots = 0L;
    self.type = @"";
    self.appCode = 0;
  }
  return self;
}
static AVIMAckCommand* defaultAVIMAckCommandInstance = nil;
+ (void) initialize {
  if (self == [AVIMAckCommand class]) {
    defaultAVIMAckCommandInstance = [[AVIMAckCommand alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultAVIMAckCommandInstance;
}
- (instancetype) defaultInstance {
  return defaultAVIMAckCommandInstance;
}
- (NSArray *)ids {
  return idsArray;
}
- (NSString*)idsAtIndex:(NSUInteger)index {
  return [idsArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasCode) {
    [output writeInt32:1 value:self.code];
  }
  if (self.hasReason) {
    [output writeString:2 value:self.reason];
  }
  if (self.hasMid) {
    [output writeString:3 value:self.mid];
  }
  if (self.hasCid) {
    [output writeString:4 value:self.cid];
  }
  if (self.hasT) {
    [output writeInt64:5 value:self.t];
  }
  if (self.hasUid) {
    [output writeString:6 value:self.uid];
  }
  if (self.hasFromts) {
    [output writeInt64:7 value:self.fromts];
  }
  if (self.hasTots) {
    [output writeInt64:8 value:self.tots];
  }
  if (self.hasType) {
    [output writeString:9 value:self.type];
  }
  [self.idsArray enumerateObjectsUsingBlock:^(NSString *element, NSUInteger idx, BOOL *stop) {
    [output writeString:10 value:element];
  }];
  if (self.hasAppCode) {
    [output writeInt32:11 value:self.appCode];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasCode) {
    size_ += computeInt32Size(1, self.code);
  }
  if (self.hasReason) {
    size_ += computeStringSize(2, self.reason);
  }
  if (self.hasMid) {
    size_ += computeStringSize(3, self.mid);
  }
  if (self.hasCid) {
    size_ += computeStringSize(4, self.cid);
  }
  if (self.hasT) {
    size_ += computeInt64Size(5, self.t);
  }
  if (self.hasUid) {
    size_ += computeStringSize(6, self.uid);
  }
  if (self.hasFromts) {
    size_ += computeInt64Size(7, self.fromts);
  }
  if (self.hasTots) {
    size_ += computeInt64Size(8, self.tots);
  }
  if (self.hasType) {
    size_ += computeStringSize(9, self.type);
  }
  {
    __block SInt32 dataSize = 0;
    const NSUInteger count = self.idsArray.count;
    [self.idsArray enumerateObjectsUsingBlock:^(NSString *element, NSUInteger idx, BOOL *stop) {
      dataSize += computeStringSizeNoTag(element);
    }];
    size_ += dataSize;
    size_ += (SInt32)(1 * count);
  }
  if (self.hasAppCode) {
    size_ += computeInt32Size(11, self.appCode);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (AVIMAckCommand*) parseFromData:(NSData*) data {
  return (AVIMAckCommand*)[[[AVIMAckCommand builder] mergeFromData:data] build];
}
+ (AVIMAckCommand*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (AVIMAckCommand*)[[[AVIMAckCommand builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (AVIMAckCommand*) parseFromInputStream:(NSInputStream*) input {
  return (AVIMAckCommand*)[[[AVIMAckCommand builder] mergeFromInputStream:input] build];
}
+ (AVIMAckCommand*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (AVIMAckCommand*)[[[AVIMAckCommand builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (AVIMAckCommand*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (AVIMAckCommand*)[[[AVIMAckCommand builder] mergeFromCodedInputStream:input] build];
}
+ (AVIMAckCommand*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (AVIMAckCommand*)[[[AVIMAckCommand builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (AVIMAckCommandBuilder*) builder {
  return [[AVIMAckCommandBuilder alloc] init];
}
+ (AVIMAckCommandBuilder*) builderWithPrototype:(AVIMAckCommand*) prototype {
  return [[AVIMAckCommand builder] mergeFrom:prototype];
}
- (AVIMAckCommandBuilder*) builder {
  return [AVIMAckCommand builder];
}
- (AVIMAckCommandBuilder*) toBuilder {
  return [AVIMAckCommand builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasCode) {
    [output appendFormat:@"%@%@: %@\n", indent, @"code", [NSNumber numberWithInteger:self.code]];
  }
  if (self.hasReason) {
    [output appendFormat:@"%@%@: %@\n", indent, @"reason", self.reason];
  }
  if (self.hasMid) {
    [output appendFormat:@"%@%@: %@\n", indent, @"mid", self.mid];
  }
  if (self.hasCid) {
    [output appendFormat:@"%@%@: %@\n", indent, @"cid", self.cid];
  }
  if (self.hasT) {
    [output appendFormat:@"%@%@: %@\n", indent, @"t", [NSNumber numberWithLongLong:self.t]];
  }
  if (self.hasUid) {
    [output appendFormat:@"%@%@: %@\n", indent, @"uid", self.uid];
  }
  if (self.hasFromts) {
    [output appendFormat:@"%@%@: %@\n", indent, @"fromts", [NSNumber numberWithLongLong:self.fromts]];
  }
  if (self.hasTots) {
    [output appendFormat:@"%@%@: %@\n", indent, @"tots", [NSNumber numberWithLongLong:self.tots]];
  }
  if (self.hasType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"type", self.type];
  }
  [self.idsArray enumerateObjectsUsingBlock:^(id obj, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@: %@\n", indent, @"ids", obj];
  }];
  if (self.hasAppCode) {
    [output appendFormat:@"%@%@: %@\n", indent, @"appCode", [NSNumber numberWithInteger:self.appCode]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasCode) {
    [dictionary setObject: [NSNumber numberWithInteger:self.code] forKey: @"code"];
  }
  if (self.hasReason) {
    [dictionary setObject: self.reason forKey: @"reason"];
  }
  if (self.hasMid) {
    [dictionary setObject: self.mid forKey: @"mid"];
  }
  if (self.hasCid) {
    [dictionary setObject: self.cid forKey: @"cid"];
  }
  if (self.hasT) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.t] forKey: @"t"];
  }
  if (self.hasUid) {
    [dictionary setObject: self.uid forKey: @"uid"];
  }
  if (self.hasFromts) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.fromts] forKey: @"fromts"];
  }
  if (self.hasTots) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.tots] forKey: @"tots"];
  }
  if (self.hasType) {
    [dictionary setObject: self.type forKey: @"type"];
  }
  [dictionary setObject:self.ids forKey: @"ids"];
  if (self.hasAppCode) {
    [dictionary setObject: [NSNumber numberWithInteger:self.appCode] forKey: @"appCode"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[AVIMAckCommand class]]) {
    return NO;
  }
  AVIMAckCommand *otherMessage = other;
  return
      self.hasCode == otherMessage.hasCode &&
      (!self.hasCode || self.code == otherMessage.code) &&
      self.hasReason == otherMessage.hasReason &&
      (!self.hasReason || [self.reason isEqual:otherMessage.reason]) &&
      self.hasMid == otherMessage.hasMid &&
      (!self.hasMid || [self.mid isEqual:otherMessage.mid]) &&
      self.hasCid == otherMessage.hasCid &&
      (!self.hasCid || [self.cid isEqual:otherMessage.cid]) &&
      self.hasT == otherMessage.hasT &&
      (!self.hasT || self.t == otherMessage.t) &&
      self.hasUid == otherMessage.hasUid &&
      (!self.hasUid || [self.uid isEqual:otherMessage.uid]) &&
      self.hasFromts == otherMessage.hasFromts &&
      (!self.hasFromts || self.fromts == otherMessage.fromts) &&
      self.hasTots == otherMessage.hasTots &&
      (!self.hasTots || self.tots == otherMessage.tots) &&
      self.hasType == otherMessage.hasType &&
      (!self.hasType || [self.type isEqual:otherMessage.type]) &&
      [self.idsArray isEqualToArray:otherMessage.idsArray] &&
      self.hasAppCode == otherMessage.hasAppCode &&
      (!self.hasAppCode || self.appCode == otherMessage.appCode) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasCode) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.code] hash];
  }
  if (self.hasReason) {
    hashCode = hashCode * 31 + [self.reason hash];
  }
  if (self.hasMid) {
    hashCode = hashCode * 31 + [self.mid hash];
  }
  if (self.hasCid) {
    hashCode = hashCode * 31 + [self.cid hash];
  }
  if (self.hasT) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.t] hash];
  }
  if (self.hasUid) {
    hashCode = hashCode * 31 + [self.uid hash];
  }
  if (self.hasFromts) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.fromts] hash];
  }
  if (self.hasTots) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.tots] hash];
  }
  if (self.hasType) {
    hashCode = hashCode * 31 + [self.type hash];
  }
  [self.idsArray enumerateObjectsUsingBlock:^(NSString *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  if (self.hasAppCode) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.appCode] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface AVIMAckCommandBuilder()
@property (strong) AVIMAckCommand* resultAckCommand;
@end

@implementation AVIMAckCommandBuilder
@synthesize resultAckCommand;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultAckCommand = [[AVIMAckCommand alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultAckCommand;
}
- (AVIMAckCommandBuilder*) clear {
  self.resultAckCommand = [[AVIMAckCommand alloc] init];
  return self;
}
- (AVIMAckCommandBuilder*) clone {
  return [AVIMAckCommand builderWithPrototype:resultAckCommand];
}
- (AVIMAckCommand*) defaultInstance {
  return [AVIMAckCommand defaultInstance];
}
- (AVIMAckCommand*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (AVIMAckCommand*) buildPartial {
  AVIMAckCommand* returnMe = resultAckCommand;
  self.resultAckCommand = nil;
  return returnMe;
}
- (AVIMAckCommandBuilder*) mergeFrom:(AVIMAckCommand*) other {
  if (other == [AVIMAckCommand defaultInstance]) {
    return self;
  }
  if (other.hasCode) {
    [self setCode:other.code];
  }
  if (other.hasReason) {
    [self setReason:other.reason];
  }
  if (other.hasMid) {
    [self setMid:other.mid];
  }
  if (other.hasCid) {
    [self setCid:other.cid];
  }
  if (other.hasT) {
    [self setT:other.t];
  }
  if (other.hasUid) {
    [self setUid:other.uid];
  }
  if (other.hasFromts) {
    [self setFromts:other.fromts];
  }
  if (other.hasTots) {
    [self setTots:other.tots];
  }
  if (other.hasType) {
    [self setType:other.type];
  }
  if (other.idsArray.count > 0) {
    if (resultAckCommand.idsArray == nil) {
      resultAckCommand.idsArray = [[NSMutableArray alloc] initWithArray:other.idsArray];
    } else {
      [resultAckCommand.idsArray addObjectsFromArray:other.idsArray];
    }
  }
  if (other.hasAppCode) {
    [self setAppCode:other.appCode];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (AVIMAckCommandBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (AVIMAckCommandBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setCode:[input readInt32]];
        break;
      }
      case 18: {
        [self setReason:[input readString]];
        break;
      }
      case 26: {
        [self setMid:[input readString]];
        break;
      }
      case 34: {
        [self setCid:[input readString]];
        break;
      }
      case 40: {
        [self setT:[input readInt64]];
        break;
      }
      case 50: {
        [self setUid:[input readString]];
        break;
      }
      case 56: {
        [self setFromts:[input readInt64]];
        break;
      }
      case 64: {
        [self setTots:[input readInt64]];
        break;
      }
      case 74: {
        [self setType:[input readString]];
        break;
      }
      case 82: {
        [self addIds:[input readString]];
        break;
      }
      case 88: {
        [self setAppCode:[input readInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasCode {
  return resultAckCommand.hasCode;
}
- (SInt32) code {
  return resultAckCommand.code;
}
- (AVIMAckCommandBuilder*) setCode:(SInt32) value {
  resultAckCommand.hasCode = YES;
  resultAckCommand.code = value;
  return self;
}
- (AVIMAckCommandBuilder*) clearCode {
  resultAckCommand.hasCode = NO;
  resultAckCommand.code = 0;
  return self;
}
- (BOOL) hasReason {
  return resultAckCommand.hasReason;
}
- (NSString*) reason {
  return resultAckCommand.reason;
}
- (AVIMAckCommandBuilder*) setReason:(NSString*) value {
  resultAckCommand.hasReason = YES;
  resultAckCommand.reason = value;
  return self;
}
- (AVIMAckCommandBuilder*) clearReason {
  resultAckCommand.hasReason = NO;
  resultAckCommand.reason = @"";
  return self;
}
- (BOOL) hasMid {
  return resultAckCommand.hasMid;
}
- (NSString*) mid {
  return resultAckCommand.mid;
}
- (AVIMAckCommandBuilder*) setMid:(NSString*) value {
  resultAckCommand.hasMid = YES;
  resultAckCommand.mid = value;
  return self;
}
- (AVIMAckCommandBuilder*) clearMid {
  resultAckCommand.hasMid = NO;
  resultAckCommand.mid = @"";
  return self;
}
- (BOOL) hasCid {
  return resultAckCommand.hasCid;
}
- (NSString*) cid {
  return resultAckCommand.cid;
}
- (AVIMAckCommandBuilder*) setCid:(NSString*) value {
  resultAckCommand.hasCid = YES;
  resultAckCommand.cid = value;
  return self;
}
- (AVIMAckCommandBuilder*) clearCid {
  resultAckCommand.hasCid = NO;
  resultAckCommand.cid = @"";
  return self;
}
- (BOOL) hasT {
  return resultAckCommand.hasT;
}
- (SInt64) t {
  return resultAckCommand.t;
}
- (AVIMAckCommandBuilder*) setT:(SInt64) value {
  resultAckCommand.hasT = YES;
  resultAckCommand.t = value;
  return self;
}
- (AVIMAckCommandBuilder*) clearT {
  resultAckCommand.hasT = NO;
  resultAckCommand.t = 0L;
  return self;
}
- (BOOL) hasUid {
  return resultAckCommand.hasUid;
}
- (NSString*) uid {
  return resultAckCommand.uid;
}
- (AVIMAckCommandBuilder*) setUid:(NSString*) value {
  resultAckCommand.hasUid = YES;
  resultAckCommand.uid = value;
  return self;
}
- (AVIMAckCommandBuilder*) clearUid {
  resultAckCommand.hasUid = NO;
  resultAckCommand.uid = @"";
  return self;
}
- (BOOL) hasFromts {
  return resultAckCommand.hasFromts;
}
- (SInt64) fromts {
  return resultAckCommand.fromts;
}
- (AVIMAckCommandBuilder*) setFromts:(SInt64) value {
  resultAckCommand.hasFromts = YES;
  resultAckCommand.fromts = value;
  return self;
}
- (AVIMAckCommandBuilder*) clearFromts {
  resultAckCommand.hasFromts = NO;
  resultAckCommand.fromts = 0L;
  return self;
}
- (BOOL) hasTots {
  return resultAckCommand.hasTots;
}
- (SInt64) tots {
  return resultAckCommand.tots;
}
- (AVIMAckCommandBuilder*) setTots:(SInt64) value {
  resultAckCommand.hasTots = YES;
  resultAckCommand.tots = value;
  return self;
}
- (AVIMAckCommandBuilder*) clearTots {
  resultAckCommand.hasTots = NO;
  resultAckCommand.tots = 0L;
  return self;
}
- (BOOL) hasType {
  return resultAckCommand.hasType;
}
- (NSString*) type {
  return resultAckCommand.type;
}
- (AVIMAckCommandBuilder*) setType:(NSString*) value {
  resultAckCommand.hasType = YES;
  resultAckCommand.type = value;
  return self;
}
- (AVIMAckCommandBuilder*) clearType {
  resultAckCommand.hasType = NO;
  resultAckCommand.type = @"";
  return self;
}
- (NSMutableArray *)ids {
  return resultAckCommand.idsArray;
}
- (NSString*)idsAtIndex:(NSUInteger)index {
  return [resultAckCommand idsAtIndex:index];
}
- (AVIMAckCommandBuilder *)addIds:(NSString*)value {
  if (resultAckCommand.idsArray == nil) {
    resultAckCommand.idsArray = [[NSMutableArray alloc]init];
  }
  [resultAckCommand.idsArray addObject:value];
  return self;
}
- (AVIMAckCommandBuilder *)setIdsArray:(NSArray *)array {
  resultAckCommand.idsArray = [[NSMutableArray alloc] initWithArray:array];
  return self;
}
- (AVIMAckCommandBuilder *)clearIds {
  resultAckCommand.idsArray = nil;
  return self;
}
- (BOOL) hasAppCode {
  return resultAckCommand.hasAppCode;
}
- (SInt32) appCode {
  return resultAckCommand.appCode;
}
- (AVIMAckCommandBuilder*) setAppCode:(SInt32) value {
  resultAckCommand.hasAppCode = YES;
  resultAckCommand.appCode = value;
  return self;
}
- (AVIMAckCommandBuilder*) clearAppCode {
  resultAckCommand.hasAppCode = NO;
  resultAckCommand.appCode = 0;
  return self;
}
@end

@interface AVIMUnreadCommand ()
@property (strong) NSMutableArray * convsArray;
@property SInt64 notifTime;
@end

@implementation AVIMUnreadCommand

@synthesize convsArray;
@dynamic convs;
- (BOOL) hasNotifTime {
  return !!hasNotifTime_;
}
- (void) setHasNotifTime:(BOOL) _value_ {
  hasNotifTime_ = !!_value_;
}
@synthesize notifTime;
- (instancetype) init {
  if ((self = [super init])) {
    self.notifTime = 0L;
  }
  return self;
}
static AVIMUnreadCommand* defaultAVIMUnreadCommandInstance = nil;
+ (void) initialize {
  if (self == [AVIMUnreadCommand class]) {
    defaultAVIMUnreadCommandInstance = [[AVIMUnreadCommand alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultAVIMUnreadCommandInstance;
}
- (instancetype) defaultInstance {
  return defaultAVIMUnreadCommandInstance;
}
- (NSArray *)convs {
  return convsArray;
}
- (AVIMUnreadTuple*)convsAtIndex:(NSUInteger)index {
  return [convsArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  __block BOOL isInitconvs = YES;
   [self.convs enumerateObjectsUsingBlock:^(AVIMUnreadTuple *element, NSUInteger idx, BOOL *stop) {
    if (!element.isInitialized) {
      isInitconvs = NO;
      *stop = YES;
    }
  }];
  if (!isInitconvs) return isInitconvs;
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  [self.convsArray enumerateObjectsUsingBlock:^(AVIMUnreadTuple *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:1 value:element];
  }];
  if (self.hasNotifTime) {
    [output writeInt64:2 value:self.notifTime];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  [self.convsArray enumerateObjectsUsingBlock:^(AVIMUnreadTuple *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(1, element);
  }];
  if (self.hasNotifTime) {
    size_ += computeInt64Size(2, self.notifTime);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (AVIMUnreadCommand*) parseFromData:(NSData*) data {
  return (AVIMUnreadCommand*)[[[AVIMUnreadCommand builder] mergeFromData:data] build];
}
+ (AVIMUnreadCommand*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (AVIMUnreadCommand*)[[[AVIMUnreadCommand builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (AVIMUnreadCommand*) parseFromInputStream:(NSInputStream*) input {
  return (AVIMUnreadCommand*)[[[AVIMUnreadCommand builder] mergeFromInputStream:input] build];
}
+ (AVIMUnreadCommand*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (AVIMUnreadCommand*)[[[AVIMUnreadCommand builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (AVIMUnreadCommand*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (AVIMUnreadCommand*)[[[AVIMUnreadCommand builder] mergeFromCodedInputStream:input] build];
}
+ (AVIMUnreadCommand*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (AVIMUnreadCommand*)[[[AVIMUnreadCommand builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (AVIMUnreadCommandBuilder*) builder {
  return [[AVIMUnreadCommandBuilder alloc] init];
}
+ (AVIMUnreadCommandBuilder*) builderWithPrototype:(AVIMUnreadCommand*) prototype {
  return [[AVIMUnreadCommand builder] mergeFrom:prototype];
}
- (AVIMUnreadCommandBuilder*) builder {
  return [AVIMUnreadCommand builder];
}
- (AVIMUnreadCommandBuilder*) toBuilder {
  return [AVIMUnreadCommand builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  [self.convsArray enumerateObjectsUsingBlock:^(AVIMUnreadTuple *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"convs"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  if (self.hasNotifTime) {
    [output appendFormat:@"%@%@: %@\n", indent, @"notifTime", [NSNumber numberWithLongLong:self.notifTime]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  for (AVIMUnreadTuple* element in self.convsArray) {
    NSMutableDictionary *elementDictionary = [NSMutableDictionary dictionary];
    [element storeInDictionary:elementDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:elementDictionary] forKey:@"convs"];
  }
  if (self.hasNotifTime) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.notifTime] forKey: @"notifTime"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[AVIMUnreadCommand class]]) {
    return NO;
  }
  AVIMUnreadCommand *otherMessage = other;
  return
      [self.convsArray isEqualToArray:otherMessage.convsArray] &&
      self.hasNotifTime == otherMessage.hasNotifTime &&
      (!self.hasNotifTime || self.notifTime == otherMessage.notifTime) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  [self.convsArray enumerateObjectsUsingBlock:^(AVIMUnreadTuple *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  if (self.hasNotifTime) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.notifTime] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface AVIMUnreadCommandBuilder()
@property (strong) AVIMUnreadCommand* resultUnreadCommand;
@end

@implementation AVIMUnreadCommandBuilder
@synthesize resultUnreadCommand;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultUnreadCommand = [[AVIMUnreadCommand alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultUnreadCommand;
}
- (AVIMUnreadCommandBuilder*) clear {
  self.resultUnreadCommand = [[AVIMUnreadCommand alloc] init];
  return self;
}
- (AVIMUnreadCommandBuilder*) clone {
  return [AVIMUnreadCommand builderWithPrototype:resultUnreadCommand];
}
- (AVIMUnreadCommand*) defaultInstance {
  return [AVIMUnreadCommand defaultInstance];
}
- (AVIMUnreadCommand*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (AVIMUnreadCommand*) buildPartial {
  AVIMUnreadCommand* returnMe = resultUnreadCommand;
  self.resultUnreadCommand = nil;
  return returnMe;
}
- (AVIMUnreadCommandBuilder*) mergeFrom:(AVIMUnreadCommand*) other {
  if (other == [AVIMUnreadCommand defaultInstance]) {
    return self;
  }
  if (other.convsArray.count > 0) {
    if (resultUnreadCommand.convsArray == nil) {
      resultUnreadCommand.convsArray = [[NSMutableArray alloc] initWithArray:other.convsArray];
    } else {
      [resultUnreadCommand.convsArray addObjectsFromArray:other.convsArray];
    }
  }
  if (other.hasNotifTime) {
    [self setNotifTime:other.notifTime];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (AVIMUnreadCommandBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (AVIMUnreadCommandBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        AVIMUnreadTupleBuilder* subBuilder = [AVIMUnreadTuple builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addConvs:[subBuilder buildPartial]];
        break;
      }
      case 16: {
        [self setNotifTime:[input readInt64]];
        break;
      }
    }
  }
}
- (NSMutableArray *)convs {
  return resultUnreadCommand.convsArray;
}
- (AVIMUnreadTuple*)convsAtIndex:(NSUInteger)index {
  return [resultUnreadCommand convsAtIndex:index];
}
- (AVIMUnreadCommandBuilder *)addConvs:(AVIMUnreadTuple*)value {
  if (resultUnreadCommand.convsArray == nil) {
    resultUnreadCommand.convsArray = [[NSMutableArray alloc]init];
  }
  [resultUnreadCommand.convsArray addObject:value];
  return self;
}
- (AVIMUnreadCommandBuilder *)setConvsArray:(NSArray *)array {
  resultUnreadCommand.convsArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (AVIMUnreadCommandBuilder *)clearConvs {
  resultUnreadCommand.convsArray = nil;
  return self;
}
- (BOOL) hasNotifTime {
  return resultUnreadCommand.hasNotifTime;
}
- (SInt64) notifTime {
  return resultUnreadCommand.notifTime;
}
- (AVIMUnreadCommandBuilder*) setNotifTime:(SInt64) value {
  resultUnreadCommand.hasNotifTime = YES;
  resultUnreadCommand.notifTime = value;
  return self;
}
- (AVIMUnreadCommandBuilder*) clearNotifTime {
  resultUnreadCommand.hasNotifTime = NO;
  resultUnreadCommand.notifTime = 0L;
  return self;
}
@end

@interface AVIMConvCommand ()
@property (strong) NSMutableArray * mArray;
@property BOOL transient;
@property BOOL unique;
@property (strong) NSString* cid;
@property (strong) NSString* cdate;
@property (strong) NSString* pb_initBy;
@property (strong) NSString* sort;
@property SInt32 limit;
@property SInt32 skip;
@property SInt32 flag;
@property SInt32 count;
@property (strong) NSString* udate;
@property SInt64 t;
@property (strong) NSString* n;
@property (strong) NSString* s;
@property BOOL statusSub;
@property BOOL statusPub;
@property SInt32 statusTtl;
@property (strong) NSString* uniqueId;
@property (strong) NSString* targetClientId;
@property SInt64 maxReadTimestamp;
@property SInt64 maxAckTimestamp;
@property BOOL queryAllMembers;
@property (strong) NSMutableArray * maxReadTuplesArray;
@property (strong) NSMutableArray * cidsArray;
@property (strong) AVIMJsonObjectMessage* results;
@property (strong) AVIMJsonObjectMessage* where;
@property (strong) AVIMJsonObjectMessage* attr;
@end

@implementation AVIMConvCommand

@synthesize mArray;
@dynamic m;
- (BOOL) hasTransient {
  return !!hasTransient_;
}
- (void) setHasTransient:(BOOL) _value_ {
  hasTransient_ = !!_value_;
}
- (BOOL) transient {
  return !!transient_;
}
- (void) setTransient:(BOOL) _value_ {
  transient_ = !!_value_;
}
- (BOOL) hasUnique {
  return !!hasUnique_;
}
- (void) setHasUnique:(BOOL) _value_ {
  hasUnique_ = !!_value_;
}
- (BOOL) unique {
  return !!unique_;
}
- (void) setUnique:(BOOL) _value_ {
  unique_ = !!_value_;
}
- (BOOL) hasCid {
  return !!hasCid_;
}
- (void) setHasCid:(BOOL) _value_ {
  hasCid_ = !!_value_;
}
@synthesize cid;
- (BOOL) hasCdate {
  return !!hasCdate_;
}
- (void) setHasCdate:(BOOL) _value_ {
  hasCdate_ = !!_value_;
}
@synthesize cdate;
- (BOOL) hasInitBy {
  return !!hasInitBy_;
}
- (void) setHasInitBy:(BOOL) _value_ {
  hasInitBy_ = !!_value_;
}
@synthesize pb_initBy;
- (BOOL) hasSort {
  return !!hasSort_;
}
- (void) setHasSort:(BOOL) _value_ {
  hasSort_ = !!_value_;
}
@synthesize sort;
- (BOOL) hasLimit {
  return !!hasLimit_;
}
- (void) setHasLimit:(BOOL) _value_ {
  hasLimit_ = !!_value_;
}
@synthesize limit;
- (BOOL) hasSkip {
  return !!hasSkip_;
}
- (void) setHasSkip:(BOOL) _value_ {
  hasSkip_ = !!_value_;
}
@synthesize skip;
- (BOOL) hasFlag {
  return !!hasFlag_;
}
- (void) setHasFlag:(BOOL) _value_ {
  hasFlag_ = !!_value_;
}
@synthesize flag;
- (BOOL) hasCount {
  return !!hasCount_;
}
- (void) setHasCount:(BOOL) _value_ {
  hasCount_ = !!_value_;
}
@synthesize count;
- (BOOL) hasUdate {
  return !!hasUdate_;
}
- (void) setHasUdate:(BOOL) _value_ {
  hasUdate_ = !!_value_;
}
@synthesize udate;
- (BOOL) hasT {
  return !!hasT_;
}
- (void) setHasT:(BOOL) _value_ {
  hasT_ = !!_value_;
}
@synthesize t;
- (BOOL) hasN {
  return !!hasN_;
}
- (void) setHasN:(BOOL) _value_ {
  hasN_ = !!_value_;
}
@synthesize n;
- (BOOL) hasS {
  return !!hasS_;
}
- (void) setHasS:(BOOL) _value_ {
  hasS_ = !!_value_;
}
@synthesize s;
- (BOOL) hasStatusSub {
  return !!hasStatusSub_;
}
- (void) setHasStatusSub:(BOOL) _value_ {
  hasStatusSub_ = !!_value_;
}
- (BOOL) statusSub {
  return !!statusSub_;
}
- (void) setStatusSub:(BOOL) _value_ {
  statusSub_ = !!_value_;
}
- (BOOL) hasStatusPub {
  return !!hasStatusPub_;
}
- (void) setHasStatusPub:(BOOL) _value_ {
  hasStatusPub_ = !!_value_;
}
- (BOOL) statusPub {
  return !!statusPub_;
}
- (void) setStatusPub:(BOOL) _value_ {
  statusPub_ = !!_value_;
}
- (BOOL) hasStatusTtl {
  return !!hasStatusTtl_;
}
- (void) setHasStatusTtl:(BOOL) _value_ {
  hasStatusTtl_ = !!_value_;
}
@synthesize statusTtl;
- (BOOL) hasUniqueId {
  return !!hasUniqueId_;
}
- (void) setHasUniqueId:(BOOL) _value_ {
  hasUniqueId_ = !!_value_;
}
@synthesize uniqueId;
- (BOOL) hasTargetClientId {
  return !!hasTargetClientId_;
}
- (void) setHasTargetClientId:(BOOL) _value_ {
  hasTargetClientId_ = !!_value_;
}
@synthesize targetClientId;
- (BOOL) hasMaxReadTimestamp {
  return !!hasMaxReadTimestamp_;
}
- (void) setHasMaxReadTimestamp:(BOOL) _value_ {
  hasMaxReadTimestamp_ = !!_value_;
}
@synthesize maxReadTimestamp;
- (BOOL) hasMaxAckTimestamp {
  return !!hasMaxAckTimestamp_;
}
- (void) setHasMaxAckTimestamp:(BOOL) _value_ {
  hasMaxAckTimestamp_ = !!_value_;
}
@synthesize maxAckTimestamp;
- (BOOL) hasQueryAllMembers {
  return !!hasQueryAllMembers_;
}
- (void) setHasQueryAllMembers:(BOOL) _value_ {
  hasQueryAllMembers_ = !!_value_;
}
- (BOOL) queryAllMembers {
  return !!queryAllMembers_;
}
- (void) setQueryAllMembers:(BOOL) _value_ {
  queryAllMembers_ = !!_value_;
}
@synthesize maxReadTuplesArray;
@dynamic maxReadTuples;
@synthesize cidsArray;
@dynamic cids;
- (BOOL) hasResults {
  return !!hasResults_;
}
- (void) setHasResults:(BOOL) _value_ {
  hasResults_ = !!_value_;
}
@synthesize results;
- (BOOL) hasWhere {
  return !!hasWhere_;
}
- (void) setHasWhere:(BOOL) _value_ {
  hasWhere_ = !!_value_;
}
@synthesize where;
- (BOOL) hasAttr {
  return !!hasAttr_;
}
- (void) setHasAttr:(BOOL) _value_ {
  hasAttr_ = !!_value_;
}
@synthesize attr;
- (instancetype) init {
  if ((self = [super init])) {
    self.transient = NO;
    self.unique = NO;
    self.cid = @"";
    self.cdate = @"";
    self.pb_initBy = @"";
    self.sort = @"";
    self.limit = 0;
    self.skip = 0;
    self.flag = 0;
    self.count = 0;
    self.udate = @"";
    self.t = 0L;
    self.n = @"";
    self.s = @"";
    self.statusSub = NO;
    self.statusPub = NO;
    self.statusTtl = 0;
    self.uniqueId = @"";
    self.targetClientId = @"";
    self.maxReadTimestamp = 0L;
    self.maxAckTimestamp = 0L;
    self.queryAllMembers = NO;
    self.results = [AVIMJsonObjectMessage defaultInstance];
    self.where = [AVIMJsonObjectMessage defaultInstance];
    self.attr = [AVIMJsonObjectMessage defaultInstance];
  }
  return self;
}
static AVIMConvCommand* defaultAVIMConvCommandInstance = nil;
+ (void) initialize {
  if (self == [AVIMConvCommand class]) {
    defaultAVIMConvCommandInstance = [[AVIMConvCommand alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultAVIMConvCommandInstance;
}
- (instancetype) defaultInstance {
  return defaultAVIMConvCommandInstance;
}
- (NSArray *)m {
  return mArray;
}
- (NSString*)mAtIndex:(NSUInteger)index {
  return [mArray objectAtIndex:index];
}
- (NSArray *)maxReadTuples {
  return maxReadTuplesArray;
}
- (AVIMMaxReadTuple*)maxReadTuplesAtIndex:(NSUInteger)index {
  return [maxReadTuplesArray objectAtIndex:index];
}
- (NSArray *)cids {
  return cidsArray;
}
- (NSString*)cidsAtIndex:(NSUInteger)index {
  return [cidsArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  __block BOOL isInitmaxReadTuples = YES;
   [self.maxReadTuples enumerateObjectsUsingBlock:^(AVIMMaxReadTuple *element, NSUInteger idx, BOOL *stop) {
    if (!element.isInitialized) {
      isInitmaxReadTuples = NO;
      *stop = YES;
    }
  }];
  if (!isInitmaxReadTuples) return isInitmaxReadTuples;
  if (self.hasResults) {
    if (!self.results.isInitialized) {
      return NO;
    }
  }
  if (self.hasWhere) {
    if (!self.where.isInitialized) {
      return NO;
    }
  }
  if (self.hasAttr) {
    if (!self.attr.isInitialized) {
      return NO;
    }
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  [self.mArray enumerateObjectsUsingBlock:^(NSString *element, NSUInteger idx, BOOL *stop) {
    [output writeString:1 value:element];
  }];
  if (self.hasTransient) {
    [output writeBool:2 value:self.transient];
  }
  if (self.hasUnique) {
    [output writeBool:3 value:self.unique];
  }
  if (self.hasCid) {
    [output writeString:4 value:self.cid];
  }
  if (self.hasCdate) {
    [output writeString:5 value:self.cdate];
  }
  if (self.hasInitBy) {
    [output writeString:6 value:self.pb_initBy];
  }
  if (self.hasSort) {
    [output writeString:7 value:self.sort];
  }
  if (self.hasLimit) {
    [output writeInt32:8 value:self.limit];
  }
  if (self.hasSkip) {
    [output writeInt32:9 value:self.skip];
  }
  if (self.hasFlag) {
    [output writeInt32:10 value:self.flag];
  }
  if (self.hasCount) {
    [output writeInt32:11 value:self.count];
  }
  if (self.hasUdate) {
    [output writeString:12 value:self.udate];
  }
  if (self.hasT) {
    [output writeInt64:13 value:self.t];
  }
  if (self.hasN) {
    [output writeString:14 value:self.n];
  }
  if (self.hasS) {
    [output writeString:15 value:self.s];
  }
  if (self.hasStatusSub) {
    [output writeBool:16 value:self.statusSub];
  }
  if (self.hasStatusPub) {
    [output writeBool:17 value:self.statusPub];
  }
  if (self.hasStatusTtl) {
    [output writeInt32:18 value:self.statusTtl];
  }
  if (self.hasUniqueId) {
    [output writeString:19 value:self.uniqueId];
  }
  if (self.hasTargetClientId) {
    [output writeString:20 value:self.targetClientId];
  }
  if (self.hasMaxReadTimestamp) {
    [output writeInt64:21 value:self.maxReadTimestamp];
  }
  if (self.hasMaxAckTimestamp) {
    [output writeInt64:22 value:self.maxAckTimestamp];
  }
  if (self.hasQueryAllMembers) {
    [output writeBool:23 value:self.queryAllMembers];
  }
  [self.maxReadTuplesArray enumerateObjectsUsingBlock:^(AVIMMaxReadTuple *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:24 value:element];
  }];
  [self.cidsArray enumerateObjectsUsingBlock:^(NSString *element, NSUInteger idx, BOOL *stop) {
    [output writeString:25 value:element];
  }];
  if (self.hasResults) {
    [output writeMessage:100 value:self.results];
  }
  if (self.hasWhere) {
    [output writeMessage:101 value:self.where];
  }
  if (self.hasAttr) {
    [output writeMessage:103 value:self.attr];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  {
    __block SInt32 dataSize = 0;
    const NSUInteger count = self.mArray.count;
    [self.mArray enumerateObjectsUsingBlock:^(NSString *element, NSUInteger idx, BOOL *stop) {
      dataSize += computeStringSizeNoTag(element);
    }];
    size_ += dataSize;
    size_ += (SInt32)(1 * count);
  }
  if (self.hasTransient) {
    size_ += computeBoolSize(2, self.transient);
  }
  if (self.hasUnique) {
    size_ += computeBoolSize(3, self.unique);
  }
  if (self.hasCid) {
    size_ += computeStringSize(4, self.cid);
  }
  if (self.hasCdate) {
    size_ += computeStringSize(5, self.cdate);
  }
  if (self.hasInitBy) {
    size_ += computeStringSize(6, self.pb_initBy);
  }
  if (self.hasSort) {
    size_ += computeStringSize(7, self.sort);
  }
  if (self.hasLimit) {
    size_ += computeInt32Size(8, self.limit);
  }
  if (self.hasSkip) {
    size_ += computeInt32Size(9, self.skip);
  }
  if (self.hasFlag) {
    size_ += computeInt32Size(10, self.flag);
  }
  if (self.hasCount) {
    size_ += computeInt32Size(11, self.count);
  }
  if (self.hasUdate) {
    size_ += computeStringSize(12, self.udate);
  }
  if (self.hasT) {
    size_ += computeInt64Size(13, self.t);
  }
  if (self.hasN) {
    size_ += computeStringSize(14, self.n);
  }
  if (self.hasS) {
    size_ += computeStringSize(15, self.s);
  }
  if (self.hasStatusSub) {
    size_ += computeBoolSize(16, self.statusSub);
  }
  if (self.hasStatusPub) {
    size_ += computeBoolSize(17, self.statusPub);
  }
  if (self.hasStatusTtl) {
    size_ += computeInt32Size(18, self.statusTtl);
  }
  if (self.hasUniqueId) {
    size_ += computeStringSize(19, self.uniqueId);
  }
  if (self.hasTargetClientId) {
    size_ += computeStringSize(20, self.targetClientId);
  }
  if (self.hasMaxReadTimestamp) {
    size_ += computeInt64Size(21, self.maxReadTimestamp);
  }
  if (self.hasMaxAckTimestamp) {
    size_ += computeInt64Size(22, self.maxAckTimestamp);
  }
  if (self.hasQueryAllMembers) {
    size_ += computeBoolSize(23, self.queryAllMembers);
  }
  [self.maxReadTuplesArray enumerateObjectsUsingBlock:^(AVIMMaxReadTuple *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(24, element);
  }];
  {
    __block SInt32 dataSize = 0;
    const NSUInteger count = self.cidsArray.count;
    [self.cidsArray enumerateObjectsUsingBlock:^(NSString *element, NSUInteger idx, BOOL *stop) {
      dataSize += computeStringSizeNoTag(element);
    }];
    size_ += dataSize;
    size_ += (SInt32)(2 * count);
  }
  if (self.hasResults) {
    size_ += computeMessageSize(100, self.results);
  }
  if (self.hasWhere) {
    size_ += computeMessageSize(101, self.where);
  }
  if (self.hasAttr) {
    size_ += computeMessageSize(103, self.attr);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (AVIMConvCommand*) parseFromData:(NSData*) data {
  return (AVIMConvCommand*)[[[AVIMConvCommand builder] mergeFromData:data] build];
}
+ (AVIMConvCommand*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (AVIMConvCommand*)[[[AVIMConvCommand builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (AVIMConvCommand*) parseFromInputStream:(NSInputStream*) input {
  return (AVIMConvCommand*)[[[AVIMConvCommand builder] mergeFromInputStream:input] build];
}
+ (AVIMConvCommand*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (AVIMConvCommand*)[[[AVIMConvCommand builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (AVIMConvCommand*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (AVIMConvCommand*)[[[AVIMConvCommand builder] mergeFromCodedInputStream:input] build];
}
+ (AVIMConvCommand*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (AVIMConvCommand*)[[[AVIMConvCommand builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (AVIMConvCommandBuilder*) builder {
  return [[AVIMConvCommandBuilder alloc] init];
}
+ (AVIMConvCommandBuilder*) builderWithPrototype:(AVIMConvCommand*) prototype {
  return [[AVIMConvCommand builder] mergeFrom:prototype];
}
- (AVIMConvCommandBuilder*) builder {
  return [AVIMConvCommand builder];
}
- (AVIMConvCommandBuilder*) toBuilder {
  return [AVIMConvCommand builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  [self.mArray enumerateObjectsUsingBlock:^(id obj, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@: %@\n", indent, @"m", obj];
  }];
  if (self.hasTransient) {
    [output appendFormat:@"%@%@: %@\n", indent, @"transient", [NSNumber numberWithBool:self.transient]];
  }
  if (self.hasUnique) {
    [output appendFormat:@"%@%@: %@\n", indent, @"unique", [NSNumber numberWithBool:self.unique]];
  }
  if (self.hasCid) {
    [output appendFormat:@"%@%@: %@\n", indent, @"cid", self.cid];
  }
  if (self.hasCdate) {
    [output appendFormat:@"%@%@: %@\n", indent, @"cdate", self.cdate];
  }
  if (self.hasInitBy) {
    [output appendFormat:@"%@%@: %@\n", indent, @"initBy", self.pb_initBy];
  }
  if (self.hasSort) {
    [output appendFormat:@"%@%@: %@\n", indent, @"sort", self.sort];
  }
  if (self.hasLimit) {
    [output appendFormat:@"%@%@: %@\n", indent, @"limit", [NSNumber numberWithInteger:self.limit]];
  }
  if (self.hasSkip) {
    [output appendFormat:@"%@%@: %@\n", indent, @"skip", [NSNumber numberWithInteger:self.skip]];
  }
  if (self.hasFlag) {
    [output appendFormat:@"%@%@: %@\n", indent, @"flag", [NSNumber numberWithInteger:self.flag]];
  }
  if (self.hasCount) {
    [output appendFormat:@"%@%@: %@\n", indent, @"count", [NSNumber numberWithInteger:self.count]];
  }
  if (self.hasUdate) {
    [output appendFormat:@"%@%@: %@\n", indent, @"udate", self.udate];
  }
  if (self.hasT) {
    [output appendFormat:@"%@%@: %@\n", indent, @"t", [NSNumber numberWithLongLong:self.t]];
  }
  if (self.hasN) {
    [output appendFormat:@"%@%@: %@\n", indent, @"n", self.n];
  }
  if (self.hasS) {
    [output appendFormat:@"%@%@: %@\n", indent, @"s", self.s];
  }
  if (self.hasStatusSub) {
    [output appendFormat:@"%@%@: %@\n", indent, @"statusSub", [NSNumber numberWithBool:self.statusSub]];
  }
  if (self.hasStatusPub) {
    [output appendFormat:@"%@%@: %@\n", indent, @"statusPub", [NSNumber numberWithBool:self.statusPub]];
  }
  if (self.hasStatusTtl) {
    [output appendFormat:@"%@%@: %@\n", indent, @"statusTtl", [NSNumber numberWithInteger:self.statusTtl]];
  }
  if (self.hasUniqueId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"uniqueId", self.uniqueId];
  }
  if (self.hasTargetClientId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"targetClientId", self.targetClientId];
  }
  if (self.hasMaxReadTimestamp) {
    [output appendFormat:@"%@%@: %@\n", indent, @"maxReadTimestamp", [NSNumber numberWithLongLong:self.maxReadTimestamp]];
  }
  if (self.hasMaxAckTimestamp) {
    [output appendFormat:@"%@%@: %@\n", indent, @"maxAckTimestamp", [NSNumber numberWithLongLong:self.maxAckTimestamp]];
  }
  if (self.hasQueryAllMembers) {
    [output appendFormat:@"%@%@: %@\n", indent, @"queryAllMembers", [NSNumber numberWithBool:self.queryAllMembers]];
  }
  [self.maxReadTuplesArray enumerateObjectsUsingBlock:^(AVIMMaxReadTuple *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"maxReadTuples"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.cidsArray enumerateObjectsUsingBlock:^(id obj, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@: %@\n", indent, @"cids", obj];
  }];
  if (self.hasResults) {
    [output appendFormat:@"%@%@ {\n", indent, @"results"];
    [self.results writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasWhere) {
    [output appendFormat:@"%@%@ {\n", indent, @"where"];
    [self.where writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasAttr) {
    [output appendFormat:@"%@%@ {\n", indent, @"attr"];
    [self.attr writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  [dictionary setObject:self.m forKey: @"m"];
  if (self.hasTransient) {
    [dictionary setObject: [NSNumber numberWithBool:self.transient] forKey: @"transient"];
  }
  if (self.hasUnique) {
    [dictionary setObject: [NSNumber numberWithBool:self.unique] forKey: @"unique"];
  }
  if (self.hasCid) {
    [dictionary setObject: self.cid forKey: @"cid"];
  }
  if (self.hasCdate) {
    [dictionary setObject: self.cdate forKey: @"cdate"];
  }
  if (self.hasInitBy) {
    [dictionary setObject: self.pb_initBy forKey: @"initBy"];
  }
  if (self.hasSort) {
    [dictionary setObject: self.sort forKey: @"sort"];
  }
  if (self.hasLimit) {
    [dictionary setObject: [NSNumber numberWithInteger:self.limit] forKey: @"limit"];
  }
  if (self.hasSkip) {
    [dictionary setObject: [NSNumber numberWithInteger:self.skip] forKey: @"skip"];
  }
  if (self.hasFlag) {
    [dictionary setObject: [NSNumber numberWithInteger:self.flag] forKey: @"flag"];
  }
  if (self.hasCount) {
    [dictionary setObject: [NSNumber numberWithInteger:self.count] forKey: @"count"];
  }
  if (self.hasUdate) {
    [dictionary setObject: self.udate forKey: @"udate"];
  }
  if (self.hasT) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.t] forKey: @"t"];
  }
  if (self.hasN) {
    [dictionary setObject: self.n forKey: @"n"];
  }
  if (self.hasS) {
    [dictionary setObject: self.s forKey: @"s"];
  }
  if (self.hasStatusSub) {
    [dictionary setObject: [NSNumber numberWithBool:self.statusSub] forKey: @"statusSub"];
  }
  if (self.hasStatusPub) {
    [dictionary setObject: [NSNumber numberWithBool:self.statusPub] forKey: @"statusPub"];
  }
  if (self.hasStatusTtl) {
    [dictionary setObject: [NSNumber numberWithInteger:self.statusTtl] forKey: @"statusTtl"];
  }
  if (self.hasUniqueId) {
    [dictionary setObject: self.uniqueId forKey: @"uniqueId"];
  }
  if (self.hasTargetClientId) {
    [dictionary setObject: self.targetClientId forKey: @"targetClientId"];
  }
  if (self.hasMaxReadTimestamp) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.maxReadTimestamp] forKey: @"maxReadTimestamp"];
  }
  if (self.hasMaxAckTimestamp) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.maxAckTimestamp] forKey: @"maxAckTimestamp"];
  }
  if (self.hasQueryAllMembers) {
    [dictionary setObject: [NSNumber numberWithBool:self.queryAllMembers] forKey: @"queryAllMembers"];
  }
  for (AVIMMaxReadTuple* element in self.maxReadTuplesArray) {
    NSMutableDictionary *elementDictionary = [NSMutableDictionary dictionary];
    [element storeInDictionary:elementDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:elementDictionary] forKey:@"maxReadTuples"];
  }
  [dictionary setObject:self.cids forKey: @"cids"];
  if (self.hasResults) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.results storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"results"];
  }
  if (self.hasWhere) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.where storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"where"];
  }
  if (self.hasAttr) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.attr storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"attr"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[AVIMConvCommand class]]) {
    return NO;
  }
  AVIMConvCommand *otherMessage = other;
  return
      [self.mArray isEqualToArray:otherMessage.mArray] &&
      self.hasTransient == otherMessage.hasTransient &&
      (!self.hasTransient || self.transient == otherMessage.transient) &&
      self.hasUnique == otherMessage.hasUnique &&
      (!self.hasUnique || self.unique == otherMessage.unique) &&
      self.hasCid == otherMessage.hasCid &&
      (!self.hasCid || [self.cid isEqual:otherMessage.cid]) &&
      self.hasCdate == otherMessage.hasCdate &&
      (!self.hasCdate || [self.cdate isEqual:otherMessage.cdate]) &&
      self.hasInitBy == otherMessage.hasInitBy &&
      (!self.hasInitBy || [self.pb_initBy isEqual:otherMessage.pb_initBy]) &&
      self.hasSort == otherMessage.hasSort &&
      (!self.hasSort || [self.sort isEqual:otherMessage.sort]) &&
      self.hasLimit == otherMessage.hasLimit &&
      (!self.hasLimit || self.limit == otherMessage.limit) &&
      self.hasSkip == otherMessage.hasSkip &&
      (!self.hasSkip || self.skip == otherMessage.skip) &&
      self.hasFlag == otherMessage.hasFlag &&
      (!self.hasFlag || self.flag == otherMessage.flag) &&
      self.hasCount == otherMessage.hasCount &&
      (!self.hasCount || self.count == otherMessage.count) &&
      self.hasUdate == otherMessage.hasUdate &&
      (!self.hasUdate || [self.udate isEqual:otherMessage.udate]) &&
      self.hasT == otherMessage.hasT &&
      (!self.hasT || self.t == otherMessage.t) &&
      self.hasN == otherMessage.hasN &&
      (!self.hasN || [self.n isEqual:otherMessage.n]) &&
      self.hasS == otherMessage.hasS &&
      (!self.hasS || [self.s isEqual:otherMessage.s]) &&
      self.hasStatusSub == otherMessage.hasStatusSub &&
      (!self.hasStatusSub || self.statusSub == otherMessage.statusSub) &&
      self.hasStatusPub == otherMessage.hasStatusPub &&
      (!self.hasStatusPub || self.statusPub == otherMessage.statusPub) &&
      self.hasStatusTtl == otherMessage.hasStatusTtl &&
      (!self.hasStatusTtl || self.statusTtl == otherMessage.statusTtl) &&
      self.hasUniqueId == otherMessage.hasUniqueId &&
      (!self.hasUniqueId || [self.uniqueId isEqual:otherMessage.uniqueId]) &&
      self.hasTargetClientId == otherMessage.hasTargetClientId &&
      (!self.hasTargetClientId || [self.targetClientId isEqual:otherMessage.targetClientId]) &&
      self.hasMaxReadTimestamp == otherMessage.hasMaxReadTimestamp &&
      (!self.hasMaxReadTimestamp || self.maxReadTimestamp == otherMessage.maxReadTimestamp) &&
      self.hasMaxAckTimestamp == otherMessage.hasMaxAckTimestamp &&
      (!self.hasMaxAckTimestamp || self.maxAckTimestamp == otherMessage.maxAckTimestamp) &&
      self.hasQueryAllMembers == otherMessage.hasQueryAllMembers &&
      (!self.hasQueryAllMembers || self.queryAllMembers == otherMessage.queryAllMembers) &&
      [self.maxReadTuplesArray isEqualToArray:otherMessage.maxReadTuplesArray] &&
      [self.cidsArray isEqualToArray:otherMessage.cidsArray] &&
      self.hasResults == otherMessage.hasResults &&
      (!self.hasResults || [self.results isEqual:otherMessage.results]) &&
      self.hasWhere == otherMessage.hasWhere &&
      (!self.hasWhere || [self.where isEqual:otherMessage.where]) &&
      self.hasAttr == otherMessage.hasAttr &&
      (!self.hasAttr || [self.attr isEqual:otherMessage.attr]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  [self.mArray enumerateObjectsUsingBlock:^(NSString *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  if (self.hasTransient) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.transient] hash];
  }
  if (self.hasUnique) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.unique] hash];
  }
  if (self.hasCid) {
    hashCode = hashCode * 31 + [self.cid hash];
  }
  if (self.hasCdate) {
    hashCode = hashCode * 31 + [self.cdate hash];
  }
  if (self.hasInitBy) {
    hashCode = hashCode * 31 + [self.pb_initBy hash];
  }
  if (self.hasSort) {
    hashCode = hashCode * 31 + [self.sort hash];
  }
  if (self.hasLimit) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.limit] hash];
  }
  if (self.hasSkip) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.skip] hash];
  }
  if (self.hasFlag) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.flag] hash];
  }
  if (self.hasCount) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.count] hash];
  }
  if (self.hasUdate) {
    hashCode = hashCode * 31 + [self.udate hash];
  }
  if (self.hasT) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.t] hash];
  }
  if (self.hasN) {
    hashCode = hashCode * 31 + [self.n hash];
  }
  if (self.hasS) {
    hashCode = hashCode * 31 + [self.s hash];
  }
  if (self.hasStatusSub) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.statusSub] hash];
  }
  if (self.hasStatusPub) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.statusPub] hash];
  }
  if (self.hasStatusTtl) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.statusTtl] hash];
  }
  if (self.hasUniqueId) {
    hashCode = hashCode * 31 + [self.uniqueId hash];
  }
  if (self.hasTargetClientId) {
    hashCode = hashCode * 31 + [self.targetClientId hash];
  }
  if (self.hasMaxReadTimestamp) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.maxReadTimestamp] hash];
  }
  if (self.hasMaxAckTimestamp) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.maxAckTimestamp] hash];
  }
  if (self.hasQueryAllMembers) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.queryAllMembers] hash];
  }
  [self.maxReadTuplesArray enumerateObjectsUsingBlock:^(AVIMMaxReadTuple *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  [self.cidsArray enumerateObjectsUsingBlock:^(NSString *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  if (self.hasResults) {
    hashCode = hashCode * 31 + [self.results hash];
  }
  if (self.hasWhere) {
    hashCode = hashCode * 31 + [self.where hash];
  }
  if (self.hasAttr) {
    hashCode = hashCode * 31 + [self.attr hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface AVIMConvCommandBuilder()
@property (strong) AVIMConvCommand* resultConvCommand;
@end

@implementation AVIMConvCommandBuilder
@synthesize resultConvCommand;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultConvCommand = [[AVIMConvCommand alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultConvCommand;
}
- (AVIMConvCommandBuilder*) clear {
  self.resultConvCommand = [[AVIMConvCommand alloc] init];
  return self;
}
- (AVIMConvCommandBuilder*) clone {
  return [AVIMConvCommand builderWithPrototype:resultConvCommand];
}
- (AVIMConvCommand*) defaultInstance {
  return [AVIMConvCommand defaultInstance];
}
- (AVIMConvCommand*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (AVIMConvCommand*) buildPartial {
  AVIMConvCommand* returnMe = resultConvCommand;
  self.resultConvCommand = nil;
  return returnMe;
}
- (AVIMConvCommandBuilder*) mergeFrom:(AVIMConvCommand*) other {
  if (other == [AVIMConvCommand defaultInstance]) {
    return self;
  }
  if (other.mArray.count > 0) {
    if (resultConvCommand.mArray == nil) {
      resultConvCommand.mArray = [[NSMutableArray alloc] initWithArray:other.mArray];
    } else {
      [resultConvCommand.mArray addObjectsFromArray:other.mArray];
    }
  }
  if (other.hasTransient) {
    [self setTransient:other.transient];
  }
  if (other.hasUnique) {
    [self setUnique:other.unique];
  }
  if (other.hasCid) {
    [self setCid:other.cid];
  }
  if (other.hasCdate) {
    [self setCdate:other.cdate];
  }
  if (other.hasInitBy) {
    [self setInitBy:other.pb_initBy];
  }
  if (other.hasSort) {
    [self setSort:other.sort];
  }
  if (other.hasLimit) {
    [self setLimit:other.limit];
  }
  if (other.hasSkip) {
    [self setSkip:other.skip];
  }
  if (other.hasFlag) {
    [self setFlag:other.flag];
  }
  if (other.hasCount) {
    [self setCount:other.count];
  }
  if (other.hasUdate) {
    [self setUdate:other.udate];
  }
  if (other.hasT) {
    [self setT:other.t];
  }
  if (other.hasN) {
    [self setN:other.n];
  }
  if (other.hasS) {
    [self setS:other.s];
  }
  if (other.hasStatusSub) {
    [self setStatusSub:other.statusSub];
  }
  if (other.hasStatusPub) {
    [self setStatusPub:other.statusPub];
  }
  if (other.hasStatusTtl) {
    [self setStatusTtl:other.statusTtl];
  }
  if (other.hasUniqueId) {
    [self setUniqueId:other.uniqueId];
  }
  if (other.hasTargetClientId) {
    [self setTargetClientId:other.targetClientId];
  }
  if (other.hasMaxReadTimestamp) {
    [self setMaxReadTimestamp:other.maxReadTimestamp];
  }
  if (other.hasMaxAckTimestamp) {
    [self setMaxAckTimestamp:other.maxAckTimestamp];
  }
  if (other.hasQueryAllMembers) {
    [self setQueryAllMembers:other.queryAllMembers];
  }
  if (other.maxReadTuplesArray.count > 0) {
    if (resultConvCommand.maxReadTuplesArray == nil) {
      resultConvCommand.maxReadTuplesArray = [[NSMutableArray alloc] initWithArray:other.maxReadTuplesArray];
    } else {
      [resultConvCommand.maxReadTuplesArray addObjectsFromArray:other.maxReadTuplesArray];
    }
  }
  if (other.cidsArray.count > 0) {
    if (resultConvCommand.cidsArray == nil) {
      resultConvCommand.cidsArray = [[NSMutableArray alloc] initWithArray:other.cidsArray];
    } else {
      [resultConvCommand.cidsArray addObjectsFromArray:other.cidsArray];
    }
  }
  if (other.hasResults) {
    [self mergeResults:other.results];
  }
  if (other.hasWhere) {
    [self mergeWhere:other.where];
  }
  if (other.hasAttr) {
    [self mergeAttr:other.attr];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (AVIMConvCommandBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (AVIMConvCommandBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self addM:[input readString]];
        break;
      }
      case 16: {
        [self setTransient:[input readBool]];
        break;
      }
      case 24: {
        [self setUnique:[input readBool]];
        break;
      }
      case 34: {
        [self setCid:[input readString]];
        break;
      }
      case 42: {
        [self setCdate:[input readString]];
        break;
      }
      case 50: {
        [self setInitBy:[input readString]];
        break;
      }
      case 58: {
        [self setSort:[input readString]];
        break;
      }
      case 64: {
        [self setLimit:[input readInt32]];
        break;
      }
      case 72: {
        [self setSkip:[input readInt32]];
        break;
      }
      case 80: {
        [self setFlag:[input readInt32]];
        break;
      }
      case 88: {
        [self setCount:[input readInt32]];
        break;
      }
      case 98: {
        [self setUdate:[input readString]];
        break;
      }
      case 104: {
        [self setT:[input readInt64]];
        break;
      }
      case 114: {
        [self setN:[input readString]];
        break;
      }
      case 122: {
        [self setS:[input readString]];
        break;
      }
      case 128: {
        [self setStatusSub:[input readBool]];
        break;
      }
      case 136: {
        [self setStatusPub:[input readBool]];
        break;
      }
      case 144: {
        [self setStatusTtl:[input readInt32]];
        break;
      }
      case 154: {
        [self setUniqueId:[input readString]];
        break;
      }
      case 162: {
        [self setTargetClientId:[input readString]];
        break;
      }
      case 168: {
        [self setMaxReadTimestamp:[input readInt64]];
        break;
      }
      case 176: {
        [self setMaxAckTimestamp:[input readInt64]];
        break;
      }
      case 184: {
        [self setQueryAllMembers:[input readBool]];
        break;
      }
      case 194: {
        AVIMMaxReadTupleBuilder* subBuilder = [AVIMMaxReadTuple builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addMaxReadTuples:[subBuilder buildPartial]];
        break;
      }
      case 202: {
        [self addCids:[input readString]];
        break;
      }
      case 802: {
        AVIMJsonObjectMessageBuilder* subBuilder = [AVIMJsonObjectMessage builder];
        if (self.hasResults) {
          [subBuilder mergeFrom:self.results];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setResults:[subBuilder buildPartial]];
        break;
      }
      case 810: {
        AVIMJsonObjectMessageBuilder* subBuilder = [AVIMJsonObjectMessage builder];
        if (self.hasWhere) {
          [subBuilder mergeFrom:self.where];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setWhere:[subBuilder buildPartial]];
        break;
      }
      case 826: {
        AVIMJsonObjectMessageBuilder* subBuilder = [AVIMJsonObjectMessage builder];
        if (self.hasAttr) {
          [subBuilder mergeFrom:self.attr];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setAttr:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (NSMutableArray *)m {
  return resultConvCommand.mArray;
}
- (NSString*)mAtIndex:(NSUInteger)index {
  return [resultConvCommand mAtIndex:index];
}
- (AVIMConvCommandBuilder *)addM:(NSString*)value {
  if (resultConvCommand.mArray == nil) {
    resultConvCommand.mArray = [[NSMutableArray alloc]init];
  }
  [resultConvCommand.mArray addObject:value];
  return self;
}
- (AVIMConvCommandBuilder *)setMArray:(NSArray *)array {
  resultConvCommand.mArray = [[NSMutableArray alloc] initWithArray:array];
  return self;
}
- (AVIMConvCommandBuilder *)clearM {
  resultConvCommand.mArray = nil;
  return self;
}
- (BOOL) hasTransient {
  return resultConvCommand.hasTransient;
}
- (BOOL) transient {
  return resultConvCommand.transient;
}
- (AVIMConvCommandBuilder*) setTransient:(BOOL) value {
  resultConvCommand.hasTransient = YES;
  resultConvCommand.transient = value;
  return self;
}
- (AVIMConvCommandBuilder*) clearTransient {
  resultConvCommand.hasTransient = NO;
  resultConvCommand.transient = NO;
  return self;
}
- (BOOL) hasUnique {
  return resultConvCommand.hasUnique;
}
- (BOOL) unique {
  return resultConvCommand.unique;
}
- (AVIMConvCommandBuilder*) setUnique:(BOOL) value {
  resultConvCommand.hasUnique = YES;
  resultConvCommand.unique = value;
  return self;
}
- (AVIMConvCommandBuilder*) clearUnique {
  resultConvCommand.hasUnique = NO;
  resultConvCommand.unique = NO;
  return self;
}
- (BOOL) hasCid {
  return resultConvCommand.hasCid;
}
- (NSString*) cid {
  return resultConvCommand.cid;
}
- (AVIMConvCommandBuilder*) setCid:(NSString*) value {
  resultConvCommand.hasCid = YES;
  resultConvCommand.cid = value;
  return self;
}
- (AVIMConvCommandBuilder*) clearCid {
  resultConvCommand.hasCid = NO;
  resultConvCommand.cid = @"";
  return self;
}
- (BOOL) hasCdate {
  return resultConvCommand.hasCdate;
}
- (NSString*) cdate {
  return resultConvCommand.cdate;
}
- (AVIMConvCommandBuilder*) setCdate:(NSString*) value {
  resultConvCommand.hasCdate = YES;
  resultConvCommand.cdate = value;
  return self;
}
- (AVIMConvCommandBuilder*) clearCdate {
  resultConvCommand.hasCdate = NO;
  resultConvCommand.cdate = @"";
  return self;
}
- (BOOL) hasInitBy {
  return resultConvCommand.hasInitBy;
}
- (NSString*) pb_initBy {
  return resultConvCommand.pb_initBy;
}
- (AVIMConvCommandBuilder*) setInitBy:(NSString*) value {
  resultConvCommand.hasInitBy = YES;
  resultConvCommand.pb_initBy = value;
  return self;
}
- (AVIMConvCommandBuilder*) clearInitBy {
  resultConvCommand.hasInitBy = NO;
  resultConvCommand.pb_initBy = @"";
  return self;
}
- (BOOL) hasSort {
  return resultConvCommand.hasSort;
}
- (NSString*) sort {
  return resultConvCommand.sort;
}
- (AVIMConvCommandBuilder*) setSort:(NSString*) value {
  resultConvCommand.hasSort = YES;
  resultConvCommand.sort = value;
  return self;
}
- (AVIMConvCommandBuilder*) clearSort {
  resultConvCommand.hasSort = NO;
  resultConvCommand.sort = @"";
  return self;
}
- (BOOL) hasLimit {
  return resultConvCommand.hasLimit;
}
- (SInt32) limit {
  return resultConvCommand.limit;
}
- (AVIMConvCommandBuilder*) setLimit:(SInt32) value {
  resultConvCommand.hasLimit = YES;
  resultConvCommand.limit = value;
  return self;
}
- (AVIMConvCommandBuilder*) clearLimit {
  resultConvCommand.hasLimit = NO;
  resultConvCommand.limit = 0;
  return self;
}
- (BOOL) hasSkip {
  return resultConvCommand.hasSkip;
}
- (SInt32) skip {
  return resultConvCommand.skip;
}
- (AVIMConvCommandBuilder*) setSkip:(SInt32) value {
  resultConvCommand.hasSkip = YES;
  resultConvCommand.skip = value;
  return self;
}
- (AVIMConvCommandBuilder*) clearSkip {
  resultConvCommand.hasSkip = NO;
  resultConvCommand.skip = 0;
  return self;
}
- (BOOL) hasFlag {
  return resultConvCommand.hasFlag;
}
- (SInt32) flag {
  return resultConvCommand.flag;
}
- (AVIMConvCommandBuilder*) setFlag:(SInt32) value {
  resultConvCommand.hasFlag = YES;
  resultConvCommand.flag = value;
  return self;
}
- (AVIMConvCommandBuilder*) clearFlag {
  resultConvCommand.hasFlag = NO;
  resultConvCommand.flag = 0;
  return self;
}
- (BOOL) hasCount {
  return resultConvCommand.hasCount;
}
- (SInt32) count {
  return resultConvCommand.count;
}
- (AVIMConvCommandBuilder*) setCount:(SInt32) value {
  resultConvCommand.hasCount = YES;
  resultConvCommand.count = value;
  return self;
}
- (AVIMConvCommandBuilder*) clearCount {
  resultConvCommand.hasCount = NO;
  resultConvCommand.count = 0;
  return self;
}
- (BOOL) hasUdate {
  return resultConvCommand.hasUdate;
}
- (NSString*) udate {
  return resultConvCommand.udate;
}
- (AVIMConvCommandBuilder*) setUdate:(NSString*) value {
  resultConvCommand.hasUdate = YES;
  resultConvCommand.udate = value;
  return self;
}
- (AVIMConvCommandBuilder*) clearUdate {
  resultConvCommand.hasUdate = NO;
  resultConvCommand.udate = @"";
  return self;
}
- (BOOL) hasT {
  return resultConvCommand.hasT;
}
- (SInt64) t {
  return resultConvCommand.t;
}
- (AVIMConvCommandBuilder*) setT:(SInt64) value {
  resultConvCommand.hasT = YES;
  resultConvCommand.t = value;
  return self;
}
- (AVIMConvCommandBuilder*) clearT {
  resultConvCommand.hasT = NO;
  resultConvCommand.t = 0L;
  return self;
}
- (BOOL) hasN {
  return resultConvCommand.hasN;
}
- (NSString*) n {
  return resultConvCommand.n;
}
- (AVIMConvCommandBuilder*) setN:(NSString*) value {
  resultConvCommand.hasN = YES;
  resultConvCommand.n = value;
  return self;
}
- (AVIMConvCommandBuilder*) clearN {
  resultConvCommand.hasN = NO;
  resultConvCommand.n = @"";
  return self;
}
- (BOOL) hasS {
  return resultConvCommand.hasS;
}
- (NSString*) s {
  return resultConvCommand.s;
}
- (AVIMConvCommandBuilder*) setS:(NSString*) value {
  resultConvCommand.hasS = YES;
  resultConvCommand.s = value;
  return self;
}
- (AVIMConvCommandBuilder*) clearS {
  resultConvCommand.hasS = NO;
  resultConvCommand.s = @"";
  return self;
}
- (BOOL) hasStatusSub {
  return resultConvCommand.hasStatusSub;
}
- (BOOL) statusSub {
  return resultConvCommand.statusSub;
}
- (AVIMConvCommandBuilder*) setStatusSub:(BOOL) value {
  resultConvCommand.hasStatusSub = YES;
  resultConvCommand.statusSub = value;
  return self;
}
- (AVIMConvCommandBuilder*) clearStatusSub {
  resultConvCommand.hasStatusSub = NO;
  resultConvCommand.statusSub = NO;
  return self;
}
- (BOOL) hasStatusPub {
  return resultConvCommand.hasStatusPub;
}
- (BOOL) statusPub {
  return resultConvCommand.statusPub;
}
- (AVIMConvCommandBuilder*) setStatusPub:(BOOL) value {
  resultConvCommand.hasStatusPub = YES;
  resultConvCommand.statusPub = value;
  return self;
}
- (AVIMConvCommandBuilder*) clearStatusPub {
  resultConvCommand.hasStatusPub = NO;
  resultConvCommand.statusPub = NO;
  return self;
}
- (BOOL) hasStatusTtl {
  return resultConvCommand.hasStatusTtl;
}
- (SInt32) statusTtl {
  return resultConvCommand.statusTtl;
}
- (AVIMConvCommandBuilder*) setStatusTtl:(SInt32) value {
  resultConvCommand.hasStatusTtl = YES;
  resultConvCommand.statusTtl = value;
  return self;
}
- (AVIMConvCommandBuilder*) clearStatusTtl {
  resultConvCommand.hasStatusTtl = NO;
  resultConvCommand.statusTtl = 0;
  return self;
}
- (BOOL) hasUniqueId {
  return resultConvCommand.hasUniqueId;
}
- (NSString*) uniqueId {
  return resultConvCommand.uniqueId;
}
- (AVIMConvCommandBuilder*) setUniqueId:(NSString*) value {
  resultConvCommand.hasUniqueId = YES;
  resultConvCommand.uniqueId = value;
  return self;
}
- (AVIMConvCommandBuilder*) clearUniqueId {
  resultConvCommand.hasUniqueId = NO;
  resultConvCommand.uniqueId = @"";
  return self;
}
- (BOOL) hasTargetClientId {
  return resultConvCommand.hasTargetClientId;
}
- (NSString*) targetClientId {
  return resultConvCommand.targetClientId;
}
- (AVIMConvCommandBuilder*) setTargetClientId:(NSString*) value {
  resultConvCommand.hasTargetClientId = YES;
  resultConvCommand.targetClientId = value;
  return self;
}
- (AVIMConvCommandBuilder*) clearTargetClientId {
  resultConvCommand.hasTargetClientId = NO;
  resultConvCommand.targetClientId = @"";
  return self;
}
- (BOOL) hasMaxReadTimestamp {
  return resultConvCommand.hasMaxReadTimestamp;
}
- (SInt64) maxReadTimestamp {
  return resultConvCommand.maxReadTimestamp;
}
- (AVIMConvCommandBuilder*) setMaxReadTimestamp:(SInt64) value {
  resultConvCommand.hasMaxReadTimestamp = YES;
  resultConvCommand.maxReadTimestamp = value;
  return self;
}
- (AVIMConvCommandBuilder*) clearMaxReadTimestamp {
  resultConvCommand.hasMaxReadTimestamp = NO;
  resultConvCommand.maxReadTimestamp = 0L;
  return self;
}
- (BOOL) hasMaxAckTimestamp {
  return resultConvCommand.hasMaxAckTimestamp;
}
- (SInt64) maxAckTimestamp {
  return resultConvCommand.maxAckTimestamp;
}
- (AVIMConvCommandBuilder*) setMaxAckTimestamp:(SInt64) value {
  resultConvCommand.hasMaxAckTimestamp = YES;
  resultConvCommand.maxAckTimestamp = value;
  return self;
}
- (AVIMConvCommandBuilder*) clearMaxAckTimestamp {
  resultConvCommand.hasMaxAckTimestamp = NO;
  resultConvCommand.maxAckTimestamp = 0L;
  return self;
}
- (BOOL) hasQueryAllMembers {
  return resultConvCommand.hasQueryAllMembers;
}
- (BOOL) queryAllMembers {
  return resultConvCommand.queryAllMembers;
}
- (AVIMConvCommandBuilder*) setQueryAllMembers:(BOOL) value {
  resultConvCommand.hasQueryAllMembers = YES;
  resultConvCommand.queryAllMembers = value;
  return self;
}
- (AVIMConvCommandBuilder*) clearQueryAllMembers {
  resultConvCommand.hasQueryAllMembers = NO;
  resultConvCommand.queryAllMembers = NO;
  return self;
}
- (NSMutableArray *)maxReadTuples {
  return resultConvCommand.maxReadTuplesArray;
}
- (AVIMMaxReadTuple*)maxReadTuplesAtIndex:(NSUInteger)index {
  return [resultConvCommand maxReadTuplesAtIndex:index];
}
- (AVIMConvCommandBuilder *)addMaxReadTuples:(AVIMMaxReadTuple*)value {
  if (resultConvCommand.maxReadTuplesArray == nil) {
    resultConvCommand.maxReadTuplesArray = [[NSMutableArray alloc]init];
  }
  [resultConvCommand.maxReadTuplesArray addObject:value];
  return self;
}
- (AVIMConvCommandBuilder *)setMaxReadTuplesArray:(NSArray *)array {
  resultConvCommand.maxReadTuplesArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (AVIMConvCommandBuilder *)clearMaxReadTuples {
  resultConvCommand.maxReadTuplesArray = nil;
  return self;
}
- (NSMutableArray *)cids {
  return resultConvCommand.cidsArray;
}
- (NSString*)cidsAtIndex:(NSUInteger)index {
  return [resultConvCommand cidsAtIndex:index];
}
- (AVIMConvCommandBuilder *)addCids:(NSString*)value {
  if (resultConvCommand.cidsArray == nil) {
    resultConvCommand.cidsArray = [[NSMutableArray alloc]init];
  }
  [resultConvCommand.cidsArray addObject:value];
  return self;
}
- (AVIMConvCommandBuilder *)setCidsArray:(NSArray *)array {
  resultConvCommand.cidsArray = [[NSMutableArray alloc] initWithArray:array];
  return self;
}
- (AVIMConvCommandBuilder *)clearCids {
  resultConvCommand.cidsArray = nil;
  return self;
}
- (BOOL) hasResults {
  return resultConvCommand.hasResults;
}
- (AVIMJsonObjectMessage*) results {
  return resultConvCommand.results;
}
- (AVIMConvCommandBuilder*) setResults:(AVIMJsonObjectMessage*) value {
  resultConvCommand.hasResults = YES;
  resultConvCommand.results = value;
  return self;
}
- (AVIMConvCommandBuilder*) setResultsBuilder:(AVIMJsonObjectMessageBuilder*) builderForValue {
  return [self setResults:[builderForValue build]];
}
- (AVIMConvCommandBuilder*) mergeResults:(AVIMJsonObjectMessage*) value {
  if (resultConvCommand.hasResults &&
      resultConvCommand.results != [AVIMJsonObjectMessage defaultInstance]) {
    resultConvCommand.results =
      [[[AVIMJsonObjectMessage builderWithPrototype:resultConvCommand.results] mergeFrom:value] buildPartial];
  } else {
    resultConvCommand.results = value;
  }
  resultConvCommand.hasResults = YES;
  return self;
}
- (AVIMConvCommandBuilder*) clearResults {
  resultConvCommand.hasResults = NO;
  resultConvCommand.results = [AVIMJsonObjectMessage defaultInstance];
  return self;
}
- (BOOL) hasWhere {
  return resultConvCommand.hasWhere;
}
- (AVIMJsonObjectMessage*) where {
  return resultConvCommand.where;
}
- (AVIMConvCommandBuilder*) setWhere:(AVIMJsonObjectMessage*) value {
  resultConvCommand.hasWhere = YES;
  resultConvCommand.where = value;
  return self;
}
- (AVIMConvCommandBuilder*) setWhereBuilder:(AVIMJsonObjectMessageBuilder*) builderForValue {
  return [self setWhere:[builderForValue build]];
}
- (AVIMConvCommandBuilder*) mergeWhere:(AVIMJsonObjectMessage*) value {
  if (resultConvCommand.hasWhere &&
      resultConvCommand.where != [AVIMJsonObjectMessage defaultInstance]) {
    resultConvCommand.where =
      [[[AVIMJsonObjectMessage builderWithPrototype:resultConvCommand.where] mergeFrom:value] buildPartial];
  } else {
    resultConvCommand.where = value;
  }
  resultConvCommand.hasWhere = YES;
  return self;
}
- (AVIMConvCommandBuilder*) clearWhere {
  resultConvCommand.hasWhere = NO;
  resultConvCommand.where = [AVIMJsonObjectMessage defaultInstance];
  return self;
}
- (BOOL) hasAttr {
  return resultConvCommand.hasAttr;
}
- (AVIMJsonObjectMessage*) attr {
  return resultConvCommand.attr;
}
- (AVIMConvCommandBuilder*) setAttr:(AVIMJsonObjectMessage*) value {
  resultConvCommand.hasAttr = YES;
  resultConvCommand.attr = value;
  return self;
}
- (AVIMConvCommandBuilder*) setAttrBuilder:(AVIMJsonObjectMessageBuilder*) builderForValue {
  return [self setAttr:[builderForValue build]];
}
- (AVIMConvCommandBuilder*) mergeAttr:(AVIMJsonObjectMessage*) value {
  if (resultConvCommand.hasAttr &&
      resultConvCommand.attr != [AVIMJsonObjectMessage defaultInstance]) {
    resultConvCommand.attr =
      [[[AVIMJsonObjectMessage builderWithPrototype:resultConvCommand.attr] mergeFrom:value] buildPartial];
  } else {
    resultConvCommand.attr = value;
  }
  resultConvCommand.hasAttr = YES;
  return self;
}
- (AVIMConvCommandBuilder*) clearAttr {
  resultConvCommand.hasAttr = NO;
  resultConvCommand.attr = [AVIMJsonObjectMessage defaultInstance];
  return self;
}
@end

@interface AVIMRoomCommand ()
@property (strong) NSString* roomId;
@property (strong) NSString* s;
@property SInt64 t;
@property (strong) NSString* n;
@property BOOL transient;
@property (strong) NSMutableArray * roomPeerIdsArray;
@property (strong) NSString* byPeerId;
@end

@implementation AVIMRoomCommand

- (BOOL) hasRoomId {
  return !!hasRoomId_;
}
- (void) setHasRoomId:(BOOL) _value_ {
  hasRoomId_ = !!_value_;
}
@synthesize roomId;
- (BOOL) hasS {
  return !!hasS_;
}
- (void) setHasS:(BOOL) _value_ {
  hasS_ = !!_value_;
}
@synthesize s;
- (BOOL) hasT {
  return !!hasT_;
}
- (void) setHasT:(BOOL) _value_ {
  hasT_ = !!_value_;
}
@synthesize t;
- (BOOL) hasN {
  return !!hasN_;
}
- (void) setHasN:(BOOL) _value_ {
  hasN_ = !!_value_;
}
@synthesize n;
- (BOOL) hasTransient {
  return !!hasTransient_;
}
- (void) setHasTransient:(BOOL) _value_ {
  hasTransient_ = !!_value_;
}
- (BOOL) transient {
  return !!transient_;
}
- (void) setTransient:(BOOL) _value_ {
  transient_ = !!_value_;
}
@synthesize roomPeerIdsArray;
@dynamic roomPeerIds;
- (BOOL) hasByPeerId {
  return !!hasByPeerId_;
}
- (void) setHasByPeerId:(BOOL) _value_ {
  hasByPeerId_ = !!_value_;
}
@synthesize byPeerId;
- (instancetype) init {
  if ((self = [super init])) {
    self.roomId = @"";
    self.s = @"";
    self.t = 0L;
    self.n = @"";
    self.transient = NO;
    self.byPeerId = @"";
  }
  return self;
}
static AVIMRoomCommand* defaultAVIMRoomCommandInstance = nil;
+ (void) initialize {
  if (self == [AVIMRoomCommand class]) {
    defaultAVIMRoomCommandInstance = [[AVIMRoomCommand alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultAVIMRoomCommandInstance;
}
- (instancetype) defaultInstance {
  return defaultAVIMRoomCommandInstance;
}
- (NSArray *)roomPeerIds {
  return roomPeerIdsArray;
}
- (NSString*)roomPeerIdsAtIndex:(NSUInteger)index {
  return [roomPeerIdsArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasRoomId) {
    [output writeString:1 value:self.roomId];
  }
  if (self.hasS) {
    [output writeString:2 value:self.s];
  }
  if (self.hasT) {
    [output writeInt64:3 value:self.t];
  }
  if (self.hasN) {
    [output writeString:4 value:self.n];
  }
  if (self.hasTransient) {
    [output writeBool:5 value:self.transient];
  }
  [self.roomPeerIdsArray enumerateObjectsUsingBlock:^(NSString *element, NSUInteger idx, BOOL *stop) {
    [output writeString:6 value:element];
  }];
  if (self.hasByPeerId) {
    [output writeString:7 value:self.byPeerId];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasRoomId) {
    size_ += computeStringSize(1, self.roomId);
  }
  if (self.hasS) {
    size_ += computeStringSize(2, self.s);
  }
  if (self.hasT) {
    size_ += computeInt64Size(3, self.t);
  }
  if (self.hasN) {
    size_ += computeStringSize(4, self.n);
  }
  if (self.hasTransient) {
    size_ += computeBoolSize(5, self.transient);
  }
  {
    __block SInt32 dataSize = 0;
    const NSUInteger count = self.roomPeerIdsArray.count;
    [self.roomPeerIdsArray enumerateObjectsUsingBlock:^(NSString *element, NSUInteger idx, BOOL *stop) {
      dataSize += computeStringSizeNoTag(element);
    }];
    size_ += dataSize;
    size_ += (SInt32)(1 * count);
  }
  if (self.hasByPeerId) {
    size_ += computeStringSize(7, self.byPeerId);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (AVIMRoomCommand*) parseFromData:(NSData*) data {
  return (AVIMRoomCommand*)[[[AVIMRoomCommand builder] mergeFromData:data] build];
}
+ (AVIMRoomCommand*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (AVIMRoomCommand*)[[[AVIMRoomCommand builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (AVIMRoomCommand*) parseFromInputStream:(NSInputStream*) input {
  return (AVIMRoomCommand*)[[[AVIMRoomCommand builder] mergeFromInputStream:input] build];
}
+ (AVIMRoomCommand*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (AVIMRoomCommand*)[[[AVIMRoomCommand builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (AVIMRoomCommand*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (AVIMRoomCommand*)[[[AVIMRoomCommand builder] mergeFromCodedInputStream:input] build];
}
+ (AVIMRoomCommand*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (AVIMRoomCommand*)[[[AVIMRoomCommand builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (AVIMRoomCommandBuilder*) builder {
  return [[AVIMRoomCommandBuilder alloc] init];
}
+ (AVIMRoomCommandBuilder*) builderWithPrototype:(AVIMRoomCommand*) prototype {
  return [[AVIMRoomCommand builder] mergeFrom:prototype];
}
- (AVIMRoomCommandBuilder*) builder {
  return [AVIMRoomCommand builder];
}
- (AVIMRoomCommandBuilder*) toBuilder {
  return [AVIMRoomCommand builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasRoomId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"roomId", self.roomId];
  }
  if (self.hasS) {
    [output appendFormat:@"%@%@: %@\n", indent, @"s", self.s];
  }
  if (self.hasT) {
    [output appendFormat:@"%@%@: %@\n", indent, @"t", [NSNumber numberWithLongLong:self.t]];
  }
  if (self.hasN) {
    [output appendFormat:@"%@%@: %@\n", indent, @"n", self.n];
  }
  if (self.hasTransient) {
    [output appendFormat:@"%@%@: %@\n", indent, @"transient", [NSNumber numberWithBool:self.transient]];
  }
  [self.roomPeerIdsArray enumerateObjectsUsingBlock:^(id obj, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@: %@\n", indent, @"roomPeerIds", obj];
  }];
  if (self.hasByPeerId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"byPeerId", self.byPeerId];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasRoomId) {
    [dictionary setObject: self.roomId forKey: @"roomId"];
  }
  if (self.hasS) {
    [dictionary setObject: self.s forKey: @"s"];
  }
  if (self.hasT) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.t] forKey: @"t"];
  }
  if (self.hasN) {
    [dictionary setObject: self.n forKey: @"n"];
  }
  if (self.hasTransient) {
    [dictionary setObject: [NSNumber numberWithBool:self.transient] forKey: @"transient"];
  }
  [dictionary setObject:self.roomPeerIds forKey: @"roomPeerIds"];
  if (self.hasByPeerId) {
    [dictionary setObject: self.byPeerId forKey: @"byPeerId"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[AVIMRoomCommand class]]) {
    return NO;
  }
  AVIMRoomCommand *otherMessage = other;
  return
      self.hasRoomId == otherMessage.hasRoomId &&
      (!self.hasRoomId || [self.roomId isEqual:otherMessage.roomId]) &&
      self.hasS == otherMessage.hasS &&
      (!self.hasS || [self.s isEqual:otherMessage.s]) &&
      self.hasT == otherMessage.hasT &&
      (!self.hasT || self.t == otherMessage.t) &&
      self.hasN == otherMessage.hasN &&
      (!self.hasN || [self.n isEqual:otherMessage.n]) &&
      self.hasTransient == otherMessage.hasTransient &&
      (!self.hasTransient || self.transient == otherMessage.transient) &&
      [self.roomPeerIdsArray isEqualToArray:otherMessage.roomPeerIdsArray] &&
      self.hasByPeerId == otherMessage.hasByPeerId &&
      (!self.hasByPeerId || [self.byPeerId isEqual:otherMessage.byPeerId]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasRoomId) {
    hashCode = hashCode * 31 + [self.roomId hash];
  }
  if (self.hasS) {
    hashCode = hashCode * 31 + [self.s hash];
  }
  if (self.hasT) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.t] hash];
  }
  if (self.hasN) {
    hashCode = hashCode * 31 + [self.n hash];
  }
  if (self.hasTransient) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.transient] hash];
  }
  [self.roomPeerIdsArray enumerateObjectsUsingBlock:^(NSString *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  if (self.hasByPeerId) {
    hashCode = hashCode * 31 + [self.byPeerId hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface AVIMRoomCommandBuilder()
@property (strong) AVIMRoomCommand* resultRoomCommand;
@end

@implementation AVIMRoomCommandBuilder
@synthesize resultRoomCommand;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultRoomCommand = [[AVIMRoomCommand alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultRoomCommand;
}
- (AVIMRoomCommandBuilder*) clear {
  self.resultRoomCommand = [[AVIMRoomCommand alloc] init];
  return self;
}
- (AVIMRoomCommandBuilder*) clone {
  return [AVIMRoomCommand builderWithPrototype:resultRoomCommand];
}
- (AVIMRoomCommand*) defaultInstance {
  return [AVIMRoomCommand defaultInstance];
}
- (AVIMRoomCommand*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (AVIMRoomCommand*) buildPartial {
  AVIMRoomCommand* returnMe = resultRoomCommand;
  self.resultRoomCommand = nil;
  return returnMe;
}
- (AVIMRoomCommandBuilder*) mergeFrom:(AVIMRoomCommand*) other {
  if (other == [AVIMRoomCommand defaultInstance]) {
    return self;
  }
  if (other.hasRoomId) {
    [self setRoomId:other.roomId];
  }
  if (other.hasS) {
    [self setS:other.s];
  }
  if (other.hasT) {
    [self setT:other.t];
  }
  if (other.hasN) {
    [self setN:other.n];
  }
  if (other.hasTransient) {
    [self setTransient:other.transient];
  }
  if (other.roomPeerIdsArray.count > 0) {
    if (resultRoomCommand.roomPeerIdsArray == nil) {
      resultRoomCommand.roomPeerIdsArray = [[NSMutableArray alloc] initWithArray:other.roomPeerIdsArray];
    } else {
      [resultRoomCommand.roomPeerIdsArray addObjectsFromArray:other.roomPeerIdsArray];
    }
  }
  if (other.hasByPeerId) {
    [self setByPeerId:other.byPeerId];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (AVIMRoomCommandBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (AVIMRoomCommandBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setRoomId:[input readString]];
        break;
      }
      case 18: {
        [self setS:[input readString]];
        break;
      }
      case 24: {
        [self setT:[input readInt64]];
        break;
      }
      case 34: {
        [self setN:[input readString]];
        break;
      }
      case 40: {
        [self setTransient:[input readBool]];
        break;
      }
      case 50: {
        [self addRoomPeerIds:[input readString]];
        break;
      }
      case 58: {
        [self setByPeerId:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasRoomId {
  return resultRoomCommand.hasRoomId;
}
- (NSString*) roomId {
  return resultRoomCommand.roomId;
}
- (AVIMRoomCommandBuilder*) setRoomId:(NSString*) value {
  resultRoomCommand.hasRoomId = YES;
  resultRoomCommand.roomId = value;
  return self;
}
- (AVIMRoomCommandBuilder*) clearRoomId {
  resultRoomCommand.hasRoomId = NO;
  resultRoomCommand.roomId = @"";
  return self;
}
- (BOOL) hasS {
  return resultRoomCommand.hasS;
}
- (NSString*) s {
  return resultRoomCommand.s;
}
- (AVIMRoomCommandBuilder*) setS:(NSString*) value {
  resultRoomCommand.hasS = YES;
  resultRoomCommand.s = value;
  return self;
}
- (AVIMRoomCommandBuilder*) clearS {
  resultRoomCommand.hasS = NO;
  resultRoomCommand.s = @"";
  return self;
}
- (BOOL) hasT {
  return resultRoomCommand.hasT;
}
- (SInt64) t {
  return resultRoomCommand.t;
}
- (AVIMRoomCommandBuilder*) setT:(SInt64) value {
  resultRoomCommand.hasT = YES;
  resultRoomCommand.t = value;
  return self;
}
- (AVIMRoomCommandBuilder*) clearT {
  resultRoomCommand.hasT = NO;
  resultRoomCommand.t = 0L;
  return self;
}
- (BOOL) hasN {
  return resultRoomCommand.hasN;
}
- (NSString*) n {
  return resultRoomCommand.n;
}
- (AVIMRoomCommandBuilder*) setN:(NSString*) value {
  resultRoomCommand.hasN = YES;
  resultRoomCommand.n = value;
  return self;
}
- (AVIMRoomCommandBuilder*) clearN {
  resultRoomCommand.hasN = NO;
  resultRoomCommand.n = @"";
  return self;
}
- (BOOL) hasTransient {
  return resultRoomCommand.hasTransient;
}
- (BOOL) transient {
  return resultRoomCommand.transient;
}
- (AVIMRoomCommandBuilder*) setTransient:(BOOL) value {
  resultRoomCommand.hasTransient = YES;
  resultRoomCommand.transient = value;
  return self;
}
- (AVIMRoomCommandBuilder*) clearTransient {
  resultRoomCommand.hasTransient = NO;
  resultRoomCommand.transient = NO;
  return self;
}
- (NSMutableArray *)roomPeerIds {
  return resultRoomCommand.roomPeerIdsArray;
}
- (NSString*)roomPeerIdsAtIndex:(NSUInteger)index {
  return [resultRoomCommand roomPeerIdsAtIndex:index];
}
- (AVIMRoomCommandBuilder *)addRoomPeerIds:(NSString*)value {
  if (resultRoomCommand.roomPeerIdsArray == nil) {
    resultRoomCommand.roomPeerIdsArray = [[NSMutableArray alloc]init];
  }
  [resultRoomCommand.roomPeerIdsArray addObject:value];
  return self;
}
- (AVIMRoomCommandBuilder *)setRoomPeerIdsArray:(NSArray *)array {
  resultRoomCommand.roomPeerIdsArray = [[NSMutableArray alloc] initWithArray:array];
  return self;
}
- (AVIMRoomCommandBuilder *)clearRoomPeerIds {
  resultRoomCommand.roomPeerIdsArray = nil;
  return self;
}
- (BOOL) hasByPeerId {
  return resultRoomCommand.hasByPeerId;
}
- (NSString*) byPeerId {
  return resultRoomCommand.byPeerId;
}
- (AVIMRoomCommandBuilder*) setByPeerId:(NSString*) value {
  resultRoomCommand.hasByPeerId = YES;
  resultRoomCommand.byPeerId = value;
  return self;
}
- (AVIMRoomCommandBuilder*) clearByPeerId {
  resultRoomCommand.hasByPeerId = NO;
  resultRoomCommand.byPeerId = @"";
  return self;
}
@end

@interface AVIMLogsCommand ()
@property (strong) NSString* cid;
@property SInt32 l;
@property SInt32 limit;
@property SInt64 t;
@property SInt64 tt;
@property (strong) NSString* tmid;
@property (strong) NSString* mid;
@property (strong) NSString* checksum;
@property BOOL stored;
@property AVIMLogsCommand_QueryDirection direction;
@property BOOL tIncluded;
@property BOOL ttIncluded;
@property (strong) NSMutableArray * logsArray;
@end

@implementation AVIMLogsCommand

- (BOOL) hasCid {
  return !!hasCid_;
}
- (void) setHasCid:(BOOL) _value_ {
  hasCid_ = !!_value_;
}
@synthesize cid;
- (BOOL) hasL {
  return !!hasL_;
}
- (void) setHasL:(BOOL) _value_ {
  hasL_ = !!_value_;
}
@synthesize l;
- (BOOL) hasLimit {
  return !!hasLimit_;
}
- (void) setHasLimit:(BOOL) _value_ {
  hasLimit_ = !!_value_;
}
@synthesize limit;
- (BOOL) hasT {
  return !!hasT_;
}
- (void) setHasT:(BOOL) _value_ {
  hasT_ = !!_value_;
}
@synthesize t;
- (BOOL) hasTt {
  return !!hasTt_;
}
- (void) setHasTt:(BOOL) _value_ {
  hasTt_ = !!_value_;
}
@synthesize tt;
- (BOOL) hasTmid {
  return !!hasTmid_;
}
- (void) setHasTmid:(BOOL) _value_ {
  hasTmid_ = !!_value_;
}
@synthesize tmid;
- (BOOL) hasMid {
  return !!hasMid_;
}
- (void) setHasMid:(BOOL) _value_ {
  hasMid_ = !!_value_;
}
@synthesize mid;
- (BOOL) hasChecksum {
  return !!hasChecksum_;
}
- (void) setHasChecksum:(BOOL) _value_ {
  hasChecksum_ = !!_value_;
}
@synthesize checksum;
- (BOOL) hasStored {
  return !!hasStored_;
}
- (void) setHasStored:(BOOL) _value_ {
  hasStored_ = !!_value_;
}
- (BOOL) stored {
  return !!stored_;
}
- (void) setStored:(BOOL) _value_ {
  stored_ = !!_value_;
}
- (BOOL) hasDirection {
  return !!hasDirection_;
}
- (void) setHasDirection:(BOOL) _value_ {
  hasDirection_ = !!_value_;
}
@synthesize direction;
- (BOOL) hasTIncluded {
  return !!hasTIncluded_;
}
- (void) setHasTIncluded:(BOOL) _value_ {
  hasTIncluded_ = !!_value_;
}
- (BOOL) tIncluded {
  return !!tIncluded_;
}
- (void) setTIncluded:(BOOL) _value_ {
  tIncluded_ = !!_value_;
}
- (BOOL) hasTtIncluded {
  return !!hasTtIncluded_;
}
- (void) setHasTtIncluded:(BOOL) _value_ {
  hasTtIncluded_ = !!_value_;
}
- (BOOL) ttIncluded {
  return !!ttIncluded_;
}
- (void) setTtIncluded:(BOOL) _value_ {
  ttIncluded_ = !!_value_;
}
@synthesize logsArray;
@dynamic logs;
- (instancetype) init {
  if ((self = [super init])) {
    self.cid = @"";
    self.l = 0;
    self.limit = 0;
    self.t = 0L;
    self.tt = 0L;
    self.tmid = @"";
    self.mid = @"";
    self.checksum = @"";
    self.stored = NO;
    self.direction = AVIMLogsCommand_QueryDirectionOld;
    self.tIncluded = NO;
    self.ttIncluded = NO;
  }
  return self;
}
static AVIMLogsCommand* defaultAVIMLogsCommandInstance = nil;
+ (void) initialize {
  if (self == [AVIMLogsCommand class]) {
    defaultAVIMLogsCommandInstance = [[AVIMLogsCommand alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultAVIMLogsCommandInstance;
}
- (instancetype) defaultInstance {
  return defaultAVIMLogsCommandInstance;
}
- (NSArray *)logs {
  return logsArray;
}
- (AVIMLogItem*)logsAtIndex:(NSUInteger)index {
  return [logsArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasCid) {
    [output writeString:1 value:self.cid];
  }
  if (self.hasL) {
    [output writeInt32:2 value:self.l];
  }
  if (self.hasLimit) {
    [output writeInt32:3 value:self.limit];
  }
  if (self.hasT) {
    [output writeInt64:4 value:self.t];
  }
  if (self.hasTt) {
    [output writeInt64:5 value:self.tt];
  }
  if (self.hasTmid) {
    [output writeString:6 value:self.tmid];
  }
  if (self.hasMid) {
    [output writeString:7 value:self.mid];
  }
  if (self.hasChecksum) {
    [output writeString:8 value:self.checksum];
  }
  if (self.hasStored) {
    [output writeBool:9 value:self.stored];
  }
  if (self.hasDirection) {
    [output writeEnum:10 value:self.direction];
  }
  if (self.hasTIncluded) {
    [output writeBool:11 value:self.tIncluded];
  }
  if (self.hasTtIncluded) {
    [output writeBool:12 value:self.ttIncluded];
  }
  [self.logsArray enumerateObjectsUsingBlock:^(AVIMLogItem *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:105 value:element];
  }];
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasCid) {
    size_ += computeStringSize(1, self.cid);
  }
  if (self.hasL) {
    size_ += computeInt32Size(2, self.l);
  }
  if (self.hasLimit) {
    size_ += computeInt32Size(3, self.limit);
  }
  if (self.hasT) {
    size_ += computeInt64Size(4, self.t);
  }
  if (self.hasTt) {
    size_ += computeInt64Size(5, self.tt);
  }
  if (self.hasTmid) {
    size_ += computeStringSize(6, self.tmid);
  }
  if (self.hasMid) {
    size_ += computeStringSize(7, self.mid);
  }
  if (self.hasChecksum) {
    size_ += computeStringSize(8, self.checksum);
  }
  if (self.hasStored) {
    size_ += computeBoolSize(9, self.stored);
  }
  if (self.hasDirection) {
    size_ += computeEnumSize(10, self.direction);
  }
  if (self.hasTIncluded) {
    size_ += computeBoolSize(11, self.tIncluded);
  }
  if (self.hasTtIncluded) {
    size_ += computeBoolSize(12, self.ttIncluded);
  }
  [self.logsArray enumerateObjectsUsingBlock:^(AVIMLogItem *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(105, element);
  }];
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (AVIMLogsCommand*) parseFromData:(NSData*) data {
  return (AVIMLogsCommand*)[[[AVIMLogsCommand builder] mergeFromData:data] build];
}
+ (AVIMLogsCommand*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (AVIMLogsCommand*)[[[AVIMLogsCommand builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (AVIMLogsCommand*) parseFromInputStream:(NSInputStream*) input {
  return (AVIMLogsCommand*)[[[AVIMLogsCommand builder] mergeFromInputStream:input] build];
}
+ (AVIMLogsCommand*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (AVIMLogsCommand*)[[[AVIMLogsCommand builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (AVIMLogsCommand*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (AVIMLogsCommand*)[[[AVIMLogsCommand builder] mergeFromCodedInputStream:input] build];
}
+ (AVIMLogsCommand*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (AVIMLogsCommand*)[[[AVIMLogsCommand builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (AVIMLogsCommandBuilder*) builder {
  return [[AVIMLogsCommandBuilder alloc] init];
}
+ (AVIMLogsCommandBuilder*) builderWithPrototype:(AVIMLogsCommand*) prototype {
  return [[AVIMLogsCommand builder] mergeFrom:prototype];
}
- (AVIMLogsCommandBuilder*) builder {
  return [AVIMLogsCommand builder];
}
- (AVIMLogsCommandBuilder*) toBuilder {
  return [AVIMLogsCommand builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasCid) {
    [output appendFormat:@"%@%@: %@\n", indent, @"cid", self.cid];
  }
  if (self.hasL) {
    [output appendFormat:@"%@%@: %@\n", indent, @"l", [NSNumber numberWithInteger:self.l]];
  }
  if (self.hasLimit) {
    [output appendFormat:@"%@%@: %@\n", indent, @"limit", [NSNumber numberWithInteger:self.limit]];
  }
  if (self.hasT) {
    [output appendFormat:@"%@%@: %@\n", indent, @"t", [NSNumber numberWithLongLong:self.t]];
  }
  if (self.hasTt) {
    [output appendFormat:@"%@%@: %@\n", indent, @"tt", [NSNumber numberWithLongLong:self.tt]];
  }
  if (self.hasTmid) {
    [output appendFormat:@"%@%@: %@\n", indent, @"tmid", self.tmid];
  }
  if (self.hasMid) {
    [output appendFormat:@"%@%@: %@\n", indent, @"mid", self.mid];
  }
  if (self.hasChecksum) {
    [output appendFormat:@"%@%@: %@\n", indent, @"checksum", self.checksum];
  }
  if (self.hasStored) {
    [output appendFormat:@"%@%@: %@\n", indent, @"stored", [NSNumber numberWithBool:self.stored]];
  }
  if (self.hasDirection) {
    [output appendFormat:@"%@%@: %@\n", indent, @"direction", NSStringFromAVIMLogsCommand_QueryDirection(self.direction)];
  }
  if (self.hasTIncluded) {
    [output appendFormat:@"%@%@: %@\n", indent, @"tIncluded", [NSNumber numberWithBool:self.tIncluded]];
  }
  if (self.hasTtIncluded) {
    [output appendFormat:@"%@%@: %@\n", indent, @"ttIncluded", [NSNumber numberWithBool:self.ttIncluded]];
  }
  [self.logsArray enumerateObjectsUsingBlock:^(AVIMLogItem *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"logs"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasCid) {
    [dictionary setObject: self.cid forKey: @"cid"];
  }
  if (self.hasL) {
    [dictionary setObject: [NSNumber numberWithInteger:self.l] forKey: @"l"];
  }
  if (self.hasLimit) {
    [dictionary setObject: [NSNumber numberWithInteger:self.limit] forKey: @"limit"];
  }
  if (self.hasT) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.t] forKey: @"t"];
  }
  if (self.hasTt) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.tt] forKey: @"tt"];
  }
  if (self.hasTmid) {
    [dictionary setObject: self.tmid forKey: @"tmid"];
  }
  if (self.hasMid) {
    [dictionary setObject: self.mid forKey: @"mid"];
  }
  if (self.hasChecksum) {
    [dictionary setObject: self.checksum forKey: @"checksum"];
  }
  if (self.hasStored) {
    [dictionary setObject: [NSNumber numberWithBool:self.stored] forKey: @"stored"];
  }
  if (self.hasDirection) {
    [dictionary setObject: @(self.direction) forKey: @"direction"];
  }
  if (self.hasTIncluded) {
    [dictionary setObject: [NSNumber numberWithBool:self.tIncluded] forKey: @"tIncluded"];
  }
  if (self.hasTtIncluded) {
    [dictionary setObject: [NSNumber numberWithBool:self.ttIncluded] forKey: @"ttIncluded"];
  }
  for (AVIMLogItem* element in self.logsArray) {
    NSMutableDictionary *elementDictionary = [NSMutableDictionary dictionary];
    [element storeInDictionary:elementDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:elementDictionary] forKey:@"logs"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[AVIMLogsCommand class]]) {
    return NO;
  }
  AVIMLogsCommand *otherMessage = other;
  return
      self.hasCid == otherMessage.hasCid &&
      (!self.hasCid || [self.cid isEqual:otherMessage.cid]) &&
      self.hasL == otherMessage.hasL &&
      (!self.hasL || self.l == otherMessage.l) &&
      self.hasLimit == otherMessage.hasLimit &&
      (!self.hasLimit || self.limit == otherMessage.limit) &&
      self.hasT == otherMessage.hasT &&
      (!self.hasT || self.t == otherMessage.t) &&
      self.hasTt == otherMessage.hasTt &&
      (!self.hasTt || self.tt == otherMessage.tt) &&
      self.hasTmid == otherMessage.hasTmid &&
      (!self.hasTmid || [self.tmid isEqual:otherMessage.tmid]) &&
      self.hasMid == otherMessage.hasMid &&
      (!self.hasMid || [self.mid isEqual:otherMessage.mid]) &&
      self.hasChecksum == otherMessage.hasChecksum &&
      (!self.hasChecksum || [self.checksum isEqual:otherMessage.checksum]) &&
      self.hasStored == otherMessage.hasStored &&
      (!self.hasStored || self.stored == otherMessage.stored) &&
      self.hasDirection == otherMessage.hasDirection &&
      (!self.hasDirection || self.direction == otherMessage.direction) &&
      self.hasTIncluded == otherMessage.hasTIncluded &&
      (!self.hasTIncluded || self.tIncluded == otherMessage.tIncluded) &&
      self.hasTtIncluded == otherMessage.hasTtIncluded &&
      (!self.hasTtIncluded || self.ttIncluded == otherMessage.ttIncluded) &&
      [self.logsArray isEqualToArray:otherMessage.logsArray] &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasCid) {
    hashCode = hashCode * 31 + [self.cid hash];
  }
  if (self.hasL) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.l] hash];
  }
  if (self.hasLimit) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.limit] hash];
  }
  if (self.hasT) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.t] hash];
  }
  if (self.hasTt) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.tt] hash];
  }
  if (self.hasTmid) {
    hashCode = hashCode * 31 + [self.tmid hash];
  }
  if (self.hasMid) {
    hashCode = hashCode * 31 + [self.mid hash];
  }
  if (self.hasChecksum) {
    hashCode = hashCode * 31 + [self.checksum hash];
  }
  if (self.hasStored) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.stored] hash];
  }
  if (self.hasDirection) {
    hashCode = hashCode * 31 + self.direction;
  }
  if (self.hasTIncluded) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.tIncluded] hash];
  }
  if (self.hasTtIncluded) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.ttIncluded] hash];
  }
  [self.logsArray enumerateObjectsUsingBlock:^(AVIMLogItem *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface AVIMLogsCommandBuilder()
@property (strong) AVIMLogsCommand* resultLogsCommand;
@end

@implementation AVIMLogsCommandBuilder
@synthesize resultLogsCommand;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultLogsCommand = [[AVIMLogsCommand alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultLogsCommand;
}
- (AVIMLogsCommandBuilder*) clear {
  self.resultLogsCommand = [[AVIMLogsCommand alloc] init];
  return self;
}
- (AVIMLogsCommandBuilder*) clone {
  return [AVIMLogsCommand builderWithPrototype:resultLogsCommand];
}
- (AVIMLogsCommand*) defaultInstance {
  return [AVIMLogsCommand defaultInstance];
}
- (AVIMLogsCommand*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (AVIMLogsCommand*) buildPartial {
  AVIMLogsCommand* returnMe = resultLogsCommand;
  self.resultLogsCommand = nil;
  return returnMe;
}
- (AVIMLogsCommandBuilder*) mergeFrom:(AVIMLogsCommand*) other {
  if (other == [AVIMLogsCommand defaultInstance]) {
    return self;
  }
  if (other.hasCid) {
    [self setCid:other.cid];
  }
  if (other.hasL) {
    [self setL:other.l];
  }
  if (other.hasLimit) {
    [self setLimit:other.limit];
  }
  if (other.hasT) {
    [self setT:other.t];
  }
  if (other.hasTt) {
    [self setTt:other.tt];
  }
  if (other.hasTmid) {
    [self setTmid:other.tmid];
  }
  if (other.hasMid) {
    [self setMid:other.mid];
  }
  if (other.hasChecksum) {
    [self setChecksum:other.checksum];
  }
  if (other.hasStored) {
    [self setStored:other.stored];
  }
  if (other.hasDirection) {
    [self setDirection:other.direction];
  }
  if (other.hasTIncluded) {
    [self setTIncluded:other.tIncluded];
  }
  if (other.hasTtIncluded) {
    [self setTtIncluded:other.ttIncluded];
  }
  if (other.logsArray.count > 0) {
    if (resultLogsCommand.logsArray == nil) {
      resultLogsCommand.logsArray = [[NSMutableArray alloc] initWithArray:other.logsArray];
    } else {
      [resultLogsCommand.logsArray addObjectsFromArray:other.logsArray];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (AVIMLogsCommandBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (AVIMLogsCommandBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setCid:[input readString]];
        break;
      }
      case 16: {
        [self setL:[input readInt32]];
        break;
      }
      case 24: {
        [self setLimit:[input readInt32]];
        break;
      }
      case 32: {
        [self setT:[input readInt64]];
        break;
      }
      case 40: {
        [self setTt:[input readInt64]];
        break;
      }
      case 50: {
        [self setTmid:[input readString]];
        break;
      }
      case 58: {
        [self setMid:[input readString]];
        break;
      }
      case 66: {
        [self setChecksum:[input readString]];
        break;
      }
      case 72: {
        [self setStored:[input readBool]];
        break;
      }
      case 80: {
        AVIMLogsCommand_QueryDirection value = (AVIMLogsCommand_QueryDirection)[input readEnum];
        if (AVIMLogsCommand_QueryDirectionIsValidValue(value)) {
          [self setDirection:value];
        } else {
          [unknownFields mergeVarintField:10 value:value];
        }
        break;
      }
      case 88: {
        [self setTIncluded:[input readBool]];
        break;
      }
      case 96: {
        [self setTtIncluded:[input readBool]];
        break;
      }
      case 842: {
        AVIMLogItemBuilder* subBuilder = [AVIMLogItem builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addLogs:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasCid {
  return resultLogsCommand.hasCid;
}
- (NSString*) cid {
  return resultLogsCommand.cid;
}
- (AVIMLogsCommandBuilder*) setCid:(NSString*) value {
  resultLogsCommand.hasCid = YES;
  resultLogsCommand.cid = value;
  return self;
}
- (AVIMLogsCommandBuilder*) clearCid {
  resultLogsCommand.hasCid = NO;
  resultLogsCommand.cid = @"";
  return self;
}
- (BOOL) hasL {
  return resultLogsCommand.hasL;
}
- (SInt32) l {
  return resultLogsCommand.l;
}
- (AVIMLogsCommandBuilder*) setL:(SInt32) value {
  resultLogsCommand.hasL = YES;
  resultLogsCommand.l = value;
  return self;
}
- (AVIMLogsCommandBuilder*) clearL {
  resultLogsCommand.hasL = NO;
  resultLogsCommand.l = 0;
  return self;
}
- (BOOL) hasLimit {
  return resultLogsCommand.hasLimit;
}
- (SInt32) limit {
  return resultLogsCommand.limit;
}
- (AVIMLogsCommandBuilder*) setLimit:(SInt32) value {
  resultLogsCommand.hasLimit = YES;
  resultLogsCommand.limit = value;
  return self;
}
- (AVIMLogsCommandBuilder*) clearLimit {
  resultLogsCommand.hasLimit = NO;
  resultLogsCommand.limit = 0;
  return self;
}
- (BOOL) hasT {
  return resultLogsCommand.hasT;
}
- (SInt64) t {
  return resultLogsCommand.t;
}
- (AVIMLogsCommandBuilder*) setT:(SInt64) value {
  resultLogsCommand.hasT = YES;
  resultLogsCommand.t = value;
  return self;
}
- (AVIMLogsCommandBuilder*) clearT {
  resultLogsCommand.hasT = NO;
  resultLogsCommand.t = 0L;
  return self;
}
- (BOOL) hasTt {
  return resultLogsCommand.hasTt;
}
- (SInt64) tt {
  return resultLogsCommand.tt;
}
- (AVIMLogsCommandBuilder*) setTt:(SInt64) value {
  resultLogsCommand.hasTt = YES;
  resultLogsCommand.tt = value;
  return self;
}
- (AVIMLogsCommandBuilder*) clearTt {
  resultLogsCommand.hasTt = NO;
  resultLogsCommand.tt = 0L;
  return self;
}
- (BOOL) hasTmid {
  return resultLogsCommand.hasTmid;
}
- (NSString*) tmid {
  return resultLogsCommand.tmid;
}
- (AVIMLogsCommandBuilder*) setTmid:(NSString*) value {
  resultLogsCommand.hasTmid = YES;
  resultLogsCommand.tmid = value;
  return self;
}
- (AVIMLogsCommandBuilder*) clearTmid {
  resultLogsCommand.hasTmid = NO;
  resultLogsCommand.tmid = @"";
  return self;
}
- (BOOL) hasMid {
  return resultLogsCommand.hasMid;
}
- (NSString*) mid {
  return resultLogsCommand.mid;
}
- (AVIMLogsCommandBuilder*) setMid:(NSString*) value {
  resultLogsCommand.hasMid = YES;
  resultLogsCommand.mid = value;
  return self;
}
- (AVIMLogsCommandBuilder*) clearMid {
  resultLogsCommand.hasMid = NO;
  resultLogsCommand.mid = @"";
  return self;
}
- (BOOL) hasChecksum {
  return resultLogsCommand.hasChecksum;
}
- (NSString*) checksum {
  return resultLogsCommand.checksum;
}
- (AVIMLogsCommandBuilder*) setChecksum:(NSString*) value {
  resultLogsCommand.hasChecksum = YES;
  resultLogsCommand.checksum = value;
  return self;
}
- (AVIMLogsCommandBuilder*) clearChecksum {
  resultLogsCommand.hasChecksum = NO;
  resultLogsCommand.checksum = @"";
  return self;
}
- (BOOL) hasStored {
  return resultLogsCommand.hasStored;
}
- (BOOL) stored {
  return resultLogsCommand.stored;
}
- (AVIMLogsCommandBuilder*) setStored:(BOOL) value {
  resultLogsCommand.hasStored = YES;
  resultLogsCommand.stored = value;
  return self;
}
- (AVIMLogsCommandBuilder*) clearStored {
  resultLogsCommand.hasStored = NO;
  resultLogsCommand.stored = NO;
  return self;
}
- (BOOL) hasDirection {
  return resultLogsCommand.hasDirection;
}
- (AVIMLogsCommand_QueryDirection) direction {
  return resultLogsCommand.direction;
}
- (AVIMLogsCommandBuilder*) setDirection:(AVIMLogsCommand_QueryDirection) value {
  resultLogsCommand.hasDirection = YES;
  resultLogsCommand.direction = value;
  return self;
}
- (AVIMLogsCommandBuilder*) clearDirection {
  resultLogsCommand.hasDirection = NO;
  resultLogsCommand.direction = AVIMLogsCommand_QueryDirectionOld;
  return self;
}
- (BOOL) hasTIncluded {
  return resultLogsCommand.hasTIncluded;
}
- (BOOL) tIncluded {
  return resultLogsCommand.tIncluded;
}
- (AVIMLogsCommandBuilder*) setTIncluded:(BOOL) value {
  resultLogsCommand.hasTIncluded = YES;
  resultLogsCommand.tIncluded = value;
  return self;
}
- (AVIMLogsCommandBuilder*) clearTIncluded {
  resultLogsCommand.hasTIncluded = NO;
  resultLogsCommand.tIncluded = NO;
  return self;
}
- (BOOL) hasTtIncluded {
  return resultLogsCommand.hasTtIncluded;
}
- (BOOL) ttIncluded {
  return resultLogsCommand.ttIncluded;
}
- (AVIMLogsCommandBuilder*) setTtIncluded:(BOOL) value {
  resultLogsCommand.hasTtIncluded = YES;
  resultLogsCommand.ttIncluded = value;
  return self;
}
- (AVIMLogsCommandBuilder*) clearTtIncluded {
  resultLogsCommand.hasTtIncluded = NO;
  resultLogsCommand.ttIncluded = NO;
  return self;
}
- (NSMutableArray *)logs {
  return resultLogsCommand.logsArray;
}
- (AVIMLogItem*)logsAtIndex:(NSUInteger)index {
  return [resultLogsCommand logsAtIndex:index];
}
- (AVIMLogsCommandBuilder *)addLogs:(AVIMLogItem*)value {
  if (resultLogsCommand.logsArray == nil) {
    resultLogsCommand.logsArray = [[NSMutableArray alloc]init];
  }
  [resultLogsCommand.logsArray addObject:value];
  return self;
}
- (AVIMLogsCommandBuilder *)setLogsArray:(NSArray *)array {
  resultLogsCommand.logsArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (AVIMLogsCommandBuilder *)clearLogs {
  resultLogsCommand.logsArray = nil;
  return self;
}
@end

@interface AVIMRcpCommand ()
@property (strong) NSString* id;
@property (strong) NSString* cid;
@property SInt64 t;
@property BOOL read;
@end

@implementation AVIMRcpCommand

- (BOOL) hasId {
  return !!hasId_;
}
- (void) setHasId:(BOOL) _value_ {
  hasId_ = !!_value_;
}
@synthesize id;
- (BOOL) hasCid {
  return !!hasCid_;
}
- (void) setHasCid:(BOOL) _value_ {
  hasCid_ = !!_value_;
}
@synthesize cid;
- (BOOL) hasT {
  return !!hasT_;
}
- (void) setHasT:(BOOL) _value_ {
  hasT_ = !!_value_;
}
@synthesize t;
- (BOOL) hasRead {
  return !!hasRead_;
}
- (void) setHasRead:(BOOL) _value_ {
  hasRead_ = !!_value_;
}
- (BOOL) read {
  return !!read_;
}
- (void) setRead:(BOOL) _value_ {
  read_ = !!_value_;
}
- (instancetype) init {
  if ((self = [super init])) {
    self.id = @"";
    self.cid = @"";
    self.t = 0L;
    self.read = NO;
  }
  return self;
}
static AVIMRcpCommand* defaultAVIMRcpCommandInstance = nil;
+ (void) initialize {
  if (self == [AVIMRcpCommand class]) {
    defaultAVIMRcpCommandInstance = [[AVIMRcpCommand alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultAVIMRcpCommandInstance;
}
- (instancetype) defaultInstance {
  return defaultAVIMRcpCommandInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasId) {
    [output writeString:1 value:self.id];
  }
  if (self.hasCid) {
    [output writeString:2 value:self.cid];
  }
  if (self.hasT) {
    [output writeInt64:3 value:self.t];
  }
  if (self.hasRead) {
    [output writeBool:4 value:self.read];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasId) {
    size_ += computeStringSize(1, self.id);
  }
  if (self.hasCid) {
    size_ += computeStringSize(2, self.cid);
  }
  if (self.hasT) {
    size_ += computeInt64Size(3, self.t);
  }
  if (self.hasRead) {
    size_ += computeBoolSize(4, self.read);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (AVIMRcpCommand*) parseFromData:(NSData*) data {
  return (AVIMRcpCommand*)[[[AVIMRcpCommand builder] mergeFromData:data] build];
}
+ (AVIMRcpCommand*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (AVIMRcpCommand*)[[[AVIMRcpCommand builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (AVIMRcpCommand*) parseFromInputStream:(NSInputStream*) input {
  return (AVIMRcpCommand*)[[[AVIMRcpCommand builder] mergeFromInputStream:input] build];
}
+ (AVIMRcpCommand*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (AVIMRcpCommand*)[[[AVIMRcpCommand builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (AVIMRcpCommand*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (AVIMRcpCommand*)[[[AVIMRcpCommand builder] mergeFromCodedInputStream:input] build];
}
+ (AVIMRcpCommand*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (AVIMRcpCommand*)[[[AVIMRcpCommand builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (AVIMRcpCommandBuilder*) builder {
  return [[AVIMRcpCommandBuilder alloc] init];
}
+ (AVIMRcpCommandBuilder*) builderWithPrototype:(AVIMRcpCommand*) prototype {
  return [[AVIMRcpCommand builder] mergeFrom:prototype];
}
- (AVIMRcpCommandBuilder*) builder {
  return [AVIMRcpCommand builder];
}
- (AVIMRcpCommandBuilder*) toBuilder {
  return [AVIMRcpCommand builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"id", self.id];
  }
  if (self.hasCid) {
    [output appendFormat:@"%@%@: %@\n", indent, @"cid", self.cid];
  }
  if (self.hasT) {
    [output appendFormat:@"%@%@: %@\n", indent, @"t", [NSNumber numberWithLongLong:self.t]];
  }
  if (self.hasRead) {
    [output appendFormat:@"%@%@: %@\n", indent, @"read", [NSNumber numberWithBool:self.read]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasId) {
    [dictionary setObject: self.id forKey: @"id"];
  }
  if (self.hasCid) {
    [dictionary setObject: self.cid forKey: @"cid"];
  }
  if (self.hasT) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.t] forKey: @"t"];
  }
  if (self.hasRead) {
    [dictionary setObject: [NSNumber numberWithBool:self.read] forKey: @"read"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[AVIMRcpCommand class]]) {
    return NO;
  }
  AVIMRcpCommand *otherMessage = other;
  return
      self.hasId == otherMessage.hasId &&
      (!self.hasId || [self.id isEqual:otherMessage.id]) &&
      self.hasCid == otherMessage.hasCid &&
      (!self.hasCid || [self.cid isEqual:otherMessage.cid]) &&
      self.hasT == otherMessage.hasT &&
      (!self.hasT || self.t == otherMessage.t) &&
      self.hasRead == otherMessage.hasRead &&
      (!self.hasRead || self.read == otherMessage.read) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasId) {
    hashCode = hashCode * 31 + [self.id hash];
  }
  if (self.hasCid) {
    hashCode = hashCode * 31 + [self.cid hash];
  }
  if (self.hasT) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.t] hash];
  }
  if (self.hasRead) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.read] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface AVIMRcpCommandBuilder()
@property (strong) AVIMRcpCommand* resultRcpCommand;
@end

@implementation AVIMRcpCommandBuilder
@synthesize resultRcpCommand;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultRcpCommand = [[AVIMRcpCommand alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultRcpCommand;
}
- (AVIMRcpCommandBuilder*) clear {
  self.resultRcpCommand = [[AVIMRcpCommand alloc] init];
  return self;
}
- (AVIMRcpCommandBuilder*) clone {
  return [AVIMRcpCommand builderWithPrototype:resultRcpCommand];
}
- (AVIMRcpCommand*) defaultInstance {
  return [AVIMRcpCommand defaultInstance];
}
- (AVIMRcpCommand*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (AVIMRcpCommand*) buildPartial {
  AVIMRcpCommand* returnMe = resultRcpCommand;
  self.resultRcpCommand = nil;
  return returnMe;
}
- (AVIMRcpCommandBuilder*) mergeFrom:(AVIMRcpCommand*) other {
  if (other == [AVIMRcpCommand defaultInstance]) {
    return self;
  }
  if (other.hasId) {
    [self setId:other.id];
  }
  if (other.hasCid) {
    [self setCid:other.cid];
  }
  if (other.hasT) {
    [self setT:other.t];
  }
  if (other.hasRead) {
    [self setRead:other.read];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (AVIMRcpCommandBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (AVIMRcpCommandBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setId:[input readString]];
        break;
      }
      case 18: {
        [self setCid:[input readString]];
        break;
      }
      case 24: {
        [self setT:[input readInt64]];
        break;
      }
      case 32: {
        [self setRead:[input readBool]];
        break;
      }
    }
  }
}
- (BOOL) hasId {
  return resultRcpCommand.hasId;
}
- (NSString*) id {
  return resultRcpCommand.id;
}
- (AVIMRcpCommandBuilder*) setId:(NSString*) value {
  resultRcpCommand.hasId = YES;
  resultRcpCommand.id = value;
  return self;
}
- (AVIMRcpCommandBuilder*) clearId {
  resultRcpCommand.hasId = NO;
  resultRcpCommand.id = @"";
  return self;
}
- (BOOL) hasCid {
  return resultRcpCommand.hasCid;
}
- (NSString*) cid {
  return resultRcpCommand.cid;
}
- (AVIMRcpCommandBuilder*) setCid:(NSString*) value {
  resultRcpCommand.hasCid = YES;
  resultRcpCommand.cid = value;
  return self;
}
- (AVIMRcpCommandBuilder*) clearCid {
  resultRcpCommand.hasCid = NO;
  resultRcpCommand.cid = @"";
  return self;
}
- (BOOL) hasT {
  return resultRcpCommand.hasT;
}
- (SInt64) t {
  return resultRcpCommand.t;
}
- (AVIMRcpCommandBuilder*) setT:(SInt64) value {
  resultRcpCommand.hasT = YES;
  resultRcpCommand.t = value;
  return self;
}
- (AVIMRcpCommandBuilder*) clearT {
  resultRcpCommand.hasT = NO;
  resultRcpCommand.t = 0L;
  return self;
}
- (BOOL) hasRead {
  return resultRcpCommand.hasRead;
}
- (BOOL) read {
  return resultRcpCommand.read;
}
- (AVIMRcpCommandBuilder*) setRead:(BOOL) value {
  resultRcpCommand.hasRead = YES;
  resultRcpCommand.read = value;
  return self;
}
- (AVIMRcpCommandBuilder*) clearRead {
  resultRcpCommand.hasRead = NO;
  resultRcpCommand.read = NO;
  return self;
}
@end

@interface AVIMReadTuple ()
@property (strong) NSString* cid;
@property SInt64 timestamp;
@property (strong) NSString* mid;
@end

@implementation AVIMReadTuple

- (BOOL) hasCid {
  return !!hasCid_;
}
- (void) setHasCid:(BOOL) _value_ {
  hasCid_ = !!_value_;
}
@synthesize cid;
- (BOOL) hasTimestamp {
  return !!hasTimestamp_;
}
- (void) setHasTimestamp:(BOOL) _value_ {
  hasTimestamp_ = !!_value_;
}
@synthesize timestamp;
- (BOOL) hasMid {
  return !!hasMid_;
}
- (void) setHasMid:(BOOL) _value_ {
  hasMid_ = !!_value_;
}
@synthesize mid;
- (instancetype) init {
  if ((self = [super init])) {
    self.cid = @"";
    self.timestamp = 0L;
    self.mid = @"";
  }
  return self;
}
static AVIMReadTuple* defaultAVIMReadTupleInstance = nil;
+ (void) initialize {
  if (self == [AVIMReadTuple class]) {
    defaultAVIMReadTupleInstance = [[AVIMReadTuple alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultAVIMReadTupleInstance;
}
- (instancetype) defaultInstance {
  return defaultAVIMReadTupleInstance;
}
- (BOOL) isInitialized {
  if (!self.hasCid) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasCid) {
    [output writeString:1 value:self.cid];
  }
  if (self.hasTimestamp) {
    [output writeInt64:2 value:self.timestamp];
  }
  if (self.hasMid) {
    [output writeString:3 value:self.mid];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasCid) {
    size_ += computeStringSize(1, self.cid);
  }
  if (self.hasTimestamp) {
    size_ += computeInt64Size(2, self.timestamp);
  }
  if (self.hasMid) {
    size_ += computeStringSize(3, self.mid);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (AVIMReadTuple*) parseFromData:(NSData*) data {
  return (AVIMReadTuple*)[[[AVIMReadTuple builder] mergeFromData:data] build];
}
+ (AVIMReadTuple*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (AVIMReadTuple*)[[[AVIMReadTuple builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (AVIMReadTuple*) parseFromInputStream:(NSInputStream*) input {
  return (AVIMReadTuple*)[[[AVIMReadTuple builder] mergeFromInputStream:input] build];
}
+ (AVIMReadTuple*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (AVIMReadTuple*)[[[AVIMReadTuple builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (AVIMReadTuple*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (AVIMReadTuple*)[[[AVIMReadTuple builder] mergeFromCodedInputStream:input] build];
}
+ (AVIMReadTuple*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (AVIMReadTuple*)[[[AVIMReadTuple builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (AVIMReadTupleBuilder*) builder {
  return [[AVIMReadTupleBuilder alloc] init];
}
+ (AVIMReadTupleBuilder*) builderWithPrototype:(AVIMReadTuple*) prototype {
  return [[AVIMReadTuple builder] mergeFrom:prototype];
}
- (AVIMReadTupleBuilder*) builder {
  return [AVIMReadTuple builder];
}
- (AVIMReadTupleBuilder*) toBuilder {
  return [AVIMReadTuple builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasCid) {
    [output appendFormat:@"%@%@: %@\n", indent, @"cid", self.cid];
  }
  if (self.hasTimestamp) {
    [output appendFormat:@"%@%@: %@\n", indent, @"timestamp", [NSNumber numberWithLongLong:self.timestamp]];
  }
  if (self.hasMid) {
    [output appendFormat:@"%@%@: %@\n", indent, @"mid", self.mid];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasCid) {
    [dictionary setObject: self.cid forKey: @"cid"];
  }
  if (self.hasTimestamp) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.timestamp] forKey: @"timestamp"];
  }
  if (self.hasMid) {
    [dictionary setObject: self.mid forKey: @"mid"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[AVIMReadTuple class]]) {
    return NO;
  }
  AVIMReadTuple *otherMessage = other;
  return
      self.hasCid == otherMessage.hasCid &&
      (!self.hasCid || [self.cid isEqual:otherMessage.cid]) &&
      self.hasTimestamp == otherMessage.hasTimestamp &&
      (!self.hasTimestamp || self.timestamp == otherMessage.timestamp) &&
      self.hasMid == otherMessage.hasMid &&
      (!self.hasMid || [self.mid isEqual:otherMessage.mid]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasCid) {
    hashCode = hashCode * 31 + [self.cid hash];
  }
  if (self.hasTimestamp) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.timestamp] hash];
  }
  if (self.hasMid) {
    hashCode = hashCode * 31 + [self.mid hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface AVIMReadTupleBuilder()
@property (strong) AVIMReadTuple* resultReadTuple;
@end

@implementation AVIMReadTupleBuilder
@synthesize resultReadTuple;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultReadTuple = [[AVIMReadTuple alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultReadTuple;
}
- (AVIMReadTupleBuilder*) clear {
  self.resultReadTuple = [[AVIMReadTuple alloc] init];
  return self;
}
- (AVIMReadTupleBuilder*) clone {
  return [AVIMReadTuple builderWithPrototype:resultReadTuple];
}
- (AVIMReadTuple*) defaultInstance {
  return [AVIMReadTuple defaultInstance];
}
- (AVIMReadTuple*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (AVIMReadTuple*) buildPartial {
  AVIMReadTuple* returnMe = resultReadTuple;
  self.resultReadTuple = nil;
  return returnMe;
}
- (AVIMReadTupleBuilder*) mergeFrom:(AVIMReadTuple*) other {
  if (other == [AVIMReadTuple defaultInstance]) {
    return self;
  }
  if (other.hasCid) {
    [self setCid:other.cid];
  }
  if (other.hasTimestamp) {
    [self setTimestamp:other.timestamp];
  }
  if (other.hasMid) {
    [self setMid:other.mid];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (AVIMReadTupleBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (AVIMReadTupleBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setCid:[input readString]];
        break;
      }
      case 16: {
        [self setTimestamp:[input readInt64]];
        break;
      }
      case 26: {
        [self setMid:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasCid {
  return resultReadTuple.hasCid;
}
- (NSString*) cid {
  return resultReadTuple.cid;
}
- (AVIMReadTupleBuilder*) setCid:(NSString*) value {
  resultReadTuple.hasCid = YES;
  resultReadTuple.cid = value;
  return self;
}
- (AVIMReadTupleBuilder*) clearCid {
  resultReadTuple.hasCid = NO;
  resultReadTuple.cid = @"";
  return self;
}
- (BOOL) hasTimestamp {
  return resultReadTuple.hasTimestamp;
}
- (SInt64) timestamp {
  return resultReadTuple.timestamp;
}
- (AVIMReadTupleBuilder*) setTimestamp:(SInt64) value {
  resultReadTuple.hasTimestamp = YES;
  resultReadTuple.timestamp = value;
  return self;
}
- (AVIMReadTupleBuilder*) clearTimestamp {
  resultReadTuple.hasTimestamp = NO;
  resultReadTuple.timestamp = 0L;
  return self;
}
- (BOOL) hasMid {
  return resultReadTuple.hasMid;
}
- (NSString*) mid {
  return resultReadTuple.mid;
}
- (AVIMReadTupleBuilder*) setMid:(NSString*) value {
  resultReadTuple.hasMid = YES;
  resultReadTuple.mid = value;
  return self;
}
- (AVIMReadTupleBuilder*) clearMid {
  resultReadTuple.hasMid = NO;
  resultReadTuple.mid = @"";
  return self;
}
@end

@interface AVIMMaxReadTuple ()
@property (strong) NSString* pid;
@property SInt64 maxAckTimestamp;
@property SInt64 maxReadTimestamp;
@end

@implementation AVIMMaxReadTuple

- (BOOL) hasPid {
  return !!hasPid_;
}
- (void) setHasPid:(BOOL) _value_ {
  hasPid_ = !!_value_;
}
@synthesize pid;
- (BOOL) hasMaxAckTimestamp {
  return !!hasMaxAckTimestamp_;
}
- (void) setHasMaxAckTimestamp:(BOOL) _value_ {
  hasMaxAckTimestamp_ = !!_value_;
}
@synthesize maxAckTimestamp;
- (BOOL) hasMaxReadTimestamp {
  return !!hasMaxReadTimestamp_;
}
- (void) setHasMaxReadTimestamp:(BOOL) _value_ {
  hasMaxReadTimestamp_ = !!_value_;
}
@synthesize maxReadTimestamp;
- (instancetype) init {
  if ((self = [super init])) {
    self.pid = @"";
    self.maxAckTimestamp = 0L;
    self.maxReadTimestamp = 0L;
  }
  return self;
}
static AVIMMaxReadTuple* defaultAVIMMaxReadTupleInstance = nil;
+ (void) initialize {
  if (self == [AVIMMaxReadTuple class]) {
    defaultAVIMMaxReadTupleInstance = [[AVIMMaxReadTuple alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultAVIMMaxReadTupleInstance;
}
- (instancetype) defaultInstance {
  return defaultAVIMMaxReadTupleInstance;
}
- (BOOL) isInitialized {
  if (!self.hasPid) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasPid) {
    [output writeString:1 value:self.pid];
  }
  if (self.hasMaxAckTimestamp) {
    [output writeInt64:2 value:self.maxAckTimestamp];
  }
  if (self.hasMaxReadTimestamp) {
    [output writeInt64:3 value:self.maxReadTimestamp];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasPid) {
    size_ += computeStringSize(1, self.pid);
  }
  if (self.hasMaxAckTimestamp) {
    size_ += computeInt64Size(2, self.maxAckTimestamp);
  }
  if (self.hasMaxReadTimestamp) {
    size_ += computeInt64Size(3, self.maxReadTimestamp);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (AVIMMaxReadTuple*) parseFromData:(NSData*) data {
  return (AVIMMaxReadTuple*)[[[AVIMMaxReadTuple builder] mergeFromData:data] build];
}
+ (AVIMMaxReadTuple*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (AVIMMaxReadTuple*)[[[AVIMMaxReadTuple builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (AVIMMaxReadTuple*) parseFromInputStream:(NSInputStream*) input {
  return (AVIMMaxReadTuple*)[[[AVIMMaxReadTuple builder] mergeFromInputStream:input] build];
}
+ (AVIMMaxReadTuple*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (AVIMMaxReadTuple*)[[[AVIMMaxReadTuple builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (AVIMMaxReadTuple*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (AVIMMaxReadTuple*)[[[AVIMMaxReadTuple builder] mergeFromCodedInputStream:input] build];
}
+ (AVIMMaxReadTuple*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (AVIMMaxReadTuple*)[[[AVIMMaxReadTuple builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (AVIMMaxReadTupleBuilder*) builder {
  return [[AVIMMaxReadTupleBuilder alloc] init];
}
+ (AVIMMaxReadTupleBuilder*) builderWithPrototype:(AVIMMaxReadTuple*) prototype {
  return [[AVIMMaxReadTuple builder] mergeFrom:prototype];
}
- (AVIMMaxReadTupleBuilder*) builder {
  return [AVIMMaxReadTuple builder];
}
- (AVIMMaxReadTupleBuilder*) toBuilder {
  return [AVIMMaxReadTuple builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasPid) {
    [output appendFormat:@"%@%@: %@\n", indent, @"pid", self.pid];
  }
  if (self.hasMaxAckTimestamp) {
    [output appendFormat:@"%@%@: %@\n", indent, @"maxAckTimestamp", [NSNumber numberWithLongLong:self.maxAckTimestamp]];
  }
  if (self.hasMaxReadTimestamp) {
    [output appendFormat:@"%@%@: %@\n", indent, @"maxReadTimestamp", [NSNumber numberWithLongLong:self.maxReadTimestamp]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasPid) {
    [dictionary setObject: self.pid forKey: @"pid"];
  }
  if (self.hasMaxAckTimestamp) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.maxAckTimestamp] forKey: @"maxAckTimestamp"];
  }
  if (self.hasMaxReadTimestamp) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.maxReadTimestamp] forKey: @"maxReadTimestamp"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[AVIMMaxReadTuple class]]) {
    return NO;
  }
  AVIMMaxReadTuple *otherMessage = other;
  return
      self.hasPid == otherMessage.hasPid &&
      (!self.hasPid || [self.pid isEqual:otherMessage.pid]) &&
      self.hasMaxAckTimestamp == otherMessage.hasMaxAckTimestamp &&
      (!self.hasMaxAckTimestamp || self.maxAckTimestamp == otherMessage.maxAckTimestamp) &&
      self.hasMaxReadTimestamp == otherMessage.hasMaxReadTimestamp &&
      (!self.hasMaxReadTimestamp || self.maxReadTimestamp == otherMessage.maxReadTimestamp) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasPid) {
    hashCode = hashCode * 31 + [self.pid hash];
  }
  if (self.hasMaxAckTimestamp) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.maxAckTimestamp] hash];
  }
  if (self.hasMaxReadTimestamp) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.maxReadTimestamp] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface AVIMMaxReadTupleBuilder()
@property (strong) AVIMMaxReadTuple* resultMaxReadTuple;
@end

@implementation AVIMMaxReadTupleBuilder
@synthesize resultMaxReadTuple;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultMaxReadTuple = [[AVIMMaxReadTuple alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultMaxReadTuple;
}
- (AVIMMaxReadTupleBuilder*) clear {
  self.resultMaxReadTuple = [[AVIMMaxReadTuple alloc] init];
  return self;
}
- (AVIMMaxReadTupleBuilder*) clone {
  return [AVIMMaxReadTuple builderWithPrototype:resultMaxReadTuple];
}
- (AVIMMaxReadTuple*) defaultInstance {
  return [AVIMMaxReadTuple defaultInstance];
}
- (AVIMMaxReadTuple*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (AVIMMaxReadTuple*) buildPartial {
  AVIMMaxReadTuple* returnMe = resultMaxReadTuple;
  self.resultMaxReadTuple = nil;
  return returnMe;
}
- (AVIMMaxReadTupleBuilder*) mergeFrom:(AVIMMaxReadTuple*) other {
  if (other == [AVIMMaxReadTuple defaultInstance]) {
    return self;
  }
  if (other.hasPid) {
    [self setPid:other.pid];
  }
  if (other.hasMaxAckTimestamp) {
    [self setMaxAckTimestamp:other.maxAckTimestamp];
  }
  if (other.hasMaxReadTimestamp) {
    [self setMaxReadTimestamp:other.maxReadTimestamp];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (AVIMMaxReadTupleBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (AVIMMaxReadTupleBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setPid:[input readString]];
        break;
      }
      case 16: {
        [self setMaxAckTimestamp:[input readInt64]];
        break;
      }
      case 24: {
        [self setMaxReadTimestamp:[input readInt64]];
        break;
      }
    }
  }
}
- (BOOL) hasPid {
  return resultMaxReadTuple.hasPid;
}
- (NSString*) pid {
  return resultMaxReadTuple.pid;
}
- (AVIMMaxReadTupleBuilder*) setPid:(NSString*) value {
  resultMaxReadTuple.hasPid = YES;
  resultMaxReadTuple.pid = value;
  return self;
}
- (AVIMMaxReadTupleBuilder*) clearPid {
  resultMaxReadTuple.hasPid = NO;
  resultMaxReadTuple.pid = @"";
  return self;
}
- (BOOL) hasMaxAckTimestamp {
  return resultMaxReadTuple.hasMaxAckTimestamp;
}
- (SInt64) maxAckTimestamp {
  return resultMaxReadTuple.maxAckTimestamp;
}
- (AVIMMaxReadTupleBuilder*) setMaxAckTimestamp:(SInt64) value {
  resultMaxReadTuple.hasMaxAckTimestamp = YES;
  resultMaxReadTuple.maxAckTimestamp = value;
  return self;
}
- (AVIMMaxReadTupleBuilder*) clearMaxAckTimestamp {
  resultMaxReadTuple.hasMaxAckTimestamp = NO;
  resultMaxReadTuple.maxAckTimestamp = 0L;
  return self;
}
- (BOOL) hasMaxReadTimestamp {
  return resultMaxReadTuple.hasMaxReadTimestamp;
}
- (SInt64) maxReadTimestamp {
  return resultMaxReadTuple.maxReadTimestamp;
}
- (AVIMMaxReadTupleBuilder*) setMaxReadTimestamp:(SInt64) value {
  resultMaxReadTuple.hasMaxReadTimestamp = YES;
  resultMaxReadTuple.maxReadTimestamp = value;
  return self;
}
- (AVIMMaxReadTupleBuilder*) clearMaxReadTimestamp {
  resultMaxReadTuple.hasMaxReadTimestamp = NO;
  resultMaxReadTuple.maxReadTimestamp = 0L;
  return self;
}
@end

@interface AVIMReadCommand ()
@property (strong) NSString* cid;
@property (strong) NSMutableArray * cidsArray;
@property (strong) NSMutableArray * convsArray;
@end

@implementation AVIMReadCommand

- (BOOL) hasCid {
  return !!hasCid_;
}
- (void) setHasCid:(BOOL) _value_ {
  hasCid_ = !!_value_;
}
@synthesize cid;
@synthesize cidsArray;
@dynamic cids;
@synthesize convsArray;
@dynamic convs;
- (instancetype) init {
  if ((self = [super init])) {
    self.cid = @"";
  }
  return self;
}
static AVIMReadCommand* defaultAVIMReadCommandInstance = nil;
+ (void) initialize {
  if (self == [AVIMReadCommand class]) {
    defaultAVIMReadCommandInstance = [[AVIMReadCommand alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultAVIMReadCommandInstance;
}
- (instancetype) defaultInstance {
  return defaultAVIMReadCommandInstance;
}
- (NSArray *)cids {
  return cidsArray;
}
- (NSString*)cidsAtIndex:(NSUInteger)index {
  return [cidsArray objectAtIndex:index];
}
- (NSArray *)convs {
  return convsArray;
}
- (AVIMReadTuple*)convsAtIndex:(NSUInteger)index {
  return [convsArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  __block BOOL isInitconvs = YES;
   [self.convs enumerateObjectsUsingBlock:^(AVIMReadTuple *element, NSUInteger idx, BOOL *stop) {
    if (!element.isInitialized) {
      isInitconvs = NO;
      *stop = YES;
    }
  }];
  if (!isInitconvs) return isInitconvs;
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasCid) {
    [output writeString:1 value:self.cid];
  }
  [self.cidsArray enumerateObjectsUsingBlock:^(NSString *element, NSUInteger idx, BOOL *stop) {
    [output writeString:2 value:element];
  }];
  [self.convsArray enumerateObjectsUsingBlock:^(AVIMReadTuple *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:3 value:element];
  }];
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasCid) {
    size_ += computeStringSize(1, self.cid);
  }
  {
    __block SInt32 dataSize = 0;
    const NSUInteger count = self.cidsArray.count;
    [self.cidsArray enumerateObjectsUsingBlock:^(NSString *element, NSUInteger idx, BOOL *stop) {
      dataSize += computeStringSizeNoTag(element);
    }];
    size_ += dataSize;
    size_ += (SInt32)(1 * count);
  }
  [self.convsArray enumerateObjectsUsingBlock:^(AVIMReadTuple *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(3, element);
  }];
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (AVIMReadCommand*) parseFromData:(NSData*) data {
  return (AVIMReadCommand*)[[[AVIMReadCommand builder] mergeFromData:data] build];
}
+ (AVIMReadCommand*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (AVIMReadCommand*)[[[AVIMReadCommand builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (AVIMReadCommand*) parseFromInputStream:(NSInputStream*) input {
  return (AVIMReadCommand*)[[[AVIMReadCommand builder] mergeFromInputStream:input] build];
}
+ (AVIMReadCommand*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (AVIMReadCommand*)[[[AVIMReadCommand builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (AVIMReadCommand*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (AVIMReadCommand*)[[[AVIMReadCommand builder] mergeFromCodedInputStream:input] build];
}
+ (AVIMReadCommand*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (AVIMReadCommand*)[[[AVIMReadCommand builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (AVIMReadCommandBuilder*) builder {
  return [[AVIMReadCommandBuilder alloc] init];
}
+ (AVIMReadCommandBuilder*) builderWithPrototype:(AVIMReadCommand*) prototype {
  return [[AVIMReadCommand builder] mergeFrom:prototype];
}
- (AVIMReadCommandBuilder*) builder {
  return [AVIMReadCommand builder];
}
- (AVIMReadCommandBuilder*) toBuilder {
  return [AVIMReadCommand builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasCid) {
    [output appendFormat:@"%@%@: %@\n", indent, @"cid", self.cid];
  }
  [self.cidsArray enumerateObjectsUsingBlock:^(id obj, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@: %@\n", indent, @"cids", obj];
  }];
  [self.convsArray enumerateObjectsUsingBlock:^(AVIMReadTuple *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"convs"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasCid) {
    [dictionary setObject: self.cid forKey: @"cid"];
  }
  [dictionary setObject:self.cids forKey: @"cids"];
  for (AVIMReadTuple* element in self.convsArray) {
    NSMutableDictionary *elementDictionary = [NSMutableDictionary dictionary];
    [element storeInDictionary:elementDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:elementDictionary] forKey:@"convs"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[AVIMReadCommand class]]) {
    return NO;
  }
  AVIMReadCommand *otherMessage = other;
  return
      self.hasCid == otherMessage.hasCid &&
      (!self.hasCid || [self.cid isEqual:otherMessage.cid]) &&
      [self.cidsArray isEqualToArray:otherMessage.cidsArray] &&
      [self.convsArray isEqualToArray:otherMessage.convsArray] &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasCid) {
    hashCode = hashCode * 31 + [self.cid hash];
  }
  [self.cidsArray enumerateObjectsUsingBlock:^(NSString *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  [self.convsArray enumerateObjectsUsingBlock:^(AVIMReadTuple *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface AVIMReadCommandBuilder()
@property (strong) AVIMReadCommand* resultReadCommand;
@end

@implementation AVIMReadCommandBuilder
@synthesize resultReadCommand;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultReadCommand = [[AVIMReadCommand alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultReadCommand;
}
- (AVIMReadCommandBuilder*) clear {
  self.resultReadCommand = [[AVIMReadCommand alloc] init];
  return self;
}
- (AVIMReadCommandBuilder*) clone {
  return [AVIMReadCommand builderWithPrototype:resultReadCommand];
}
- (AVIMReadCommand*) defaultInstance {
  return [AVIMReadCommand defaultInstance];
}
- (AVIMReadCommand*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (AVIMReadCommand*) buildPartial {
  AVIMReadCommand* returnMe = resultReadCommand;
  self.resultReadCommand = nil;
  return returnMe;
}
- (AVIMReadCommandBuilder*) mergeFrom:(AVIMReadCommand*) other {
  if (other == [AVIMReadCommand defaultInstance]) {
    return self;
  }
  if (other.hasCid) {
    [self setCid:other.cid];
  }
  if (other.cidsArray.count > 0) {
    if (resultReadCommand.cidsArray == nil) {
      resultReadCommand.cidsArray = [[NSMutableArray alloc] initWithArray:other.cidsArray];
    } else {
      [resultReadCommand.cidsArray addObjectsFromArray:other.cidsArray];
    }
  }
  if (other.convsArray.count > 0) {
    if (resultReadCommand.convsArray == nil) {
      resultReadCommand.convsArray = [[NSMutableArray alloc] initWithArray:other.convsArray];
    } else {
      [resultReadCommand.convsArray addObjectsFromArray:other.convsArray];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (AVIMReadCommandBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (AVIMReadCommandBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setCid:[input readString]];
        break;
      }
      case 18: {
        [self addCids:[input readString]];
        break;
      }
      case 26: {
        AVIMReadTupleBuilder* subBuilder = [AVIMReadTuple builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addConvs:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasCid {
  return resultReadCommand.hasCid;
}
- (NSString*) cid {
  return resultReadCommand.cid;
}
- (AVIMReadCommandBuilder*) setCid:(NSString*) value {
  resultReadCommand.hasCid = YES;
  resultReadCommand.cid = value;
  return self;
}
- (AVIMReadCommandBuilder*) clearCid {
  resultReadCommand.hasCid = NO;
  resultReadCommand.cid = @"";
  return self;
}
- (NSMutableArray *)cids {
  return resultReadCommand.cidsArray;
}
- (NSString*)cidsAtIndex:(NSUInteger)index {
  return [resultReadCommand cidsAtIndex:index];
}
- (AVIMReadCommandBuilder *)addCids:(NSString*)value {
  if (resultReadCommand.cidsArray == nil) {
    resultReadCommand.cidsArray = [[NSMutableArray alloc]init];
  }
  [resultReadCommand.cidsArray addObject:value];
  return self;
}
- (AVIMReadCommandBuilder *)setCidsArray:(NSArray *)array {
  resultReadCommand.cidsArray = [[NSMutableArray alloc] initWithArray:array];
  return self;
}
- (AVIMReadCommandBuilder *)clearCids {
  resultReadCommand.cidsArray = nil;
  return self;
}
- (NSMutableArray *)convs {
  return resultReadCommand.convsArray;
}
- (AVIMReadTuple*)convsAtIndex:(NSUInteger)index {
  return [resultReadCommand convsAtIndex:index];
}
- (AVIMReadCommandBuilder *)addConvs:(AVIMReadTuple*)value {
  if (resultReadCommand.convsArray == nil) {
    resultReadCommand.convsArray = [[NSMutableArray alloc]init];
  }
  [resultReadCommand.convsArray addObject:value];
  return self;
}
- (AVIMReadCommandBuilder *)setConvsArray:(NSArray *)array {
  resultReadCommand.convsArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (AVIMReadCommandBuilder *)clearConvs {
  resultReadCommand.convsArray = nil;
  return self;
}
@end

@interface AVIMPresenceCommand ()
@property AVIMStatusType status;
@property (strong) NSMutableArray * sessionPeerIdsArray;
@property (strong) NSString* cid;
@end

@implementation AVIMPresenceCommand

- (BOOL) hasStatus {
  return !!hasStatus_;
}
- (void) setHasStatus:(BOOL) _value_ {
  hasStatus_ = !!_value_;
}
@synthesize status;
@synthesize sessionPeerIdsArray;
@dynamic sessionPeerIds;
- (BOOL) hasCid {
  return !!hasCid_;
}
- (void) setHasCid:(BOOL) _value_ {
  hasCid_ = !!_value_;
}
@synthesize cid;
- (instancetype) init {
  if ((self = [super init])) {
    self.status = AVIMStatusTypeOn;
    self.cid = @"";
  }
  return self;
}
static AVIMPresenceCommand* defaultAVIMPresenceCommandInstance = nil;
+ (void) initialize {
  if (self == [AVIMPresenceCommand class]) {
    defaultAVIMPresenceCommandInstance = [[AVIMPresenceCommand alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultAVIMPresenceCommandInstance;
}
- (instancetype) defaultInstance {
  return defaultAVIMPresenceCommandInstance;
}
- (NSArray *)sessionPeerIds {
  return sessionPeerIdsArray;
}
- (NSString*)sessionPeerIdsAtIndex:(NSUInteger)index {
  return [sessionPeerIdsArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasStatus) {
    [output writeEnum:1 value:self.status];
  }
  [self.sessionPeerIdsArray enumerateObjectsUsingBlock:^(NSString *element, NSUInteger idx, BOOL *stop) {
    [output writeString:2 value:element];
  }];
  if (self.hasCid) {
    [output writeString:3 value:self.cid];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasStatus) {
    size_ += computeEnumSize(1, self.status);
  }
  {
    __block SInt32 dataSize = 0;
    const NSUInteger count = self.sessionPeerIdsArray.count;
    [self.sessionPeerIdsArray enumerateObjectsUsingBlock:^(NSString *element, NSUInteger idx, BOOL *stop) {
      dataSize += computeStringSizeNoTag(element);
    }];
    size_ += dataSize;
    size_ += (SInt32)(1 * count);
  }
  if (self.hasCid) {
    size_ += computeStringSize(3, self.cid);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (AVIMPresenceCommand*) parseFromData:(NSData*) data {
  return (AVIMPresenceCommand*)[[[AVIMPresenceCommand builder] mergeFromData:data] build];
}
+ (AVIMPresenceCommand*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (AVIMPresenceCommand*)[[[AVIMPresenceCommand builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (AVIMPresenceCommand*) parseFromInputStream:(NSInputStream*) input {
  return (AVIMPresenceCommand*)[[[AVIMPresenceCommand builder] mergeFromInputStream:input] build];
}
+ (AVIMPresenceCommand*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (AVIMPresenceCommand*)[[[AVIMPresenceCommand builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (AVIMPresenceCommand*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (AVIMPresenceCommand*)[[[AVIMPresenceCommand builder] mergeFromCodedInputStream:input] build];
}
+ (AVIMPresenceCommand*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (AVIMPresenceCommand*)[[[AVIMPresenceCommand builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (AVIMPresenceCommandBuilder*) builder {
  return [[AVIMPresenceCommandBuilder alloc] init];
}
+ (AVIMPresenceCommandBuilder*) builderWithPrototype:(AVIMPresenceCommand*) prototype {
  return [[AVIMPresenceCommand builder] mergeFrom:prototype];
}
- (AVIMPresenceCommandBuilder*) builder {
  return [AVIMPresenceCommand builder];
}
- (AVIMPresenceCommandBuilder*) toBuilder {
  return [AVIMPresenceCommand builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasStatus) {
    [output appendFormat:@"%@%@: %@\n", indent, @"status", NSStringFromAVIMStatusType(self.status)];
  }
  [self.sessionPeerIdsArray enumerateObjectsUsingBlock:^(id obj, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@: %@\n", indent, @"sessionPeerIds", obj];
  }];
  if (self.hasCid) {
    [output appendFormat:@"%@%@: %@\n", indent, @"cid", self.cid];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasStatus) {
    [dictionary setObject: @(self.status) forKey: @"status"];
  }
  [dictionary setObject:self.sessionPeerIds forKey: @"sessionPeerIds"];
  if (self.hasCid) {
    [dictionary setObject: self.cid forKey: @"cid"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[AVIMPresenceCommand class]]) {
    return NO;
  }
  AVIMPresenceCommand *otherMessage = other;
  return
      self.hasStatus == otherMessage.hasStatus &&
      (!self.hasStatus || self.status == otherMessage.status) &&
      [self.sessionPeerIdsArray isEqualToArray:otherMessage.sessionPeerIdsArray] &&
      self.hasCid == otherMessage.hasCid &&
      (!self.hasCid || [self.cid isEqual:otherMessage.cid]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasStatus) {
    hashCode = hashCode * 31 + self.status;
  }
  [self.sessionPeerIdsArray enumerateObjectsUsingBlock:^(NSString *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  if (self.hasCid) {
    hashCode = hashCode * 31 + [self.cid hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface AVIMPresenceCommandBuilder()
@property (strong) AVIMPresenceCommand* resultPresenceCommand;
@end

@implementation AVIMPresenceCommandBuilder
@synthesize resultPresenceCommand;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultPresenceCommand = [[AVIMPresenceCommand alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultPresenceCommand;
}
- (AVIMPresenceCommandBuilder*) clear {
  self.resultPresenceCommand = [[AVIMPresenceCommand alloc] init];
  return self;
}
- (AVIMPresenceCommandBuilder*) clone {
  return [AVIMPresenceCommand builderWithPrototype:resultPresenceCommand];
}
- (AVIMPresenceCommand*) defaultInstance {
  return [AVIMPresenceCommand defaultInstance];
}
- (AVIMPresenceCommand*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (AVIMPresenceCommand*) buildPartial {
  AVIMPresenceCommand* returnMe = resultPresenceCommand;
  self.resultPresenceCommand = nil;
  return returnMe;
}
- (AVIMPresenceCommandBuilder*) mergeFrom:(AVIMPresenceCommand*) other {
  if (other == [AVIMPresenceCommand defaultInstance]) {
    return self;
  }
  if (other.hasStatus) {
    [self setStatus:other.status];
  }
  if (other.sessionPeerIdsArray.count > 0) {
    if (resultPresenceCommand.sessionPeerIdsArray == nil) {
      resultPresenceCommand.sessionPeerIdsArray = [[NSMutableArray alloc] initWithArray:other.sessionPeerIdsArray];
    } else {
      [resultPresenceCommand.sessionPeerIdsArray addObjectsFromArray:other.sessionPeerIdsArray];
    }
  }
  if (other.hasCid) {
    [self setCid:other.cid];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (AVIMPresenceCommandBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (AVIMPresenceCommandBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        AVIMStatusType value = (AVIMStatusType)[input readEnum];
        if (AVIMStatusTypeIsValidValue(value)) {
          [self setStatus:value];
        } else {
          [unknownFields mergeVarintField:1 value:value];
        }
        break;
      }
      case 18: {
        [self addSessionPeerIds:[input readString]];
        break;
      }
      case 26: {
        [self setCid:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasStatus {
  return resultPresenceCommand.hasStatus;
}
- (AVIMStatusType) status {
  return resultPresenceCommand.status;
}
- (AVIMPresenceCommandBuilder*) setStatus:(AVIMStatusType) value {
  resultPresenceCommand.hasStatus = YES;
  resultPresenceCommand.status = value;
  return self;
}
- (AVIMPresenceCommandBuilder*) clearStatus {
  resultPresenceCommand.hasStatus = NO;
  resultPresenceCommand.status = AVIMStatusTypeOn;
  return self;
}
- (NSMutableArray *)sessionPeerIds {
  return resultPresenceCommand.sessionPeerIdsArray;
}
- (NSString*)sessionPeerIdsAtIndex:(NSUInteger)index {
  return [resultPresenceCommand sessionPeerIdsAtIndex:index];
}
- (AVIMPresenceCommandBuilder *)addSessionPeerIds:(NSString*)value {
  if (resultPresenceCommand.sessionPeerIdsArray == nil) {
    resultPresenceCommand.sessionPeerIdsArray = [[NSMutableArray alloc]init];
  }
  [resultPresenceCommand.sessionPeerIdsArray addObject:value];
  return self;
}
- (AVIMPresenceCommandBuilder *)setSessionPeerIdsArray:(NSArray *)array {
  resultPresenceCommand.sessionPeerIdsArray = [[NSMutableArray alloc] initWithArray:array];
  return self;
}
- (AVIMPresenceCommandBuilder *)clearSessionPeerIds {
  resultPresenceCommand.sessionPeerIdsArray = nil;
  return self;
}
- (BOOL) hasCid {
  return resultPresenceCommand.hasCid;
}
- (NSString*) cid {
  return resultPresenceCommand.cid;
}
- (AVIMPresenceCommandBuilder*) setCid:(NSString*) value {
  resultPresenceCommand.hasCid = YES;
  resultPresenceCommand.cid = value;
  return self;
}
- (AVIMPresenceCommandBuilder*) clearCid {
  resultPresenceCommand.hasCid = NO;
  resultPresenceCommand.cid = @"";
  return self;
}
@end

@interface AVIMReportCommand ()
@property BOOL initiative;
@property (strong) NSString* type;
@property (strong) NSString* data;
@end

@implementation AVIMReportCommand

- (BOOL) hasInitiative {
  return !!hasInitiative_;
}
- (void) setHasInitiative:(BOOL) _value_ {
  hasInitiative_ = !!_value_;
}
- (BOOL) initiative {
  return !!initiative_;
}
- (void) setInitiative:(BOOL) _value_ {
  initiative_ = !!_value_;
}
- (BOOL) hasType {
  return !!hasType_;
}
- (void) setHasType:(BOOL) _value_ {
  hasType_ = !!_value_;
}
@synthesize type;
- (BOOL) hasData {
  return !!hasData_;
}
- (void) setHasData:(BOOL) _value_ {
  hasData_ = !!_value_;
}
@synthesize data;
- (instancetype) init {
  if ((self = [super init])) {
    self.initiative = NO;
    self.type = @"";
    self.data = @"";
  }
  return self;
}
static AVIMReportCommand* defaultAVIMReportCommandInstance = nil;
+ (void) initialize {
  if (self == [AVIMReportCommand class]) {
    defaultAVIMReportCommandInstance = [[AVIMReportCommand alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultAVIMReportCommandInstance;
}
- (instancetype) defaultInstance {
  return defaultAVIMReportCommandInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasInitiative) {
    [output writeBool:1 value:self.initiative];
  }
  if (self.hasType) {
    [output writeString:2 value:self.type];
  }
  if (self.hasData) {
    [output writeString:3 value:self.data];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasInitiative) {
    size_ += computeBoolSize(1, self.initiative);
  }
  if (self.hasType) {
    size_ += computeStringSize(2, self.type);
  }
  if (self.hasData) {
    size_ += computeStringSize(3, self.data);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (AVIMReportCommand*) parseFromData:(NSData*) data {
  return (AVIMReportCommand*)[[[AVIMReportCommand builder] mergeFromData:data] build];
}
+ (AVIMReportCommand*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (AVIMReportCommand*)[[[AVIMReportCommand builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (AVIMReportCommand*) parseFromInputStream:(NSInputStream*) input {
  return (AVIMReportCommand*)[[[AVIMReportCommand builder] mergeFromInputStream:input] build];
}
+ (AVIMReportCommand*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (AVIMReportCommand*)[[[AVIMReportCommand builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (AVIMReportCommand*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (AVIMReportCommand*)[[[AVIMReportCommand builder] mergeFromCodedInputStream:input] build];
}
+ (AVIMReportCommand*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (AVIMReportCommand*)[[[AVIMReportCommand builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (AVIMReportCommandBuilder*) builder {
  return [[AVIMReportCommandBuilder alloc] init];
}
+ (AVIMReportCommandBuilder*) builderWithPrototype:(AVIMReportCommand*) prototype {
  return [[AVIMReportCommand builder] mergeFrom:prototype];
}
- (AVIMReportCommandBuilder*) builder {
  return [AVIMReportCommand builder];
}
- (AVIMReportCommandBuilder*) toBuilder {
  return [AVIMReportCommand builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasInitiative) {
    [output appendFormat:@"%@%@: %@\n", indent, @"initiative", [NSNumber numberWithBool:self.initiative]];
  }
  if (self.hasType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"type", self.type];
  }
  if (self.hasData) {
    [output appendFormat:@"%@%@: %@\n", indent, @"data", self.data];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasInitiative) {
    [dictionary setObject: [NSNumber numberWithBool:self.initiative] forKey: @"initiative"];
  }
  if (self.hasType) {
    [dictionary setObject: self.type forKey: @"type"];
  }
  if (self.hasData) {
    [dictionary setObject: self.data forKey: @"data"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[AVIMReportCommand class]]) {
    return NO;
  }
  AVIMReportCommand *otherMessage = other;
  return
      self.hasInitiative == otherMessage.hasInitiative &&
      (!self.hasInitiative || self.initiative == otherMessage.initiative) &&
      self.hasType == otherMessage.hasType &&
      (!self.hasType || [self.type isEqual:otherMessage.type]) &&
      self.hasData == otherMessage.hasData &&
      (!self.hasData || [self.data isEqual:otherMessage.data]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasInitiative) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.initiative] hash];
  }
  if (self.hasType) {
    hashCode = hashCode * 31 + [self.type hash];
  }
  if (self.hasData) {
    hashCode = hashCode * 31 + [self.data hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface AVIMReportCommandBuilder()
@property (strong) AVIMReportCommand* resultReportCommand;
@end

@implementation AVIMReportCommandBuilder
@synthesize resultReportCommand;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultReportCommand = [[AVIMReportCommand alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultReportCommand;
}
- (AVIMReportCommandBuilder*) clear {
  self.resultReportCommand = [[AVIMReportCommand alloc] init];
  return self;
}
- (AVIMReportCommandBuilder*) clone {
  return [AVIMReportCommand builderWithPrototype:resultReportCommand];
}
- (AVIMReportCommand*) defaultInstance {
  return [AVIMReportCommand defaultInstance];
}
- (AVIMReportCommand*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (AVIMReportCommand*) buildPartial {
  AVIMReportCommand* returnMe = resultReportCommand;
  self.resultReportCommand = nil;
  return returnMe;
}
- (AVIMReportCommandBuilder*) mergeFrom:(AVIMReportCommand*) other {
  if (other == [AVIMReportCommand defaultInstance]) {
    return self;
  }
  if (other.hasInitiative) {
    [self setInitiative:other.initiative];
  }
  if (other.hasType) {
    [self setType:other.type];
  }
  if (other.hasData) {
    [self setData:other.data];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (AVIMReportCommandBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (AVIMReportCommandBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setInitiative:[input readBool]];
        break;
      }
      case 18: {
        [self setType:[input readString]];
        break;
      }
      case 26: {
        [self setData:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasInitiative {
  return resultReportCommand.hasInitiative;
}
- (BOOL) initiative {
  return resultReportCommand.initiative;
}
- (AVIMReportCommandBuilder*) setInitiative:(BOOL) value {
  resultReportCommand.hasInitiative = YES;
  resultReportCommand.initiative = value;
  return self;
}
- (AVIMReportCommandBuilder*) clearInitiative {
  resultReportCommand.hasInitiative = NO;
  resultReportCommand.initiative = NO;
  return self;
}
- (BOOL) hasType {
  return resultReportCommand.hasType;
}
- (NSString*) type {
  return resultReportCommand.type;
}
- (AVIMReportCommandBuilder*) setType:(NSString*) value {
  resultReportCommand.hasType = YES;
  resultReportCommand.type = value;
  return self;
}
- (AVIMReportCommandBuilder*) clearType {
  resultReportCommand.hasType = NO;
  resultReportCommand.type = @"";
  return self;
}
- (BOOL) hasData {
  return resultReportCommand.hasData;
}
- (NSString*) data {
  return resultReportCommand.data;
}
- (AVIMReportCommandBuilder*) setData:(NSString*) value {
  resultReportCommand.hasData = YES;
  resultReportCommand.data = value;
  return self;
}
- (AVIMReportCommandBuilder*) clearData {
  resultReportCommand.hasData = NO;
  resultReportCommand.data = @"";
  return self;
}
@end

@interface AVIMPatchItem ()
@property (strong) NSString* cid;
@property (strong) NSString* mid;
@property SInt64 timestamp;
@property BOOL recall;
@property (strong) NSString* data;
@property SInt64 patchTimestamp;
@property (strong) NSString* pb_from;
@end

@implementation AVIMPatchItem

- (BOOL) hasCid {
  return !!hasCid_;
}
- (void) setHasCid:(BOOL) _value_ {
  hasCid_ = !!_value_;
}
@synthesize cid;
- (BOOL) hasMid {
  return !!hasMid_;
}
- (void) setHasMid:(BOOL) _value_ {
  hasMid_ = !!_value_;
}
@synthesize mid;
- (BOOL) hasTimestamp {
  return !!hasTimestamp_;
}
- (void) setHasTimestamp:(BOOL) _value_ {
  hasTimestamp_ = !!_value_;
}
@synthesize timestamp;
- (BOOL) hasRecall {
  return !!hasRecall_;
}
- (void) setHasRecall:(BOOL) _value_ {
  hasRecall_ = !!_value_;
}
- (BOOL) recall {
  return !!recall_;
}
- (void) setRecall:(BOOL) _value_ {
  recall_ = !!_value_;
}
- (BOOL) hasData {
  return !!hasData_;
}
- (void) setHasData:(BOOL) _value_ {
  hasData_ = !!_value_;
}
@synthesize data;
- (BOOL) hasPatchTimestamp {
  return !!hasPatchTimestamp_;
}
- (void) setHasPatchTimestamp:(BOOL) _value_ {
  hasPatchTimestamp_ = !!_value_;
}
@synthesize patchTimestamp;
- (BOOL) hasFrom {
  return !!hasFrom_;
}
- (void) setHasFrom:(BOOL) _value_ {
  hasFrom_ = !!_value_;
}
@synthesize pb_from;
- (instancetype) init {
  if ((self = [super init])) {
    self.cid = @"";
    self.mid = @"";
    self.timestamp = 0L;
    self.recall = NO;
    self.data = @"";
    self.patchTimestamp = 0L;
    self.pb_from = @"";
  }
  return self;
}
static AVIMPatchItem* defaultAVIMPatchItemInstance = nil;
+ (void) initialize {
  if (self == [AVIMPatchItem class]) {
    defaultAVIMPatchItemInstance = [[AVIMPatchItem alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultAVIMPatchItemInstance;
}
- (instancetype) defaultInstance {
  return defaultAVIMPatchItemInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasCid) {
    [output writeString:1 value:self.cid];
  }
  if (self.hasMid) {
    [output writeString:2 value:self.mid];
  }
  if (self.hasTimestamp) {
    [output writeInt64:3 value:self.timestamp];
  }
  if (self.hasRecall) {
    [output writeBool:4 value:self.recall];
  }
  if (self.hasData) {
    [output writeString:5 value:self.data];
  }
  if (self.hasPatchTimestamp) {
    [output writeInt64:6 value:self.patchTimestamp];
  }
  if (self.hasFrom) {
    [output writeString:7 value:self.pb_from];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasCid) {
    size_ += computeStringSize(1, self.cid);
  }
  if (self.hasMid) {
    size_ += computeStringSize(2, self.mid);
  }
  if (self.hasTimestamp) {
    size_ += computeInt64Size(3, self.timestamp);
  }
  if (self.hasRecall) {
    size_ += computeBoolSize(4, self.recall);
  }
  if (self.hasData) {
    size_ += computeStringSize(5, self.data);
  }
  if (self.hasPatchTimestamp) {
    size_ += computeInt64Size(6, self.patchTimestamp);
  }
  if (self.hasFrom) {
    size_ += computeStringSize(7, self.pb_from);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (AVIMPatchItem*) parseFromData:(NSData*) data {
  return (AVIMPatchItem*)[[[AVIMPatchItem builder] mergeFromData:data] build];
}
+ (AVIMPatchItem*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (AVIMPatchItem*)[[[AVIMPatchItem builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (AVIMPatchItem*) parseFromInputStream:(NSInputStream*) input {
  return (AVIMPatchItem*)[[[AVIMPatchItem builder] mergeFromInputStream:input] build];
}
+ (AVIMPatchItem*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (AVIMPatchItem*)[[[AVIMPatchItem builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (AVIMPatchItem*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (AVIMPatchItem*)[[[AVIMPatchItem builder] mergeFromCodedInputStream:input] build];
}
+ (AVIMPatchItem*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (AVIMPatchItem*)[[[AVIMPatchItem builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (AVIMPatchItemBuilder*) builder {
  return [[AVIMPatchItemBuilder alloc] init];
}
+ (AVIMPatchItemBuilder*) builderWithPrototype:(AVIMPatchItem*) prototype {
  return [[AVIMPatchItem builder] mergeFrom:prototype];
}
- (AVIMPatchItemBuilder*) builder {
  return [AVIMPatchItem builder];
}
- (AVIMPatchItemBuilder*) toBuilder {
  return [AVIMPatchItem builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasCid) {
    [output appendFormat:@"%@%@: %@\n", indent, @"cid", self.cid];
  }
  if (self.hasMid) {
    [output appendFormat:@"%@%@: %@\n", indent, @"mid", self.mid];
  }
  if (self.hasTimestamp) {
    [output appendFormat:@"%@%@: %@\n", indent, @"timestamp", [NSNumber numberWithLongLong:self.timestamp]];
  }
  if (self.hasRecall) {
    [output appendFormat:@"%@%@: %@\n", indent, @"recall", [NSNumber numberWithBool:self.recall]];
  }
  if (self.hasData) {
    [output appendFormat:@"%@%@: %@\n", indent, @"data", self.data];
  }
  if (self.hasPatchTimestamp) {
    [output appendFormat:@"%@%@: %@\n", indent, @"patchTimestamp", [NSNumber numberWithLongLong:self.patchTimestamp]];
  }
  if (self.hasFrom) {
    [output appendFormat:@"%@%@: %@\n", indent, @"pb_from", self.pb_from];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasCid) {
    [dictionary setObject: self.cid forKey: @"cid"];
  }
  if (self.hasMid) {
    [dictionary setObject: self.mid forKey: @"mid"];
  }
  if (self.hasTimestamp) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.timestamp] forKey: @"timestamp"];
  }
  if (self.hasRecall) {
    [dictionary setObject: [NSNumber numberWithBool:self.recall] forKey: @"recall"];
  }
  if (self.hasData) {
    [dictionary setObject: self.data forKey: @"data"];
  }
  if (self.hasPatchTimestamp) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.patchTimestamp] forKey: @"patchTimestamp"];
  }
  if (self.hasFrom) {
    [dictionary setObject: self.pb_from forKey: @"pb_from"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[AVIMPatchItem class]]) {
    return NO;
  }
  AVIMPatchItem *otherMessage = other;
  return
      self.hasCid == otherMessage.hasCid &&
      (!self.hasCid || [self.cid isEqual:otherMessage.cid]) &&
      self.hasMid == otherMessage.hasMid &&
      (!self.hasMid || [self.mid isEqual:otherMessage.mid]) &&
      self.hasTimestamp == otherMessage.hasTimestamp &&
      (!self.hasTimestamp || self.timestamp == otherMessage.timestamp) &&
      self.hasRecall == otherMessage.hasRecall &&
      (!self.hasRecall || self.recall == otherMessage.recall) &&
      self.hasData == otherMessage.hasData &&
      (!self.hasData || [self.data isEqual:otherMessage.data]) &&
      self.hasPatchTimestamp == otherMessage.hasPatchTimestamp &&
      (!self.hasPatchTimestamp || self.patchTimestamp == otherMessage.patchTimestamp) &&
      self.hasFrom == otherMessage.hasFrom &&
      (!self.hasFrom || [self.pb_from isEqual:otherMessage.pb_from]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasCid) {
    hashCode = hashCode * 31 + [self.cid hash];
  }
  if (self.hasMid) {
    hashCode = hashCode * 31 + [self.mid hash];
  }
  if (self.hasTimestamp) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.timestamp] hash];
  }
  if (self.hasRecall) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.recall] hash];
  }
  if (self.hasData) {
    hashCode = hashCode * 31 + [self.data hash];
  }
  if (self.hasPatchTimestamp) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.patchTimestamp] hash];
  }
  if (self.hasFrom) {
    hashCode = hashCode * 31 + [self.pb_from hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface AVIMPatchItemBuilder()
@property (strong) AVIMPatchItem* resultPatchItem;
@end

@implementation AVIMPatchItemBuilder
@synthesize resultPatchItem;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultPatchItem = [[AVIMPatchItem alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultPatchItem;
}
- (AVIMPatchItemBuilder*) clear {
  self.resultPatchItem = [[AVIMPatchItem alloc] init];
  return self;
}
- (AVIMPatchItemBuilder*) clone {
  return [AVIMPatchItem builderWithPrototype:resultPatchItem];
}
- (AVIMPatchItem*) defaultInstance {
  return [AVIMPatchItem defaultInstance];
}
- (AVIMPatchItem*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (AVIMPatchItem*) buildPartial {
  AVIMPatchItem* returnMe = resultPatchItem;
  self.resultPatchItem = nil;
  return returnMe;
}
- (AVIMPatchItemBuilder*) mergeFrom:(AVIMPatchItem*) other {
  if (other == [AVIMPatchItem defaultInstance]) {
    return self;
  }
  if (other.hasCid) {
    [self setCid:other.cid];
  }
  if (other.hasMid) {
    [self setMid:other.mid];
  }
  if (other.hasTimestamp) {
    [self setTimestamp:other.timestamp];
  }
  if (other.hasRecall) {
    [self setRecall:other.recall];
  }
  if (other.hasData) {
    [self setData:other.data];
  }
  if (other.hasPatchTimestamp) {
    [self setPatchTimestamp:other.patchTimestamp];
  }
  if (other.hasFrom) {
    [self setFrom:other.pb_from];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (AVIMPatchItemBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (AVIMPatchItemBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setCid:[input readString]];
        break;
      }
      case 18: {
        [self setMid:[input readString]];
        break;
      }
      case 24: {
        [self setTimestamp:[input readInt64]];
        break;
      }
      case 32: {
        [self setRecall:[input readBool]];
        break;
      }
      case 42: {
        [self setData:[input readString]];
        break;
      }
      case 48: {
        [self setPatchTimestamp:[input readInt64]];
        break;
      }
      case 58: {
        [self setFrom:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasCid {
  return resultPatchItem.hasCid;
}
- (NSString*) cid {
  return resultPatchItem.cid;
}
- (AVIMPatchItemBuilder*) setCid:(NSString*) value {
  resultPatchItem.hasCid = YES;
  resultPatchItem.cid = value;
  return self;
}
- (AVIMPatchItemBuilder*) clearCid {
  resultPatchItem.hasCid = NO;
  resultPatchItem.cid = @"";
  return self;
}
- (BOOL) hasMid {
  return resultPatchItem.hasMid;
}
- (NSString*) mid {
  return resultPatchItem.mid;
}
- (AVIMPatchItemBuilder*) setMid:(NSString*) value {
  resultPatchItem.hasMid = YES;
  resultPatchItem.mid = value;
  return self;
}
- (AVIMPatchItemBuilder*) clearMid {
  resultPatchItem.hasMid = NO;
  resultPatchItem.mid = @"";
  return self;
}
- (BOOL) hasTimestamp {
  return resultPatchItem.hasTimestamp;
}
- (SInt64) timestamp {
  return resultPatchItem.timestamp;
}
- (AVIMPatchItemBuilder*) setTimestamp:(SInt64) value {
  resultPatchItem.hasTimestamp = YES;
  resultPatchItem.timestamp = value;
  return self;
}
- (AVIMPatchItemBuilder*) clearTimestamp {
  resultPatchItem.hasTimestamp = NO;
  resultPatchItem.timestamp = 0L;
  return self;
}
- (BOOL) hasRecall {
  return resultPatchItem.hasRecall;
}
- (BOOL) recall {
  return resultPatchItem.recall;
}
- (AVIMPatchItemBuilder*) setRecall:(BOOL) value {
  resultPatchItem.hasRecall = YES;
  resultPatchItem.recall = value;
  return self;
}
- (AVIMPatchItemBuilder*) clearRecall {
  resultPatchItem.hasRecall = NO;
  resultPatchItem.recall = NO;
  return self;
}
- (BOOL) hasData {
  return resultPatchItem.hasData;
}
- (NSString*) data {
  return resultPatchItem.data;
}
- (AVIMPatchItemBuilder*) setData:(NSString*) value {
  resultPatchItem.hasData = YES;
  resultPatchItem.data = value;
  return self;
}
- (AVIMPatchItemBuilder*) clearData {
  resultPatchItem.hasData = NO;
  resultPatchItem.data = @"";
  return self;
}
- (BOOL) hasPatchTimestamp {
  return resultPatchItem.hasPatchTimestamp;
}
- (SInt64) patchTimestamp {
  return resultPatchItem.patchTimestamp;
}
- (AVIMPatchItemBuilder*) setPatchTimestamp:(SInt64) value {
  resultPatchItem.hasPatchTimestamp = YES;
  resultPatchItem.patchTimestamp = value;
  return self;
}
- (AVIMPatchItemBuilder*) clearPatchTimestamp {
  resultPatchItem.hasPatchTimestamp = NO;
  resultPatchItem.patchTimestamp = 0L;
  return self;
}
- (BOOL) hasFrom {
  return resultPatchItem.hasFrom;
}
- (NSString*) pb_from {
  return resultPatchItem.pb_from;
}
- (AVIMPatchItemBuilder*) setFrom:(NSString*) value {
  resultPatchItem.hasFrom = YES;
  resultPatchItem.pb_from = value;
  return self;
}
- (AVIMPatchItemBuilder*) clearFrom {
  resultPatchItem.hasFrom = NO;
  resultPatchItem.pb_from = @"";
  return self;
}
@end

@interface AVIMPatchCommand ()
@property (strong) NSMutableArray * patchesArray;
@property SInt64 lastPatchTime;
@end

@implementation AVIMPatchCommand

@synthesize patchesArray;
@dynamic patches;
- (BOOL) hasLastPatchTime {
  return !!hasLastPatchTime_;
}
- (void) setHasLastPatchTime:(BOOL) _value_ {
  hasLastPatchTime_ = !!_value_;
}
@synthesize lastPatchTime;
- (instancetype) init {
  if ((self = [super init])) {
    self.lastPatchTime = 0L;
  }
  return self;
}
static AVIMPatchCommand* defaultAVIMPatchCommandInstance = nil;
+ (void) initialize {
  if (self == [AVIMPatchCommand class]) {
    defaultAVIMPatchCommandInstance = [[AVIMPatchCommand alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultAVIMPatchCommandInstance;
}
- (instancetype) defaultInstance {
  return defaultAVIMPatchCommandInstance;
}
- (NSArray *)patches {
  return patchesArray;
}
- (AVIMPatchItem*)patchesAtIndex:(NSUInteger)index {
  return [patchesArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  [self.patchesArray enumerateObjectsUsingBlock:^(AVIMPatchItem *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:1 value:element];
  }];
  if (self.hasLastPatchTime) {
    [output writeInt64:2 value:self.lastPatchTime];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  [self.patchesArray enumerateObjectsUsingBlock:^(AVIMPatchItem *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(1, element);
  }];
  if (self.hasLastPatchTime) {
    size_ += computeInt64Size(2, self.lastPatchTime);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (AVIMPatchCommand*) parseFromData:(NSData*) data {
  return (AVIMPatchCommand*)[[[AVIMPatchCommand builder] mergeFromData:data] build];
}
+ (AVIMPatchCommand*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (AVIMPatchCommand*)[[[AVIMPatchCommand builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (AVIMPatchCommand*) parseFromInputStream:(NSInputStream*) input {
  return (AVIMPatchCommand*)[[[AVIMPatchCommand builder] mergeFromInputStream:input] build];
}
+ (AVIMPatchCommand*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (AVIMPatchCommand*)[[[AVIMPatchCommand builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (AVIMPatchCommand*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (AVIMPatchCommand*)[[[AVIMPatchCommand builder] mergeFromCodedInputStream:input] build];
}
+ (AVIMPatchCommand*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (AVIMPatchCommand*)[[[AVIMPatchCommand builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (AVIMPatchCommandBuilder*) builder {
  return [[AVIMPatchCommandBuilder alloc] init];
}
+ (AVIMPatchCommandBuilder*) builderWithPrototype:(AVIMPatchCommand*) prototype {
  return [[AVIMPatchCommand builder] mergeFrom:prototype];
}
- (AVIMPatchCommandBuilder*) builder {
  return [AVIMPatchCommand builder];
}
- (AVIMPatchCommandBuilder*) toBuilder {
  return [AVIMPatchCommand builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  [self.patchesArray enumerateObjectsUsingBlock:^(AVIMPatchItem *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"patches"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  if (self.hasLastPatchTime) {
    [output appendFormat:@"%@%@: %@\n", indent, @"lastPatchTime", [NSNumber numberWithLongLong:self.lastPatchTime]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  for (AVIMPatchItem* element in self.patchesArray) {
    NSMutableDictionary *elementDictionary = [NSMutableDictionary dictionary];
    [element storeInDictionary:elementDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:elementDictionary] forKey:@"patches"];
  }
  if (self.hasLastPatchTime) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.lastPatchTime] forKey: @"lastPatchTime"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[AVIMPatchCommand class]]) {
    return NO;
  }
  AVIMPatchCommand *otherMessage = other;
  return
      [self.patchesArray isEqualToArray:otherMessage.patchesArray] &&
      self.hasLastPatchTime == otherMessage.hasLastPatchTime &&
      (!self.hasLastPatchTime || self.lastPatchTime == otherMessage.lastPatchTime) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  [self.patchesArray enumerateObjectsUsingBlock:^(AVIMPatchItem *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  if (self.hasLastPatchTime) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.lastPatchTime] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface AVIMPatchCommandBuilder()
@property (strong) AVIMPatchCommand* resultPatchCommand;
@end

@implementation AVIMPatchCommandBuilder
@synthesize resultPatchCommand;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultPatchCommand = [[AVIMPatchCommand alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultPatchCommand;
}
- (AVIMPatchCommandBuilder*) clear {
  self.resultPatchCommand = [[AVIMPatchCommand alloc] init];
  return self;
}
- (AVIMPatchCommandBuilder*) clone {
  return [AVIMPatchCommand builderWithPrototype:resultPatchCommand];
}
- (AVIMPatchCommand*) defaultInstance {
  return [AVIMPatchCommand defaultInstance];
}
- (AVIMPatchCommand*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (AVIMPatchCommand*) buildPartial {
  AVIMPatchCommand* returnMe = resultPatchCommand;
  self.resultPatchCommand = nil;
  return returnMe;
}
- (AVIMPatchCommandBuilder*) mergeFrom:(AVIMPatchCommand*) other {
  if (other == [AVIMPatchCommand defaultInstance]) {
    return self;
  }
  if (other.patchesArray.count > 0) {
    if (resultPatchCommand.patchesArray == nil) {
      resultPatchCommand.patchesArray = [[NSMutableArray alloc] initWithArray:other.patchesArray];
    } else {
      [resultPatchCommand.patchesArray addObjectsFromArray:other.patchesArray];
    }
  }
  if (other.hasLastPatchTime) {
    [self setLastPatchTime:other.lastPatchTime];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (AVIMPatchCommandBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (AVIMPatchCommandBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        AVIMPatchItemBuilder* subBuilder = [AVIMPatchItem builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addPatches:[subBuilder buildPartial]];
        break;
      }
      case 16: {
        [self setLastPatchTime:[input readInt64]];
        break;
      }
    }
  }
}
- (NSMutableArray *)patches {
  return resultPatchCommand.patchesArray;
}
- (AVIMPatchItem*)patchesAtIndex:(NSUInteger)index {
  return [resultPatchCommand patchesAtIndex:index];
}
- (AVIMPatchCommandBuilder *)addPatches:(AVIMPatchItem*)value {
  if (resultPatchCommand.patchesArray == nil) {
    resultPatchCommand.patchesArray = [[NSMutableArray alloc]init];
  }
  [resultPatchCommand.patchesArray addObject:value];
  return self;
}
- (AVIMPatchCommandBuilder *)setPatchesArray:(NSArray *)array {
  resultPatchCommand.patchesArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (AVIMPatchCommandBuilder *)clearPatches {
  resultPatchCommand.patchesArray = nil;
  return self;
}
- (BOOL) hasLastPatchTime {
  return resultPatchCommand.hasLastPatchTime;
}
- (SInt64) lastPatchTime {
  return resultPatchCommand.lastPatchTime;
}
- (AVIMPatchCommandBuilder*) setLastPatchTime:(SInt64) value {
  resultPatchCommand.hasLastPatchTime = YES;
  resultPatchCommand.lastPatchTime = value;
  return self;
}
- (AVIMPatchCommandBuilder*) clearLastPatchTime {
  resultPatchCommand.hasLastPatchTime = NO;
  resultPatchCommand.lastPatchTime = 0L;
  return self;
}
@end

@interface AVIMGenericCommand ()
@property AVIMCommandType cmd;
@property AVIMOpType op;
@property (strong) NSString* appId;
@property (strong) NSString* peerId;
@property SInt32 i;
@property (strong) NSString* installationId;
@property SInt32 priority;
@property SInt32 service;
@property (strong) AVIMDataCommand* dataMessage;
@property (strong) AVIMSessionCommand* sessionMessage;
@property (strong) AVIMErrorCommand* errorMessage;
@property (strong) AVIMDirectCommand* directMessage;
@property (strong) AVIMAckCommand* ackMessage;
@property (strong) AVIMUnreadCommand* unreadMessage;
@property (strong) AVIMReadCommand* readMessage;
@property (strong) AVIMRcpCommand* rcpMessage;
@property (strong) AVIMLogsCommand* logsMessage;
@property (strong) AVIMConvCommand* convMessage;
@property (strong) AVIMRoomCommand* roomMessage;
@property (strong) AVIMPresenceCommand* presenceMessage;
@property (strong) AVIMReportCommand* reportMessage;
@property (strong) AVIMPatchCommand* patchMessage;
@end

@implementation AVIMGenericCommand

- (BOOL) hasCmd {
  return !!hasCmd_;
}
- (void) setHasCmd:(BOOL) _value_ {
  hasCmd_ = !!_value_;
}
@synthesize cmd;
- (BOOL) hasOp {
  return !!hasOp_;
}
- (void) setHasOp:(BOOL) _value_ {
  hasOp_ = !!_value_;
}
@synthesize op;
- (BOOL) hasAppId {
  return !!hasAppId_;
}
- (void) setHasAppId:(BOOL) _value_ {
  hasAppId_ = !!_value_;
}
@synthesize appId;
- (BOOL) hasPeerId {
  return !!hasPeerId_;
}
- (void) setHasPeerId:(BOOL) _value_ {
  hasPeerId_ = !!_value_;
}
@synthesize peerId;
- (BOOL) hasI {
  return !!hasI_;
}
- (void) setHasI:(BOOL) _value_ {
  hasI_ = !!_value_;
}
@synthesize i;
- (BOOL) hasInstallationId {
  return !!hasInstallationId_;
}
- (void) setHasInstallationId:(BOOL) _value_ {
  hasInstallationId_ = !!_value_;
}
@synthesize installationId;
- (BOOL) hasPriority {
  return !!hasPriority_;
}
- (void) setHasPriority:(BOOL) _value_ {
  hasPriority_ = !!_value_;
}
@synthesize priority;
- (BOOL) hasService {
  return !!hasService_;
}
- (void) setHasService:(BOOL) _value_ {
  hasService_ = !!_value_;
}
@synthesize service;
- (BOOL) hasDataMessage {
  return !!hasDataMessage_;
}
- (void) setHasDataMessage:(BOOL) _value_ {
  hasDataMessage_ = !!_value_;
}
@synthesize dataMessage;
- (BOOL) hasSessionMessage {
  return !!hasSessionMessage_;
}
- (void) setHasSessionMessage:(BOOL) _value_ {
  hasSessionMessage_ = !!_value_;
}
@synthesize sessionMessage;
- (BOOL) hasErrorMessage {
  return !!hasErrorMessage_;
}
- (void) setHasErrorMessage:(BOOL) _value_ {
  hasErrorMessage_ = !!_value_;
}
@synthesize errorMessage;
- (BOOL) hasDirectMessage {
  return !!hasDirectMessage_;
}
- (void) setHasDirectMessage:(BOOL) _value_ {
  hasDirectMessage_ = !!_value_;
}
@synthesize directMessage;
- (BOOL) hasAckMessage {
  return !!hasAckMessage_;
}
- (void) setHasAckMessage:(BOOL) _value_ {
  hasAckMessage_ = !!_value_;
}
@synthesize ackMessage;
- (BOOL) hasUnreadMessage {
  return !!hasUnreadMessage_;
}
- (void) setHasUnreadMessage:(BOOL) _value_ {
  hasUnreadMessage_ = !!_value_;
}
@synthesize unreadMessage;
- (BOOL) hasReadMessage {
  return !!hasReadMessage_;
}
- (void) setHasReadMessage:(BOOL) _value_ {
  hasReadMessage_ = !!_value_;
}
@synthesize readMessage;
- (BOOL) hasRcpMessage {
  return !!hasRcpMessage_;
}
- (void) setHasRcpMessage:(BOOL) _value_ {
  hasRcpMessage_ = !!_value_;
}
@synthesize rcpMessage;
- (BOOL) hasLogsMessage {
  return !!hasLogsMessage_;
}
- (void) setHasLogsMessage:(BOOL) _value_ {
  hasLogsMessage_ = !!_value_;
}
@synthesize logsMessage;
- (BOOL) hasConvMessage {
  return !!hasConvMessage_;
}
- (void) setHasConvMessage:(BOOL) _value_ {
  hasConvMessage_ = !!_value_;
}
@synthesize convMessage;
- (BOOL) hasRoomMessage {
  return !!hasRoomMessage_;
}
- (void) setHasRoomMessage:(BOOL) _value_ {
  hasRoomMessage_ = !!_value_;
}
@synthesize roomMessage;
- (BOOL) hasPresenceMessage {
  return !!hasPresenceMessage_;
}
- (void) setHasPresenceMessage:(BOOL) _value_ {
  hasPresenceMessage_ = !!_value_;
}
@synthesize presenceMessage;
- (BOOL) hasReportMessage {
  return !!hasReportMessage_;
}
- (void) setHasReportMessage:(BOOL) _value_ {
  hasReportMessage_ = !!_value_;
}
@synthesize reportMessage;
- (BOOL) hasPatchMessage {
  return !!hasPatchMessage_;
}
- (void) setHasPatchMessage:(BOOL) _value_ {
  hasPatchMessage_ = !!_value_;
}
@synthesize patchMessage;
- (instancetype) init {
  if ((self = [super init])) {
    self.cmd = AVIMCommandTypeSession;
    self.op = AVIMOpTypeOpen;
    self.appId = @"";
    self.peerId = @"";
    self.i = 0;
    self.installationId = @"";
    self.priority = 0;
    self.service = 0;
    self.dataMessage = [AVIMDataCommand defaultInstance];
    self.sessionMessage = [AVIMSessionCommand defaultInstance];
    self.errorMessage = [AVIMErrorCommand defaultInstance];
    self.directMessage = [AVIMDirectCommand defaultInstance];
    self.ackMessage = [AVIMAckCommand defaultInstance];
    self.unreadMessage = [AVIMUnreadCommand defaultInstance];
    self.readMessage = [AVIMReadCommand defaultInstance];
    self.rcpMessage = [AVIMRcpCommand defaultInstance];
    self.logsMessage = [AVIMLogsCommand defaultInstance];
    self.convMessage = [AVIMConvCommand defaultInstance];
    self.roomMessage = [AVIMRoomCommand defaultInstance];
    self.presenceMessage = [AVIMPresenceCommand defaultInstance];
    self.reportMessage = [AVIMReportCommand defaultInstance];
    self.patchMessage = [AVIMPatchCommand defaultInstance];
  }
  return self;
}
static AVIMGenericCommand* defaultAVIMGenericCommandInstance = nil;
+ (void) initialize {
  if (self == [AVIMGenericCommand class]) {
    defaultAVIMGenericCommandInstance = [[AVIMGenericCommand alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultAVIMGenericCommandInstance;
}
- (instancetype) defaultInstance {
  return defaultAVIMGenericCommandInstance;
}
- (BOOL) isInitialized {
  if (!self.hasCmd) {
    return NO;
  }
  if (self.hasDataMessage) {
    if (!self.dataMessage.isInitialized) {
      return NO;
    }
  }
  if (self.hasErrorMessage) {
    if (!self.errorMessage.isInitialized) {
      return NO;
    }
  }
  if (self.hasUnreadMessage) {
    if (!self.unreadMessage.isInitialized) {
      return NO;
    }
  }
  if (self.hasReadMessage) {
    if (!self.readMessage.isInitialized) {
      return NO;
    }
  }
  if (self.hasConvMessage) {
    if (!self.convMessage.isInitialized) {
      return NO;
    }
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasCmd) {
    [output writeEnum:1 value:self.cmd];
  }
  if (self.hasOp) {
    [output writeEnum:2 value:self.op];
  }
  if (self.hasAppId) {
    [output writeString:3 value:self.appId];
  }
  if (self.hasPeerId) {
    [output writeString:4 value:self.peerId];
  }
  if (self.hasI) {
    [output writeInt32:5 value:self.i];
  }
  if (self.hasInstallationId) {
    [output writeString:6 value:self.installationId];
  }
  if (self.hasPriority) {
    [output writeInt32:7 value:self.priority];
  }
  if (self.hasService) {
    [output writeInt32:8 value:self.service];
  }
  if (self.hasDataMessage) {
    [output writeMessage:101 value:self.dataMessage];
  }
  if (self.hasSessionMessage) {
    [output writeMessage:102 value:self.sessionMessage];
  }
  if (self.hasErrorMessage) {
    [output writeMessage:103 value:self.errorMessage];
  }
  if (self.hasDirectMessage) {
    [output writeMessage:104 value:self.directMessage];
  }
  if (self.hasAckMessage) {
    [output writeMessage:105 value:self.ackMessage];
  }
  if (self.hasUnreadMessage) {
    [output writeMessage:106 value:self.unreadMessage];
  }
  if (self.hasReadMessage) {
    [output writeMessage:107 value:self.readMessage];
  }
  if (self.hasRcpMessage) {
    [output writeMessage:108 value:self.rcpMessage];
  }
  if (self.hasLogsMessage) {
    [output writeMessage:109 value:self.logsMessage];
  }
  if (self.hasConvMessage) {
    [output writeMessage:110 value:self.convMessage];
  }
  if (self.hasRoomMessage) {
    [output writeMessage:111 value:self.roomMessage];
  }
  if (self.hasPresenceMessage) {
    [output writeMessage:112 value:self.presenceMessage];
  }
  if (self.hasReportMessage) {
    [output writeMessage:113 value:self.reportMessage];
  }
  if (self.hasPatchMessage) {
    [output writeMessage:114 value:self.patchMessage];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasCmd) {
    size_ += computeEnumSize(1, self.cmd);
  }
  if (self.hasOp) {
    size_ += computeEnumSize(2, self.op);
  }
  if (self.hasAppId) {
    size_ += computeStringSize(3, self.appId);
  }
  if (self.hasPeerId) {
    size_ += computeStringSize(4, self.peerId);
  }
  if (self.hasI) {
    size_ += computeInt32Size(5, self.i);
  }
  if (self.hasInstallationId) {
    size_ += computeStringSize(6, self.installationId);
  }
  if (self.hasPriority) {
    size_ += computeInt32Size(7, self.priority);
  }
  if (self.hasService) {
    size_ += computeInt32Size(8, self.service);
  }
  if (self.hasDataMessage) {
    size_ += computeMessageSize(101, self.dataMessage);
  }
  if (self.hasSessionMessage) {
    size_ += computeMessageSize(102, self.sessionMessage);
  }
  if (self.hasErrorMessage) {
    size_ += computeMessageSize(103, self.errorMessage);
  }
  if (self.hasDirectMessage) {
    size_ += computeMessageSize(104, self.directMessage);
  }
  if (self.hasAckMessage) {
    size_ += computeMessageSize(105, self.ackMessage);
  }
  if (self.hasUnreadMessage) {
    size_ += computeMessageSize(106, self.unreadMessage);
  }
  if (self.hasReadMessage) {
    size_ += computeMessageSize(107, self.readMessage);
  }
  if (self.hasRcpMessage) {
    size_ += computeMessageSize(108, self.rcpMessage);
  }
  if (self.hasLogsMessage) {
    size_ += computeMessageSize(109, self.logsMessage);
  }
  if (self.hasConvMessage) {
    size_ += computeMessageSize(110, self.convMessage);
  }
  if (self.hasRoomMessage) {
    size_ += computeMessageSize(111, self.roomMessage);
  }
  if (self.hasPresenceMessage) {
    size_ += computeMessageSize(112, self.presenceMessage);
  }
  if (self.hasReportMessage) {
    size_ += computeMessageSize(113, self.reportMessage);
  }
  if (self.hasPatchMessage) {
    size_ += computeMessageSize(114, self.patchMessage);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (AVIMGenericCommand*) parseFromData:(NSData*) data {
  return (AVIMGenericCommand*)[[[AVIMGenericCommand builder] mergeFromData:data] build];
}
+ (AVIMGenericCommand*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (AVIMGenericCommand*)[[[AVIMGenericCommand builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (AVIMGenericCommand*) parseFromInputStream:(NSInputStream*) input {
  return (AVIMGenericCommand*)[[[AVIMGenericCommand builder] mergeFromInputStream:input] build];
}
+ (AVIMGenericCommand*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (AVIMGenericCommand*)[[[AVIMGenericCommand builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (AVIMGenericCommand*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (AVIMGenericCommand*)[[[AVIMGenericCommand builder] mergeFromCodedInputStream:input] build];
}
+ (AVIMGenericCommand*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (AVIMGenericCommand*)[[[AVIMGenericCommand builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (AVIMGenericCommandBuilder*) builder {
  return [[AVIMGenericCommandBuilder alloc] init];
}
+ (AVIMGenericCommandBuilder*) builderWithPrototype:(AVIMGenericCommand*) prototype {
  return [[AVIMGenericCommand builder] mergeFrom:prototype];
}
- (AVIMGenericCommandBuilder*) builder {
  return [AVIMGenericCommand builder];
}
- (AVIMGenericCommandBuilder*) toBuilder {
  return [AVIMGenericCommand builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasCmd) {
    [output appendFormat:@"%@%@: %@\n", indent, @"cmd", NSStringFromAVIMCommandType(self.cmd)];
  }
  if (self.hasOp) {
    [output appendFormat:@"%@%@: %@\n", indent, @"op", NSStringFromAVIMOpType(self.op)];
  }
  if (self.hasAppId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"appId", self.appId];
  }
  if (self.hasPeerId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"peerId", self.peerId];
  }
  if (self.hasI) {
    [output appendFormat:@"%@%@: %@\n", indent, @"i", [NSNumber numberWithInteger:self.i]];
  }
  if (self.hasInstallationId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"installationId", self.installationId];
  }
  if (self.hasPriority) {
    [output appendFormat:@"%@%@: %@\n", indent, @"priority", [NSNumber numberWithInteger:self.priority]];
  }
  if (self.hasService) {
    [output appendFormat:@"%@%@: %@\n", indent, @"service", [NSNumber numberWithInteger:self.service]];
  }
  if (self.hasDataMessage) {
    [output appendFormat:@"%@%@ {\n", indent, @"dataMessage"];
    [self.dataMessage writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasSessionMessage) {
    [output appendFormat:@"%@%@ {\n", indent, @"sessionMessage"];
    [self.sessionMessage writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasErrorMessage) {
    [output appendFormat:@"%@%@ {\n", indent, @"errorMessage"];
    [self.errorMessage writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasDirectMessage) {
    [output appendFormat:@"%@%@ {\n", indent, @"directMessage"];
    [self.directMessage writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasAckMessage) {
    [output appendFormat:@"%@%@ {\n", indent, @"ackMessage"];
    [self.ackMessage writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasUnreadMessage) {
    [output appendFormat:@"%@%@ {\n", indent, @"unreadMessage"];
    [self.unreadMessage writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasReadMessage) {
    [output appendFormat:@"%@%@ {\n", indent, @"readMessage"];
    [self.readMessage writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasRcpMessage) {
    [output appendFormat:@"%@%@ {\n", indent, @"rcpMessage"];
    [self.rcpMessage writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasLogsMessage) {
    [output appendFormat:@"%@%@ {\n", indent, @"logsMessage"];
    [self.logsMessage writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasConvMessage) {
    [output appendFormat:@"%@%@ {\n", indent, @"convMessage"];
    [self.convMessage writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasRoomMessage) {
    [output appendFormat:@"%@%@ {\n", indent, @"roomMessage"];
    [self.roomMessage writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasPresenceMessage) {
    [output appendFormat:@"%@%@ {\n", indent, @"presenceMessage"];
    [self.presenceMessage writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasReportMessage) {
    [output appendFormat:@"%@%@ {\n", indent, @"reportMessage"];
    [self.reportMessage writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasPatchMessage) {
    [output appendFormat:@"%@%@ {\n", indent, @"patchMessage"];
    [self.patchMessage writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasCmd) {
    [dictionary setObject: @(self.cmd) forKey: @"cmd"];
  }
  if (self.hasOp) {
    [dictionary setObject: @(self.op) forKey: @"op"];
  }
  if (self.hasAppId) {
    [dictionary setObject: self.appId forKey: @"appId"];
  }
  if (self.hasPeerId) {
    [dictionary setObject: self.peerId forKey: @"peerId"];
  }
  if (self.hasI) {
    [dictionary setObject: [NSNumber numberWithInteger:self.i] forKey: @"i"];
  }
  if (self.hasInstallationId) {
    [dictionary setObject: self.installationId forKey: @"installationId"];
  }
  if (self.hasPriority) {
    [dictionary setObject: [NSNumber numberWithInteger:self.priority] forKey: @"priority"];
  }
  if (self.hasService) {
    [dictionary setObject: [NSNumber numberWithInteger:self.service] forKey: @"service"];
  }
  if (self.hasDataMessage) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.dataMessage storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"dataMessage"];
  }
  if (self.hasSessionMessage) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.sessionMessage storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"sessionMessage"];
  }
  if (self.hasErrorMessage) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.errorMessage storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"errorMessage"];
  }
  if (self.hasDirectMessage) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.directMessage storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"directMessage"];
  }
  if (self.hasAckMessage) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.ackMessage storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"ackMessage"];
  }
  if (self.hasUnreadMessage) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.unreadMessage storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"unreadMessage"];
  }
  if (self.hasReadMessage) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.readMessage storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"readMessage"];
  }
  if (self.hasRcpMessage) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.rcpMessage storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"rcpMessage"];
  }
  if (self.hasLogsMessage) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.logsMessage storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"logsMessage"];
  }
  if (self.hasConvMessage) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.convMessage storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"convMessage"];
  }
  if (self.hasRoomMessage) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.roomMessage storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"roomMessage"];
  }
  if (self.hasPresenceMessage) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.presenceMessage storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"presenceMessage"];
  }
  if (self.hasReportMessage) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.reportMessage storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"reportMessage"];
  }
  if (self.hasPatchMessage) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.patchMessage storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"patchMessage"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[AVIMGenericCommand class]]) {
    return NO;
  }
  AVIMGenericCommand *otherMessage = other;
  return
      self.hasCmd == otherMessage.hasCmd &&
      (!self.hasCmd || self.cmd == otherMessage.cmd) &&
      self.hasOp == otherMessage.hasOp &&
      (!self.hasOp || self.op == otherMessage.op) &&
      self.hasAppId == otherMessage.hasAppId &&
      (!self.hasAppId || [self.appId isEqual:otherMessage.appId]) &&
      self.hasPeerId == otherMessage.hasPeerId &&
      (!self.hasPeerId || [self.peerId isEqual:otherMessage.peerId]) &&
      self.hasI == otherMessage.hasI &&
      (!self.hasI || self.i == otherMessage.i) &&
      self.hasInstallationId == otherMessage.hasInstallationId &&
      (!self.hasInstallationId || [self.installationId isEqual:otherMessage.installationId]) &&
      self.hasPriority == otherMessage.hasPriority &&
      (!self.hasPriority || self.priority == otherMessage.priority) &&
      self.hasService == otherMessage.hasService &&
      (!self.hasService || self.service == otherMessage.service) &&
      self.hasDataMessage == otherMessage.hasDataMessage &&
      (!self.hasDataMessage || [self.dataMessage isEqual:otherMessage.dataMessage]) &&
      self.hasSessionMessage == otherMessage.hasSessionMessage &&
      (!self.hasSessionMessage || [self.sessionMessage isEqual:otherMessage.sessionMessage]) &&
      self.hasErrorMessage == otherMessage.hasErrorMessage &&
      (!self.hasErrorMessage || [self.errorMessage isEqual:otherMessage.errorMessage]) &&
      self.hasDirectMessage == otherMessage.hasDirectMessage &&
      (!self.hasDirectMessage || [self.directMessage isEqual:otherMessage.directMessage]) &&
      self.hasAckMessage == otherMessage.hasAckMessage &&
      (!self.hasAckMessage || [self.ackMessage isEqual:otherMessage.ackMessage]) &&
      self.hasUnreadMessage == otherMessage.hasUnreadMessage &&
      (!self.hasUnreadMessage || [self.unreadMessage isEqual:otherMessage.unreadMessage]) &&
      self.hasReadMessage == otherMessage.hasReadMessage &&
      (!self.hasReadMessage || [self.readMessage isEqual:otherMessage.readMessage]) &&
      self.hasRcpMessage == otherMessage.hasRcpMessage &&
      (!self.hasRcpMessage || [self.rcpMessage isEqual:otherMessage.rcpMessage]) &&
      self.hasLogsMessage == otherMessage.hasLogsMessage &&
      (!self.hasLogsMessage || [self.logsMessage isEqual:otherMessage.logsMessage]) &&
      self.hasConvMessage == otherMessage.hasConvMessage &&
      (!self.hasConvMessage || [self.convMessage isEqual:otherMessage.convMessage]) &&
      self.hasRoomMessage == otherMessage.hasRoomMessage &&
      (!self.hasRoomMessage || [self.roomMessage isEqual:otherMessage.roomMessage]) &&
      self.hasPresenceMessage == otherMessage.hasPresenceMessage &&
      (!self.hasPresenceMessage || [self.presenceMessage isEqual:otherMessage.presenceMessage]) &&
      self.hasReportMessage == otherMessage.hasReportMessage &&
      (!self.hasReportMessage || [self.reportMessage isEqual:otherMessage.reportMessage]) &&
      self.hasPatchMessage == otherMessage.hasPatchMessage &&
      (!self.hasPatchMessage || [self.patchMessage isEqual:otherMessage.patchMessage]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasCmd) {
    hashCode = hashCode * 31 + self.cmd;
  }
  if (self.hasOp) {
    hashCode = hashCode * 31 + self.op;
  }
  if (self.hasAppId) {
    hashCode = hashCode * 31 + [self.appId hash];
  }
  if (self.hasPeerId) {
    hashCode = hashCode * 31 + [self.peerId hash];
  }
  if (self.hasI) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.i] hash];
  }
  if (self.hasInstallationId) {
    hashCode = hashCode * 31 + [self.installationId hash];
  }
  if (self.hasPriority) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.priority] hash];
  }
  if (self.hasService) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.service] hash];
  }
  if (self.hasDataMessage) {
    hashCode = hashCode * 31 + [self.dataMessage hash];
  }
  if (self.hasSessionMessage) {
    hashCode = hashCode * 31 + [self.sessionMessage hash];
  }
  if (self.hasErrorMessage) {
    hashCode = hashCode * 31 + [self.errorMessage hash];
  }
  if (self.hasDirectMessage) {
    hashCode = hashCode * 31 + [self.directMessage hash];
  }
  if (self.hasAckMessage) {
    hashCode = hashCode * 31 + [self.ackMessage hash];
  }
  if (self.hasUnreadMessage) {
    hashCode = hashCode * 31 + [self.unreadMessage hash];
  }
  if (self.hasReadMessage) {
    hashCode = hashCode * 31 + [self.readMessage hash];
  }
  if (self.hasRcpMessage) {
    hashCode = hashCode * 31 + [self.rcpMessage hash];
  }
  if (self.hasLogsMessage) {
    hashCode = hashCode * 31 + [self.logsMessage hash];
  }
  if (self.hasConvMessage) {
    hashCode = hashCode * 31 + [self.convMessage hash];
  }
  if (self.hasRoomMessage) {
    hashCode = hashCode * 31 + [self.roomMessage hash];
  }
  if (self.hasPresenceMessage) {
    hashCode = hashCode * 31 + [self.presenceMessage hash];
  }
  if (self.hasReportMessage) {
    hashCode = hashCode * 31 + [self.reportMessage hash];
  }
  if (self.hasPatchMessage) {
    hashCode = hashCode * 31 + [self.patchMessage hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface AVIMGenericCommandBuilder()
@property (strong) AVIMGenericCommand* resultGenericCommand;
@end

@implementation AVIMGenericCommandBuilder
@synthesize resultGenericCommand;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultGenericCommand = [[AVIMGenericCommand alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultGenericCommand;
}
- (AVIMGenericCommandBuilder*) clear {
  self.resultGenericCommand = [[AVIMGenericCommand alloc] init];
  return self;
}
- (AVIMGenericCommandBuilder*) clone {
  return [AVIMGenericCommand builderWithPrototype:resultGenericCommand];
}
- (AVIMGenericCommand*) defaultInstance {
  return [AVIMGenericCommand defaultInstance];
}
- (AVIMGenericCommand*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (AVIMGenericCommand*) buildPartial {
  AVIMGenericCommand* returnMe = resultGenericCommand;
  self.resultGenericCommand = nil;
  return returnMe;
}
- (AVIMGenericCommandBuilder*) mergeFrom:(AVIMGenericCommand*) other {
  if (other == [AVIMGenericCommand defaultInstance]) {
    return self;
  }
  if (other.hasCmd) {
    [self setCmd:other.cmd];
  }
  if (other.hasOp) {
    [self setOp:other.op];
  }
  if (other.hasAppId) {
    [self setAppId:other.appId];
  }
  if (other.hasPeerId) {
    [self setPeerId:other.peerId];
  }
  if (other.hasI) {
    [self setI:other.i];
  }
  if (other.hasInstallationId) {
    [self setInstallationId:other.installationId];
  }
  if (other.hasPriority) {
    [self setPriority:other.priority];
  }
  if (other.hasService) {
    [self setService:other.service];
  }
  if (other.hasDataMessage) {
    [self mergeDataMessage:other.dataMessage];
  }
  if (other.hasSessionMessage) {
    [self mergeSessionMessage:other.sessionMessage];
  }
  if (other.hasErrorMessage) {
    [self mergeErrorMessage:other.errorMessage];
  }
  if (other.hasDirectMessage) {
    [self mergeDirectMessage:other.directMessage];
  }
  if (other.hasAckMessage) {
    [self mergeAckMessage:other.ackMessage];
  }
  if (other.hasUnreadMessage) {
    [self mergeUnreadMessage:other.unreadMessage];
  }
  if (other.hasReadMessage) {
    [self mergeReadMessage:other.readMessage];
  }
  if (other.hasRcpMessage) {
    [self mergeRcpMessage:other.rcpMessage];
  }
  if (other.hasLogsMessage) {
    [self mergeLogsMessage:other.logsMessage];
  }
  if (other.hasConvMessage) {
    [self mergeConvMessage:other.convMessage];
  }
  if (other.hasRoomMessage) {
    [self mergeRoomMessage:other.roomMessage];
  }
  if (other.hasPresenceMessage) {
    [self mergePresenceMessage:other.presenceMessage];
  }
  if (other.hasReportMessage) {
    [self mergeReportMessage:other.reportMessage];
  }
  if (other.hasPatchMessage) {
    [self mergePatchMessage:other.patchMessage];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (AVIMGenericCommandBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (AVIMGenericCommandBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        AVIMCommandType value = (AVIMCommandType)[input readEnum];
        if (AVIMCommandTypeIsValidValue(value)) {
          [self setCmd:value];
        } else {
          [unknownFields mergeVarintField:1 value:value];
        }
        break;
      }
      case 16: {
        AVIMOpType value = (AVIMOpType)[input readEnum];
        if (AVIMOpTypeIsValidValue(value)) {
          [self setOp:value];
        } else {
          [unknownFields mergeVarintField:2 value:value];
        }
        break;
      }
      case 26: {
        [self setAppId:[input readString]];
        break;
      }
      case 34: {
        [self setPeerId:[input readString]];
        break;
      }
      case 40: {
        [self setI:[input readInt32]];
        break;
      }
      case 50: {
        [self setInstallationId:[input readString]];
        break;
      }
      case 56: {
        [self setPriority:[input readInt32]];
        break;
      }
      case 64: {
        [self setService:[input readInt32]];
        break;
      }
      case 810: {
        AVIMDataCommandBuilder* subBuilder = [AVIMDataCommand builder];
        if (self.hasDataMessage) {
          [subBuilder mergeFrom:self.dataMessage];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setDataMessage:[subBuilder buildPartial]];
        break;
      }
      case 818: {
        AVIMSessionCommandBuilder* subBuilder = [AVIMSessionCommand builder];
        if (self.hasSessionMessage) {
          [subBuilder mergeFrom:self.sessionMessage];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setSessionMessage:[subBuilder buildPartial]];
        break;
      }
      case 826: {
        AVIMErrorCommandBuilder* subBuilder = [AVIMErrorCommand builder];
        if (self.hasErrorMessage) {
          [subBuilder mergeFrom:self.errorMessage];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setErrorMessage:[subBuilder buildPartial]];
        break;
      }
      case 834: {
        AVIMDirectCommandBuilder* subBuilder = [AVIMDirectCommand builder];
        if (self.hasDirectMessage) {
          [subBuilder mergeFrom:self.directMessage];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setDirectMessage:[subBuilder buildPartial]];
        break;
      }
      case 842: {
        AVIMAckCommandBuilder* subBuilder = [AVIMAckCommand builder];
        if (self.hasAckMessage) {
          [subBuilder mergeFrom:self.ackMessage];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setAckMessage:[subBuilder buildPartial]];
        break;
      }
      case 850: {
        AVIMUnreadCommandBuilder* subBuilder = [AVIMUnreadCommand builder];
        if (self.hasUnreadMessage) {
          [subBuilder mergeFrom:self.unreadMessage];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setUnreadMessage:[subBuilder buildPartial]];
        break;
      }
      case 858: {
        AVIMReadCommandBuilder* subBuilder = [AVIMReadCommand builder];
        if (self.hasReadMessage) {
          [subBuilder mergeFrom:self.readMessage];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setReadMessage:[subBuilder buildPartial]];
        break;
      }
      case 866: {
        AVIMRcpCommandBuilder* subBuilder = [AVIMRcpCommand builder];
        if (self.hasRcpMessage) {
          [subBuilder mergeFrom:self.rcpMessage];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setRcpMessage:[subBuilder buildPartial]];
        break;
      }
      case 874: {
        AVIMLogsCommandBuilder* subBuilder = [AVIMLogsCommand builder];
        if (self.hasLogsMessage) {
          [subBuilder mergeFrom:self.logsMessage];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setLogsMessage:[subBuilder buildPartial]];
        break;
      }
      case 882: {
        AVIMConvCommandBuilder* subBuilder = [AVIMConvCommand builder];
        if (self.hasConvMessage) {
          [subBuilder mergeFrom:self.convMessage];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setConvMessage:[subBuilder buildPartial]];
        break;
      }
      case 890: {
        AVIMRoomCommandBuilder* subBuilder = [AVIMRoomCommand builder];
        if (self.hasRoomMessage) {
          [subBuilder mergeFrom:self.roomMessage];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setRoomMessage:[subBuilder buildPartial]];
        break;
      }
      case 898: {
        AVIMPresenceCommandBuilder* subBuilder = [AVIMPresenceCommand builder];
        if (self.hasPresenceMessage) {
          [subBuilder mergeFrom:self.presenceMessage];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setPresenceMessage:[subBuilder buildPartial]];
        break;
      }
      case 906: {
        AVIMReportCommandBuilder* subBuilder = [AVIMReportCommand builder];
        if (self.hasReportMessage) {
          [subBuilder mergeFrom:self.reportMessage];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setReportMessage:[subBuilder buildPartial]];
        break;
      }
      case 914: {
        AVIMPatchCommandBuilder* subBuilder = [AVIMPatchCommand builder];
        if (self.hasPatchMessage) {
          [subBuilder mergeFrom:self.patchMessage];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setPatchMessage:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasCmd {
  return resultGenericCommand.hasCmd;
}
- (AVIMCommandType) cmd {
  return resultGenericCommand.cmd;
}
- (AVIMGenericCommandBuilder*) setCmd:(AVIMCommandType) value {
  resultGenericCommand.hasCmd = YES;
  resultGenericCommand.cmd = value;
  return self;
}
- (AVIMGenericCommandBuilder*) clearCmd {
  resultGenericCommand.hasCmd = NO;
  resultGenericCommand.cmd = AVIMCommandTypeSession;
  return self;
}
- (BOOL) hasOp {
  return resultGenericCommand.hasOp;
}
- (AVIMOpType) op {
  return resultGenericCommand.op;
}
- (AVIMGenericCommandBuilder*) setOp:(AVIMOpType) value {
  resultGenericCommand.hasOp = YES;
  resultGenericCommand.op = value;
  return self;
}
- (AVIMGenericCommandBuilder*) clearOp {
  resultGenericCommand.hasOp = NO;
  resultGenericCommand.op = AVIMOpTypeOpen;
  return self;
}
- (BOOL) hasAppId {
  return resultGenericCommand.hasAppId;
}
- (NSString*) appId {
  return resultGenericCommand.appId;
}
- (AVIMGenericCommandBuilder*) setAppId:(NSString*) value {
  resultGenericCommand.hasAppId = YES;
  resultGenericCommand.appId = value;
  return self;
}
- (AVIMGenericCommandBuilder*) clearAppId {
  resultGenericCommand.hasAppId = NO;
  resultGenericCommand.appId = @"";
  return self;
}
- (BOOL) hasPeerId {
  return resultGenericCommand.hasPeerId;
}
- (NSString*) peerId {
  return resultGenericCommand.peerId;
}
- (AVIMGenericCommandBuilder*) setPeerId:(NSString*) value {
  resultGenericCommand.hasPeerId = YES;
  resultGenericCommand.peerId = value;
  return self;
}
- (AVIMGenericCommandBuilder*) clearPeerId {
  resultGenericCommand.hasPeerId = NO;
  resultGenericCommand.peerId = @"";
  return self;
}
- (BOOL) hasI {
  return resultGenericCommand.hasI;
}
- (SInt32) i {
  return resultGenericCommand.i;
}
- (AVIMGenericCommandBuilder*) setI:(SInt32) value {
  resultGenericCommand.hasI = YES;
  resultGenericCommand.i = value;
  return self;
}
- (AVIMGenericCommandBuilder*) clearI {
  resultGenericCommand.hasI = NO;
  resultGenericCommand.i = 0;
  return self;
}
- (BOOL) hasInstallationId {
  return resultGenericCommand.hasInstallationId;
}
- (NSString*) installationId {
  return resultGenericCommand.installationId;
}
- (AVIMGenericCommandBuilder*) setInstallationId:(NSString*) value {
  resultGenericCommand.hasInstallationId = YES;
  resultGenericCommand.installationId = value;
  return self;
}
- (AVIMGenericCommandBuilder*) clearInstallationId {
  resultGenericCommand.hasInstallationId = NO;
  resultGenericCommand.installationId = @"";
  return self;
}
- (BOOL) hasPriority {
  return resultGenericCommand.hasPriority;
}
- (SInt32) priority {
  return resultGenericCommand.priority;
}
- (AVIMGenericCommandBuilder*) setPriority:(SInt32) value {
  resultGenericCommand.hasPriority = YES;
  resultGenericCommand.priority = value;
  return self;
}
- (AVIMGenericCommandBuilder*) clearPriority {
  resultGenericCommand.hasPriority = NO;
  resultGenericCommand.priority = 0;
  return self;
}
- (BOOL) hasService {
  return resultGenericCommand.hasService;
}
- (SInt32) service {
  return resultGenericCommand.service;
}
- (AVIMGenericCommandBuilder*) setService:(SInt32) value {
  resultGenericCommand.hasService = YES;
  resultGenericCommand.service = value;
  return self;
}
- (AVIMGenericCommandBuilder*) clearService {
  resultGenericCommand.hasService = NO;
  resultGenericCommand.service = 0;
  return self;
}
- (BOOL) hasDataMessage {
  return resultGenericCommand.hasDataMessage;
}
- (AVIMDataCommand*) dataMessage {
  return resultGenericCommand.dataMessage;
}
- (AVIMGenericCommandBuilder*) setDataMessage:(AVIMDataCommand*) value {
  resultGenericCommand.hasDataMessage = YES;
  resultGenericCommand.dataMessage = value;
  return self;
}
- (AVIMGenericCommandBuilder*) setDataMessageBuilder:(AVIMDataCommandBuilder*) builderForValue {
  return [self setDataMessage:[builderForValue build]];
}
- (AVIMGenericCommandBuilder*) mergeDataMessage:(AVIMDataCommand*) value {
  if (resultGenericCommand.hasDataMessage &&
      resultGenericCommand.dataMessage != [AVIMDataCommand defaultInstance]) {
    resultGenericCommand.dataMessage =
      [[[AVIMDataCommand builderWithPrototype:resultGenericCommand.dataMessage] mergeFrom:value] buildPartial];
  } else {
    resultGenericCommand.dataMessage = value;
  }
  resultGenericCommand.hasDataMessage = YES;
  return self;
}
- (AVIMGenericCommandBuilder*) clearDataMessage {
  resultGenericCommand.hasDataMessage = NO;
  resultGenericCommand.dataMessage = [AVIMDataCommand defaultInstance];
  return self;
}
- (BOOL) hasSessionMessage {
  return resultGenericCommand.hasSessionMessage;
}
- (AVIMSessionCommand*) sessionMessage {
  return resultGenericCommand.sessionMessage;
}
- (AVIMGenericCommandBuilder*) setSessionMessage:(AVIMSessionCommand*) value {
  resultGenericCommand.hasSessionMessage = YES;
  resultGenericCommand.sessionMessage = value;
  return self;
}
- (AVIMGenericCommandBuilder*) setSessionMessageBuilder:(AVIMSessionCommandBuilder*) builderForValue {
  return [self setSessionMessage:[builderForValue build]];
}
- (AVIMGenericCommandBuilder*) mergeSessionMessage:(AVIMSessionCommand*) value {
  if (resultGenericCommand.hasSessionMessage &&
      resultGenericCommand.sessionMessage != [AVIMSessionCommand defaultInstance]) {
    resultGenericCommand.sessionMessage =
      [[[AVIMSessionCommand builderWithPrototype:resultGenericCommand.sessionMessage] mergeFrom:value] buildPartial];
  } else {
    resultGenericCommand.sessionMessage = value;
  }
  resultGenericCommand.hasSessionMessage = YES;
  return self;
}
- (AVIMGenericCommandBuilder*) clearSessionMessage {
  resultGenericCommand.hasSessionMessage = NO;
  resultGenericCommand.sessionMessage = [AVIMSessionCommand defaultInstance];
  return self;
}
- (BOOL) hasErrorMessage {
  return resultGenericCommand.hasErrorMessage;
}
- (AVIMErrorCommand*) errorMessage {
  return resultGenericCommand.errorMessage;
}
- (AVIMGenericCommandBuilder*) setErrorMessage:(AVIMErrorCommand*) value {
  resultGenericCommand.hasErrorMessage = YES;
  resultGenericCommand.errorMessage = value;
  return self;
}
- (AVIMGenericCommandBuilder*) setErrorMessageBuilder:(AVIMErrorCommandBuilder*) builderForValue {
  return [self setErrorMessage:[builderForValue build]];
}
- (AVIMGenericCommandBuilder*) mergeErrorMessage:(AVIMErrorCommand*) value {
  if (resultGenericCommand.hasErrorMessage &&
      resultGenericCommand.errorMessage != [AVIMErrorCommand defaultInstance]) {
    resultGenericCommand.errorMessage =
      [[[AVIMErrorCommand builderWithPrototype:resultGenericCommand.errorMessage] mergeFrom:value] buildPartial];
  } else {
    resultGenericCommand.errorMessage = value;
  }
  resultGenericCommand.hasErrorMessage = YES;
  return self;
}
- (AVIMGenericCommandBuilder*) clearErrorMessage {
  resultGenericCommand.hasErrorMessage = NO;
  resultGenericCommand.errorMessage = [AVIMErrorCommand defaultInstance];
  return self;
}
- (BOOL) hasDirectMessage {
  return resultGenericCommand.hasDirectMessage;
}
- (AVIMDirectCommand*) directMessage {
  return resultGenericCommand.directMessage;
}
- (AVIMGenericCommandBuilder*) setDirectMessage:(AVIMDirectCommand*) value {
  resultGenericCommand.hasDirectMessage = YES;
  resultGenericCommand.directMessage = value;
  return self;
}
- (AVIMGenericCommandBuilder*) setDirectMessageBuilder:(AVIMDirectCommandBuilder*) builderForValue {
  return [self setDirectMessage:[builderForValue build]];
}
- (AVIMGenericCommandBuilder*) mergeDirectMessage:(AVIMDirectCommand*) value {
  if (resultGenericCommand.hasDirectMessage &&
      resultGenericCommand.directMessage != [AVIMDirectCommand defaultInstance]) {
    resultGenericCommand.directMessage =
      [[[AVIMDirectCommand builderWithPrototype:resultGenericCommand.directMessage] mergeFrom:value] buildPartial];
  } else {
    resultGenericCommand.directMessage = value;
  }
  resultGenericCommand.hasDirectMessage = YES;
  return self;
}
- (AVIMGenericCommandBuilder*) clearDirectMessage {
  resultGenericCommand.hasDirectMessage = NO;
  resultGenericCommand.directMessage = [AVIMDirectCommand defaultInstance];
  return self;
}
- (BOOL) hasAckMessage {
  return resultGenericCommand.hasAckMessage;
}
- (AVIMAckCommand*) ackMessage {
  return resultGenericCommand.ackMessage;
}
- (AVIMGenericCommandBuilder*) setAckMessage:(AVIMAckCommand*) value {
  resultGenericCommand.hasAckMessage = YES;
  resultGenericCommand.ackMessage = value;
  return self;
}
- (AVIMGenericCommandBuilder*) setAckMessageBuilder:(AVIMAckCommandBuilder*) builderForValue {
  return [self setAckMessage:[builderForValue build]];
}
- (AVIMGenericCommandBuilder*) mergeAckMessage:(AVIMAckCommand*) value {
  if (resultGenericCommand.hasAckMessage &&
      resultGenericCommand.ackMessage != [AVIMAckCommand defaultInstance]) {
    resultGenericCommand.ackMessage =
      [[[AVIMAckCommand builderWithPrototype:resultGenericCommand.ackMessage] mergeFrom:value] buildPartial];
  } else {
    resultGenericCommand.ackMessage = value;
  }
  resultGenericCommand.hasAckMessage = YES;
  return self;
}
- (AVIMGenericCommandBuilder*) clearAckMessage {
  resultGenericCommand.hasAckMessage = NO;
  resultGenericCommand.ackMessage = [AVIMAckCommand defaultInstance];
  return self;
}
- (BOOL) hasUnreadMessage {
  return resultGenericCommand.hasUnreadMessage;
}
- (AVIMUnreadCommand*) unreadMessage {
  return resultGenericCommand.unreadMessage;
}
- (AVIMGenericCommandBuilder*) setUnreadMessage:(AVIMUnreadCommand*) value {
  resultGenericCommand.hasUnreadMessage = YES;
  resultGenericCommand.unreadMessage = value;
  return self;
}
- (AVIMGenericCommandBuilder*) setUnreadMessageBuilder:(AVIMUnreadCommandBuilder*) builderForValue {
  return [self setUnreadMessage:[builderForValue build]];
}
- (AVIMGenericCommandBuilder*) mergeUnreadMessage:(AVIMUnreadCommand*) value {
  if (resultGenericCommand.hasUnreadMessage &&
      resultGenericCommand.unreadMessage != [AVIMUnreadCommand defaultInstance]) {
    resultGenericCommand.unreadMessage =
      [[[AVIMUnreadCommand builderWithPrototype:resultGenericCommand.unreadMessage] mergeFrom:value] buildPartial];
  } else {
    resultGenericCommand.unreadMessage = value;
  }
  resultGenericCommand.hasUnreadMessage = YES;
  return self;
}
- (AVIMGenericCommandBuilder*) clearUnreadMessage {
  resultGenericCommand.hasUnreadMessage = NO;
  resultGenericCommand.unreadMessage = [AVIMUnreadCommand defaultInstance];
  return self;
}
- (BOOL) hasReadMessage {
  return resultGenericCommand.hasReadMessage;
}
- (AVIMReadCommand*) readMessage {
  return resultGenericCommand.readMessage;
}
- (AVIMGenericCommandBuilder*) setReadMessage:(AVIMReadCommand*) value {
  resultGenericCommand.hasReadMessage = YES;
  resultGenericCommand.readMessage = value;
  return self;
}
- (AVIMGenericCommandBuilder*) setReadMessageBuilder:(AVIMReadCommandBuilder*) builderForValue {
  return [self setReadMessage:[builderForValue build]];
}
- (AVIMGenericCommandBuilder*) mergeReadMessage:(AVIMReadCommand*) value {
  if (resultGenericCommand.hasReadMessage &&
      resultGenericCommand.readMessage != [AVIMReadCommand defaultInstance]) {
    resultGenericCommand.readMessage =
      [[[AVIMReadCommand builderWithPrototype:resultGenericCommand.readMessage] mergeFrom:value] buildPartial];
  } else {
    resultGenericCommand.readMessage = value;
  }
  resultGenericCommand.hasReadMessage = YES;
  return self;
}
- (AVIMGenericCommandBuilder*) clearReadMessage {
  resultGenericCommand.hasReadMessage = NO;
  resultGenericCommand.readMessage = [AVIMReadCommand defaultInstance];
  return self;
}
- (BOOL) hasRcpMessage {
  return resultGenericCommand.hasRcpMessage;
}
- (AVIMRcpCommand*) rcpMessage {
  return resultGenericCommand.rcpMessage;
}
- (AVIMGenericCommandBuilder*) setRcpMessage:(AVIMRcpCommand*) value {
  resultGenericCommand.hasRcpMessage = YES;
  resultGenericCommand.rcpMessage = value;
  return self;
}
- (AVIMGenericCommandBuilder*) setRcpMessageBuilder:(AVIMRcpCommandBuilder*) builderForValue {
  return [self setRcpMessage:[builderForValue build]];
}
- (AVIMGenericCommandBuilder*) mergeRcpMessage:(AVIMRcpCommand*) value {
  if (resultGenericCommand.hasRcpMessage &&
      resultGenericCommand.rcpMessage != [AVIMRcpCommand defaultInstance]) {
    resultGenericCommand.rcpMessage =
      [[[AVIMRcpCommand builderWithPrototype:resultGenericCommand.rcpMessage] mergeFrom:value] buildPartial];
  } else {
    resultGenericCommand.rcpMessage = value;
  }
  resultGenericCommand.hasRcpMessage = YES;
  return self;
}
- (AVIMGenericCommandBuilder*) clearRcpMessage {
  resultGenericCommand.hasRcpMessage = NO;
  resultGenericCommand.rcpMessage = [AVIMRcpCommand defaultInstance];
  return self;
}
- (BOOL) hasLogsMessage {
  return resultGenericCommand.hasLogsMessage;
}
- (AVIMLogsCommand*) logsMessage {
  return resultGenericCommand.logsMessage;
}
- (AVIMGenericCommandBuilder*) setLogsMessage:(AVIMLogsCommand*) value {
  resultGenericCommand.hasLogsMessage = YES;
  resultGenericCommand.logsMessage = value;
  return self;
}
- (AVIMGenericCommandBuilder*) setLogsMessageBuilder:(AVIMLogsCommandBuilder*) builderForValue {
  return [self setLogsMessage:[builderForValue build]];
}
- (AVIMGenericCommandBuilder*) mergeLogsMessage:(AVIMLogsCommand*) value {
  if (resultGenericCommand.hasLogsMessage &&
      resultGenericCommand.logsMessage != [AVIMLogsCommand defaultInstance]) {
    resultGenericCommand.logsMessage =
      [[[AVIMLogsCommand builderWithPrototype:resultGenericCommand.logsMessage] mergeFrom:value] buildPartial];
  } else {
    resultGenericCommand.logsMessage = value;
  }
  resultGenericCommand.hasLogsMessage = YES;
  return self;
}
- (AVIMGenericCommandBuilder*) clearLogsMessage {
  resultGenericCommand.hasLogsMessage = NO;
  resultGenericCommand.logsMessage = [AVIMLogsCommand defaultInstance];
  return self;
}
- (BOOL) hasConvMessage {
  return resultGenericCommand.hasConvMessage;
}
- (AVIMConvCommand*) convMessage {
  return resultGenericCommand.convMessage;
}
- (AVIMGenericCommandBuilder*) setConvMessage:(AVIMConvCommand*) value {
  resultGenericCommand.hasConvMessage = YES;
  resultGenericCommand.convMessage = value;
  return self;
}
- (AVIMGenericCommandBuilder*) setConvMessageBuilder:(AVIMConvCommandBuilder*) builderForValue {
  return [self setConvMessage:[builderForValue build]];
}
- (AVIMGenericCommandBuilder*) mergeConvMessage:(AVIMConvCommand*) value {
  if (resultGenericCommand.hasConvMessage &&
      resultGenericCommand.convMessage != [AVIMConvCommand defaultInstance]) {
    resultGenericCommand.convMessage =
      [[[AVIMConvCommand builderWithPrototype:resultGenericCommand.convMessage] mergeFrom:value] buildPartial];
  } else {
    resultGenericCommand.convMessage = value;
  }
  resultGenericCommand.hasConvMessage = YES;
  return self;
}
- (AVIMGenericCommandBuilder*) clearConvMessage {
  resultGenericCommand.hasConvMessage = NO;
  resultGenericCommand.convMessage = [AVIMConvCommand defaultInstance];
  return self;
}
- (BOOL) hasRoomMessage {
  return resultGenericCommand.hasRoomMessage;
}
- (AVIMRoomCommand*) roomMessage {
  return resultGenericCommand.roomMessage;
}
- (AVIMGenericCommandBuilder*) setRoomMessage:(AVIMRoomCommand*) value {
  resultGenericCommand.hasRoomMessage = YES;
  resultGenericCommand.roomMessage = value;
  return self;
}
- (AVIMGenericCommandBuilder*) setRoomMessageBuilder:(AVIMRoomCommandBuilder*) builderForValue {
  return [self setRoomMessage:[builderForValue build]];
}
- (AVIMGenericCommandBuilder*) mergeRoomMessage:(AVIMRoomCommand*) value {
  if (resultGenericCommand.hasRoomMessage &&
      resultGenericCommand.roomMessage != [AVIMRoomCommand defaultInstance]) {
    resultGenericCommand.roomMessage =
      [[[AVIMRoomCommand builderWithPrototype:resultGenericCommand.roomMessage] mergeFrom:value] buildPartial];
  } else {
    resultGenericCommand.roomMessage = value;
  }
  resultGenericCommand.hasRoomMessage = YES;
  return self;
}
- (AVIMGenericCommandBuilder*) clearRoomMessage {
  resultGenericCommand.hasRoomMessage = NO;
  resultGenericCommand.roomMessage = [AVIMRoomCommand defaultInstance];
  return self;
}
- (BOOL) hasPresenceMessage {
  return resultGenericCommand.hasPresenceMessage;
}
- (AVIMPresenceCommand*) presenceMessage {
  return resultGenericCommand.presenceMessage;
}
- (AVIMGenericCommandBuilder*) setPresenceMessage:(AVIMPresenceCommand*) value {
  resultGenericCommand.hasPresenceMessage = YES;
  resultGenericCommand.presenceMessage = value;
  return self;
}
- (AVIMGenericCommandBuilder*) setPresenceMessageBuilder:(AVIMPresenceCommandBuilder*) builderForValue {
  return [self setPresenceMessage:[builderForValue build]];
}
- (AVIMGenericCommandBuilder*) mergePresenceMessage:(AVIMPresenceCommand*) value {
  if (resultGenericCommand.hasPresenceMessage &&
      resultGenericCommand.presenceMessage != [AVIMPresenceCommand defaultInstance]) {
    resultGenericCommand.presenceMessage =
      [[[AVIMPresenceCommand builderWithPrototype:resultGenericCommand.presenceMessage] mergeFrom:value] buildPartial];
  } else {
    resultGenericCommand.presenceMessage = value;
  }
  resultGenericCommand.hasPresenceMessage = YES;
  return self;
}
- (AVIMGenericCommandBuilder*) clearPresenceMessage {
  resultGenericCommand.hasPresenceMessage = NO;
  resultGenericCommand.presenceMessage = [AVIMPresenceCommand defaultInstance];
  return self;
}
- (BOOL) hasReportMessage {
  return resultGenericCommand.hasReportMessage;
}
- (AVIMReportCommand*) reportMessage {
  return resultGenericCommand.reportMessage;
}
- (AVIMGenericCommandBuilder*) setReportMessage:(AVIMReportCommand*) value {
  resultGenericCommand.hasReportMessage = YES;
  resultGenericCommand.reportMessage = value;
  return self;
}
- (AVIMGenericCommandBuilder*) setReportMessageBuilder:(AVIMReportCommandBuilder*) builderForValue {
  return [self setReportMessage:[builderForValue build]];
}
- (AVIMGenericCommandBuilder*) mergeReportMessage:(AVIMReportCommand*) value {
  if (resultGenericCommand.hasReportMessage &&
      resultGenericCommand.reportMessage != [AVIMReportCommand defaultInstance]) {
    resultGenericCommand.reportMessage =
      [[[AVIMReportCommand builderWithPrototype:resultGenericCommand.reportMessage] mergeFrom:value] buildPartial];
  } else {
    resultGenericCommand.reportMessage = value;
  }
  resultGenericCommand.hasReportMessage = YES;
  return self;
}
- (AVIMGenericCommandBuilder*) clearReportMessage {
  resultGenericCommand.hasReportMessage = NO;
  resultGenericCommand.reportMessage = [AVIMReportCommand defaultInstance];
  return self;
}
- (BOOL) hasPatchMessage {
  return resultGenericCommand.hasPatchMessage;
}
- (AVIMPatchCommand*) patchMessage {
  return resultGenericCommand.patchMessage;
}
- (AVIMGenericCommandBuilder*) setPatchMessage:(AVIMPatchCommand*) value {
  resultGenericCommand.hasPatchMessage = YES;
  resultGenericCommand.patchMessage = value;
  return self;
}
- (AVIMGenericCommandBuilder*) setPatchMessageBuilder:(AVIMPatchCommandBuilder*) builderForValue {
  return [self setPatchMessage:[builderForValue build]];
}
- (AVIMGenericCommandBuilder*) mergePatchMessage:(AVIMPatchCommand*) value {
  if (resultGenericCommand.hasPatchMessage &&
      resultGenericCommand.patchMessage != [AVIMPatchCommand defaultInstance]) {
    resultGenericCommand.patchMessage =
      [[[AVIMPatchCommand builderWithPrototype:resultGenericCommand.patchMessage] mergeFrom:value] buildPartial];
  } else {
    resultGenericCommand.patchMessage = value;
  }
  resultGenericCommand.hasPatchMessage = YES;
  return self;
}
- (AVIMGenericCommandBuilder*) clearPatchMessage {
  resultGenericCommand.hasPatchMessage = NO;
  resultGenericCommand.patchMessage = [AVIMPatchCommand defaultInstance];
  return self;
}
@end


// @@protoc_insertion_point(global_scope)
